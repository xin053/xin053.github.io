<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[shell编程]]></title>
      <url>https://xin053.github.io/2017/03/10/shell%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"><span class="meta">#</span><span class="bash"> this is a comment</span></div><div class="line">echo 'Hello World！'</div><div class="line">exit</div></pre></td></tr></table></figure>
<p>文件保存为<code>hello.sh</code>,然后修改文件的权限:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> chmod 755 hello.sh</span></div></pre></td></tr></table></figure>
<p>最后，执行:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./hello.sh</span></div><div class="line">Hello World!</div></pre></td></tr></table></figure>
<p><code>exit</code>不是必须的，但是每个命令都会返回一个退出状态给父进程，成功返回0，非0值通常被认为是错误码，良好脚本都会带上<code>exit</code>，当一个脚本不带参数<code>exit</code>来结束时，脚本的退出状态由脚本中最后执行命令来决定</p>
<p><code>echo $?</code>可以用来查看前一个命令的退出状态</p>
<a id="more"></a>
<h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>使用<code>=</code>进行赋值，<strong>并且<code>=</code>左右两边不能有空格</strong>,获取变量值得时候在变量名前面加<code>$</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> a=1 <span class="comment"># 如果是a = 1,那么就会被解释为执行a命令,并带有'= 1'参数</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$a</span></span></div><div class="line">1</div></pre></td></tr></table></figure>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hello="a b  c   d"</div><div class="line">echo $hello  # a b c d  变量替换</div><div class="line">echo "$hello" # a b  c   d   部分引用</div><div class="line">echo "$&#123;hello&#125;" # a b  c   d</div><div class="line">echo '$hello' # $hello   全引用</div></pre></td></tr></table></figure>
<p>正如所见,变量替换会去除掉空白，全引用会禁止所有特殊符号,如果只是想输出变量的值，推荐使用<code>&quot;${}&quot;</code>这种形式</p>
<h4 id="bash中变量的类型"><a href="#bash中变量的类型" class="headerlink" title="bash中变量的类型"></a>bash中变量的类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=2334 #整形</div><div class="line">b=$&#123;a/23/BB&#125; #这将把b变量从整形变为string</div><div class="line">c=$&#123;b/BB/23&#125; #这将把c变量从string变为整形</div></pre></td></tr></table></figure>
<p>所以说bash中的变量都是无类型的</p>
<h4 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ./scriptname 1 2 3 4 5 6 7 8 9 10</span></div></pre></td></tr></table></figure>
<p><code>1 2 3 4 5 6 7 8 9 10</code>是从命令行传入的10个参数，<code>$0</code>表示脚本名称，<code>$1</code>表示第一个参数，<code>${10}</code>表示第10个参数，<code>$#</code>位置参数的个数，<code>$*</code>所有的位置参数，被作为一个单词</p>
<p>每一次执行<code>shift</code>命令能够将所有位置参数向前移动一个位置，而原来第一个位置的参数则被丢弃</p>
<h4 id="内部变量"><a href="#内部变量" class="headerlink" title="内部变量"></a>内部变量</h4><p><code>$BASH</code> - bash二进制执行文件的位置</p>
<p><code>$FUNCNAME</code> - 当前函数的名字</p>
<p><code>$GROUPS</code> - 当前用户属于的组</p>
<p><code>$HOME</code> - 用户home目录</p>
<p><code>$HOSTNAME</code> - 主机名</p>
<p><code>$IFS</code> - 内部域分隔符，该变量决定bash在解释字符串时如何识别域或单词的边界</p>
<p><code>$LINENO</code> - 记录它所在shell脚本中它所在行的行号</p>
<p><code>$OSTYPE</code> - 系统类型</p>
<p><code>$PPID</code> - 一个进程的<code>$PPID</code>就是它的父进程的pid</p>
<p><code>$PWD</code> - 当前工作目录</p>
<p><code>$SECONDS</code> - 这个脚本已经运行的时间</p>
<p><code>$SHLVL</code> - shell层叠的层次</p>
<p><code>$UID</code> - 用户id号</p>
<p><code>$$</code> - 脚本自身进程pid</p>
<h4 id="获取变量名"><a href="#获取变量名" class="headerlink" title="获取变量名"></a>获取变量名</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;!prefix*&#125;</span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;!prefix@&#125;</span></div></pre></td></tr></table></figure>
<p>这两个命令都可以返回以<code>prefix</code>开头的已有变量</p>
<h3 id="Here-Documents"><a href="#Here-Documents" class="headerlink" title="Here Documents"></a>Here Documents</h3><p>here documents是一种重定向的形式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">command &lt;&lt; token</div><div class="line">text</div><div class="line">token</div></pre></td></tr></table></figure>
<p>这里的command是一个可以接受标准输入的命令，token是一个用来指示嵌入文本结束的字符串。上述结构就是将text的内容当作标准输入传给了command</p>
<p>将<code>&lt;&lt;</code>改为<code>&lt;&lt;-</code>，shell就会忽略text开头的tab字符，这样text内容就可以缩进，从而提高代码的可读性。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cat &lt;&lt;- _EOF_</div><div class="line">	hello</div><div class="line">	world</div><div class="line">	!!!!!</div><div class="line">_EOF_</div></pre></td></tr></table></figure>
<p>常用上述方法代替<code>echo</code>输出多行内容</p>
<h3 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h3><p>使用<code>read</code>来获取用户的输入</p>
<p><code>read a</code>将获取用户的输入到变量a，如果没有提供变量名，默认变量<code>REPLY</code>会包含用户输入</p>
<p><code>read</code>支持以下选项</p>
<p><code>-a array</code> - 把输入赋值到数组array中，从索引号0开始</p>
<p><code>-n num</code> - 读取num个输入字符，而不是整行</p>
<p><code>-p prompt</code> - 为输入显示提示信息</p>
<p><code>-r</code> - raw modw，不会把反斜杠字符解释为转义字符</p>
<p><code>-s</code> - silent mode，不会再屏幕上显示输入的文字</p>
<p><code>-t seconds</code>  - 超时，seconds秒之后，如果没有输入，则返回一个非零退出状态</p>
<h3 id="给变量指定默认值"><a href="#给变量指定默认值" class="headerlink" title="给变量指定默认值"></a>给变量指定默认值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter:-word&#125;</span></div></pre></td></tr></table></figure>
<p>若<code>parameter</code>没有设置或者为空，展开结果为<code>word</code>，若<code>parameter</code>不为空，则展开结果是<code>parameter</code>的值</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter:=word&#125;</span></div></pre></td></tr></table></figure>
<p>若<code>parameter</code>没有设置或者为空，展开结果为<code>word</code>，并且<code>word</code>的值会赋值给<code>parameter</code>,若<code>parameter</code>不为空，则展开结果是<code>parameter</code>的值</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter:?word&#125;</span></div></pre></td></tr></table></figure>
<p>若<code>parameter</code>没有设置或者为空，这种展开导致脚本带有错误退出，并且<code>word</code>的内容会发送到标准错误，若<code>parameter</code>不为空，则展开结果是<code>parameter</code>的值</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><p>函数定义有两种形式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function name()&#123;</div><div class="line">  commands</div><div class="line">  return</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name()&#123;</div><div class="line">  commands</div><div class="line">  return</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用函数时，只用写函数名，不用加括号，并且函数的定义要在函数调用之前</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">function hello()&#123;</div><div class="line">  echo "Hello World!"</div><div class="line">  return</div><div class="line">&#125;</div><div class="line">hello   # 函数调用</div></pre></td></tr></table></figure>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在函数内部使用<code>local</code>关键字来定义局部变量</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function funcname()&#123;</div><div class="line">  local test=1</div><div class="line">  echo $test</div><div class="line">  return</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">x=5</div><div class="line">if [ $x == 5 ]; then          # 注意[右边的空格和]左边的空格以及==两边的空格</div><div class="line">	echo "x equals 5"</div><div class="line">else</div><div class="line">	echo "x dose not equals 5"</div><div class="line">fi</div></pre></td></tr></table></figure>
<h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><p><strong>涉及到判断的地方都是检测命令的退出状态码，如果是0，表示命令成功执行，也就表示当前判断的内容为真，非0则假。</strong></p>
<h4 id="文件表达式"><a href="#文件表达式" class="headerlink" title="文件表达式"></a>文件表达式</h4><p><code>-d file</code> - file存在并且是一个目录</p>
<p><code>-e file</code> - file存在</p>
<p><code>-f file</code> - file存在并且是一个普通文件</p>
<p><code>-s file</code> - file存在并且其长度大于0</p>
<p><code>-r file</code> - file存在并且可读</p>
<p><code>-w file</code> - file存在并且可写</p>
<p><code>-x file</code> - file存在并且可执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"></div><div class="line">FILE=~/.bashrc</div><div class="line"></div><div class="line">if [ -f "$FILE" ]; then</div><div class="line">	echo "$FILE is a file"</div><div class="line">fi</div><div class="line"></div><div class="line">exit</div></pre></td></tr></table></figure>
<h4 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h4><p><code>-n string</code> - 字符串string的长度大于0</p>
<p><code>-z string</code> - 字符串string的长度为0</p>
<p><code>string1 == string2</code> - 字符串string1等于字符串string2</p>
<p><code>string1 &gt; string2</code> - string1排列在string2之后</p>
<h4 id="其他判断"><a href="#其他判断" class="headerlink" title="其他判断"></a>其他判断</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[ expression ]]</div></pre></td></tr></table></figure>
<p>类似于<code>test</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string =~ regex</div></pre></td></tr></table></figure>
<p>如果string匹配正则表达式regex，则返回真</p>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"></div><div class="line">count=1</div><div class="line">while [ "$&#123;count&#125;" -le 5 ]; do</div><div class="line">	echo "$&#123;count&#125;"</div><div class="line">	count=$((count + 1))</div><div class="line">done</div><div class="line">echo "finished!"</div><div class="line"></div><div class="line">exit</div></pre></td></tr></table></figure>
<p>循环中可以使用<code>continue</code>和<code>break</code></p>
<h4 id="循环读取数据"><a href="#循环读取数据" class="headerlink" title="循环读取数据"></a>循环读取数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"></div><div class="line">while read para1 para2 para3; do</div><div class="line">	...</div><div class="line">done &lt; test.txt</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"></div><div class="line">sort -k 1,1 -k 2n test.txt | while read para1 para2 para3; do</div></pre></td></tr></table></figure>
<p><code>read</code>每次读取文本行之后将会返回退出状态码0，知道文件末尾，返回状态码非零才结束while循环</p>
<p>当循环终止时，循环中创建的任意变量或赋值的变量都会消失</p>
<h3 id="until"><a href="#until" class="headerlink" title="until"></a>until</h3><p>与while类似</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line"></div><div class="line">count=1</div><div class="line">until [ "$&#123;count&#125;" -gt 5 ]; do</div><div class="line">	echo "$&#123;count&#125;"</div><div class="line">	count=$((count + 1))</div><div class="line">done</div><div class="line">echo "finished!"</div><div class="line"></div><div class="line">exit</div></pre></td></tr></table></figure>
<h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">read -p "Enter selection [0-3]"</div><div class="line">case $REPLY in</div><div class="line">	0)	echo "Program terminated."</div><div class="line">		exit</div><div class="line">		;;</div><div class="line">	1)	echo "Hostname: $HOSTNAME"</div><div class="line">		uptime</div><div class="line">		;;</div><div class="line">	2)	df -h</div><div class="line">		;;</div><div class="line">	3)	echo "Hello"</div><div class="line">		;;</div><div class="line">	*)	echo "Invalid entry" &gt;&amp;2</div><div class="line">		exit 1</div><div class="line">		;;</div><div class="line">esac</div></pre></td></tr></table></figure>
<h4 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h4><p><code>a)</code> - 匹配单词<code>a</code></p>
<p><code>a|A)</code> - 匹配单词<code>a</code>或<code>A</code></p>
<p><code>[[:alpha:]]</code> - 若单词是一个字母字符，则匹配</p>
<p><code>???)</code> - 若单词只有3个字符，则匹配</p>
<p><code>*.txt</code> - 若单词以<code>.txt</code>字符结尾，则匹配</p>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for i in A B C D; do</div><div class="line">	echo "$i"</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for i in &#123;A..D&#125;; do</div><div class="line">	echo "$i"</div><div class="line">done</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for i in cloud*.txt; do</div><div class="line">	echo "$i"</div><div class="line">done</div></pre></td></tr></table></figure>
<p>也可以使用c语言格式:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (( expression1; expression2; expression3 )); do</div><div class="line">	commands</div><div class="line">done</div></pre></td></tr></table></figure>
<h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;<span class="comment">#parameter&#125;</span></span></div></pre></td></tr></table></figure>
<p>会展开为<code>parameter</code>所包含的字符串的长度</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter:offset&#125;        <span class="comment"># 提取从offset到末尾的字符串</span></span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter:offset:length&#125; <span class="comment"># 提取offset开始，指定长度的字符串</span></span></div></pre></td></tr></table></figure>
<h4 id="子串消除"><a href="#子串消除" class="headerlink" title="子串消除"></a>子串消除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter<span class="comment">#pattern&#125;       # 展开为删除parameter中从开头开始匹配pattern的最短字符串</span></span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter<span class="comment">##pattern&#125;      # 展开为删除parameter中从开头开始匹配pattern的最长字符串</span></span></div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> foo=file.txt.zip</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo#*.&#125;</span></span></div><div class="line">txt.zip</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;foo##*.&#125;</span></span></div><div class="line">zip</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter%pattern&#125;</span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter%%pattern&#125;</span></div></pre></td></tr></table></figure>
<p>功能与<code>#</code>和<code>##</code>类似，只是是从结尾开始匹配</p>
<h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter/pattern/string&#125;  <span class="comment"># 用string替换第一个匹配pattern的字符串</span></span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter//pattern/string&#125; <span class="comment"># 替换掉全部匹配的</span></span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter/<span class="comment">#pattern/string&#125; # 替换从字符串开头开始匹配的第一个字符串</span></span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter/%pattern/string&#125; <span class="comment"># 替换从字符串结尾开始匹配的第一个字符串</span></span></div></pre></td></tr></table></figure>
<p>原parameter变量值不变</p>
<h4 id="字符串大小写"><a href="#字符串大小写" class="headerlink" title="字符串大小写"></a>字符串大小写</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter,,&#125;   <span class="comment"># 把parameter的值全部展开为小写</span></span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter,&#125;    <span class="comment"># 仅把第一个字符展开为小写</span></span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter^^&#125;   <span class="comment"># 把parameter的值全部展开为大写</span></span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;parameter^&#125;    <span class="comment"># 仅把第一个字符展开为大写</span></span></div></pre></td></tr></table></figure>
<p>原parameter变量值不变</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">declare</span> <span class="_">-a</span> array  <span class="comment"># 声明array为一个数组</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> array[0]=0</span></div><div class="line"><span class="meta">$</span><span class="bash"> array[1]=1</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;array[0]&#125;</span></span></div><div class="line">0</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;array[1]&#125;</span></span></div><div class="line">1</div></pre></td></tr></table></figure>
<h4 id="多值赋值"><a href="#多值赋值" class="headerlink" title="多值赋值"></a>多值赋值</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">test</span>=(a b c d)</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;test[0]&#125;</span></span></div><div class="line">a</div></pre></td></tr></table></figure>
<h4 id="输出整个数组内容"><a href="#输出整个数组内容" class="headerlink" title="输出整个数组内容"></a>输出整个数组内容</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> animals=(<span class="string">"a dog"</span> <span class="string">"a cat"</span> <span class="string">"a fish"</span>)</span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;animals[*]&#125;</span>"</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span></span></div><div class="line">a dog a cat a fish</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$&#123;animals[@]&#125;</span>"</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span>; <span class="keyword">done</span></span></div><div class="line">a dog</div><div class="line">a cat</div><div class="line">a fish</div></pre></td></tr></table></figure>
<p>下标<code>*</code>和<code>@</code>可以被用来访问数组中的每一个元素</p>
<h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">declare</span> -A colors</span></div><div class="line"><span class="meta">$</span><span class="bash"> colors[<span class="string">"red"</span>]=<span class="string">"#ff0000"</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> colors[<span class="string">"green"</span>]=<span class="string">"#00ff00"</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> colors[<span class="string">"blue"</span>]=<span class="string">"#0000ff"</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$&#123;colors["blue"]&#125;</span></span></div><div class="line"><span class="meta">#</span><span class="bash">0000ff</span></div></pre></td></tr></table></figure>
<h4 id="找到数组使用的下标"><a href="#找到数组使用的下标" class="headerlink" title="找到数组使用的下标"></a>找到数组使用的下标</h4><p>bash允许数组下标包含空格，有时候确定哪个元素真正存在是很有用的</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">&#123;!array[*]&#125;</span></div><div class="line"><span class="meta">$</span><span class="bash">&#123;!array[@]&#125;</span></div></pre></td></tr></table></figure>
<h3 id="组命令和子shell"><a href="#组命令和子shell" class="headerlink" title="组命令和子shell"></a>组命令和子shell</h3><p>组命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; command1; command2; [commands3; ...] &#125;  # 注意花括号旁边的空格</div></pre></td></tr></table></figure>
<p>子shell</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(command1; command2; [command3; ...])</div></pre></td></tr></table></figure>
<p>组命令和子shell都是用来管理重定向的</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; ls -l; echo "test"; cat foo.txt &#125; &gt; output.txt</div></pre></td></tr></table></figure>
<p>会将三个命令的结果合成在一起然后重定向到<code>output.txt</code>中</p>
<p>组命令是在当前shell中执行它所有的命令，而子shell是在一个子shell中执行命令，在子shell中执行命令对环境变量等修改在子shell消失之后便会消失，大多数情况下，我们使用组命令。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"foo"</span> | <span class="built_in">read</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$REPLY</span></span></div></pre></td></tr></table></figure>
<p>该<code>REPLY</code>变量的内容总是空，<strong>是应为在管道线中的命令总是在子shell中执行的</strong>，bash提供进程替换来解决这个问题</p>
<h4 id="进程替换"><a href="#进程替换" class="headerlink" title="进程替换"></a>进程替换</h4><p><code>&lt;(list)</code> - 一种适用于产生标准输出的进程</p>
<p><code>&gt;(list)</code> - 一种适用于接受标准输入的进程</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">read &lt; &lt;(echo "foo")</div><div class="line">echo $REPLY</div></pre></td></tr></table></figure>
<p>进程替换允许我们把一个子shell的输出结果当作一个用于重定向的普通文件，事实上，它就是一种展开形式</p>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux命令学习]]></title>
      <url>https://xin053.github.io/2017/03/08/linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="Linux-命令学习"><a href="#Linux-命令学习" class="headerlink" title="Linux 命令学习"></a>Linux 命令学习</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>显示磁盘容量</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> df -h</span></div></pre></td></tr></table></figure>
<p>显示内存信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ free -h</div></pre></td></tr></table></figure>
<p>确定文件类型</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file 文件名</div></pre></td></tr></table></figure>
<p><code>less</code>和<code>more</code>都能浏览文件，但是前者可以前后分页浏览，后者只支持向前分页浏览</p>
<a id="more"></a>
<p>以管理员模式打开资源管理器</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> sudo nautilus</span></div></pre></td></tr></table></figure>
<p>说明怎样解释一个命令名</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type 命令名</div></pre></td></tr></table></figure>
<p>获取命令简介</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">whatis 命令名</div></pre></td></tr></table></figure>
<p><code>help</code>和<code>man</code>都可以查看命令帮助文档，但是前者是shell内部命令的帮助文档</p>
<p>输入文件前多少行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">head -n 行数 文件名</div></pre></td></tr></table></figure>
<p>输出文件后多少行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -n 行数 文件名</div></pre></td></tr></table></figure>
<p>清空屏幕,与<code>ctrl+l</code>功能一样</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clear</div></pre></td></tr></table></figure>
<p>显示历史列表内容</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">history</div></pre></td></tr></table></figure>
<p>显示所有服务的运行状态</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> service --status-all</span></div></pre></td></tr></table></figure>
<p>显示单个服务的运行状态,例如ssh服务</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> service ssh status</span></div></pre></td></tr></table></figure>
<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p><code>;</code>命令分隔符，可以用来在一行中来写多个命令</p>
<p><code>&quot;&quot;</code>部分引用，阻止了一部分特殊字符</p>
<p><code>&#39;&#39;</code>全引用，阻止了全部特殊字符</p>
<p><code>` </code>反引号，命令替换</p>
<p><code>?</code>测试操作，在参数替换中，可以测试一个变量是够被set</p>
<p><code>$?</code>退出状态变量</p>
<p><code>$$</code>进程ID变量，保存运行脚本进程ID</p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p><code>cp</code> - 复制文件和目录</p>
<p><code>mv</code> - 移动/重命名文件和目录</p>
<p><code>mkdir</code> - 创建目录</p>
<p><code>rm</code> - 删除文件和目录</p>
<p><code>ln</code> - 创建硬链和符号链接</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>命令可以是下面四种形式之一：</p>
<ol>
<li>是一个可执行程序，就像我们所看到的位于目录<code>/usr/bin</code> 中的文件一样。属于这一类的程序，可以编译成二进制文件，诸如用 C 和 C++ 语言写成的程序, 也可以是由脚本语言写成的程序，比如说 shell， perl， python， ruby，等等。</li>
<li>是一个内建于 shell 自身的命令。bash 支持若干命令，内部叫做 shell 内部命令<br>(builtins)。例如， cd 命令，就是一个 shell 内部命令。</li>
<li>是一个 shell 函数。这些是小规模的 shell 脚本，它们混合到环境变量中。在后续的章节里，我们将讨论配置环境变量以及书写 shell 函数。但是现在，仅仅意识到它们的存在就可以了。</li>
<li>是一个命令别名。我们可以定义自己的命令，建立在其它命令之上。</li>
</ol>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p><code>&gt;</code>会删除文件中的内容，然后将内容定向到文件中，<code>&gt;&gt;</code>则是在文件末尾中追加</p>
<p>标准输入和标准输出以及标准错误流是各自重定向的，shell内部参考它们文件描述符为0，1，2</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ls <span class="_">-l</span> /bin/use 2&gt;&gt; ls-error.txt</span></div></pre></td></tr></table></figure>
<p>上述命令就是将错误流输出到<code>ls-error.txt</code>文件中</p>
<p>如果我们想实现将标准输出和标准错误重定向到同一个文件中，我们可以：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ls <span class="_">-l</span> /bin/usr &gt; ls-output.txt 2&gt;&amp;1</span></div></pre></td></tr></table></figure>
<p>上述命令就是先将标准输出重定向到文件， 然后将标准错误重定向到标准输出</p>
<p><strong>注意重定向的顺序很重要，标准错误的重定向必须总是出现在标准输出重定向之后，要不然它不起作用</strong></p>
<p>现在的bash也支持使用以下更精简的方法来将标准输出和错误重定向到同一个文件中</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ls <span class="_">-l</span> /bin/usr &amp;&gt; ls-output.txt</span></div></pre></td></tr></table></figure>
<p>有时候，我们不想要一个命令的输出结果，只想把它扔掉，我们就可以利用一个特殊的设备<code>/dev/null</code>(相当于垃圾桶)</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ls <span class="_">-l</span> /bin/usr 2&gt; /dev/null</span></div></pre></td></tr></table></figure>
<p>上述命令就是将标准错误流扔掉了</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cat /dev/null &gt; filename</span></div></pre></td></tr></table></figure>
<p>将文件内容清空，如果文件不存在，则创建文件，与下面命令功能一样</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> : &gt; filename</span></div></pre></td></tr></table></figure>
<p><code>:</code>是空命令</p>
<p>管道命令<code>|</code>是将一个命令的标准输出重定向到另一个命令的标准输入</p>
<p>例如，我们使用:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ll | less</span></div></pre></td></tr></table></figure>
<p>就能更方便的查看当前目录下的所有文件了</p>
<p><code>tee</code>命令从标准输入读取数据，并同时输出到标准输出和文件中。</p>
<h3 id="花括号展开"><a href="#花括号展开" class="headerlink" title="花括号展开"></a>花括号展开</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> &#123;1..5&#125;</span></div><div class="line">1 2 3 4 5</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> &#123;z..a&#125;</span></div><div class="line">z y x w v u t s r q p o n m l k j i h g f e d c b a</div></pre></td></tr></table></figure>
<h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><p>命令替换允许我们把一个命令的输出作为一个展开模式来使用</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ll $(<span class="built_in">which</span> cp)</span></div><div class="line">-rwxr-xr-x 1 root root 151024 2月 18 2016 /bin/cp*</div></pre></td></tr></table></figure>
<p>也可以使用反引号来代替美元符号和括号</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ll `<span class="built_in">which</span> cp`</span></div><div class="line">-rwxr-xr-x 1 root root 151024 2月 18 2016 /bin/cp*</div></pre></td></tr></table></figure>
<h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><h4 id="setuid"><a href="#setuid" class="headerlink" title="setuid"></a>setuid</h4><p>当应用到一个可执行文件时，它把有效用户ID从真正的用户(实际运行程序的用户)设置成程序所有者的ID</p>
<h4 id="setgid"><a href="#setgid" class="headerlink" title="setgid"></a>setgid</h4><p>与setuid位相似，把有效用户组ID从真正的用户组ID更改为文件所有者的组的ID</p>
<h4 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h4><p>linux会忽略文件的sticky位，但是如果一个目录设置了sticky位，那么它能阻止用户删除或重命名，除非用户是这个目录的所有者，或是文件的所有者，或是超级用户</p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p><code>ps</code>显示当前有TTY(进程的控制终端)的进程,<code>ps x</code>显示所有进程，不管它们由什么终端控制,<code>px aux</code>还可以显示进程的所有者，CPU和内存使用率等</p>
<h4 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h4><ol>
<li><code>R</code> - 运行</li>
<li><code>S</code> - 正在睡眠</li>
<li><code>D</code> - 不可中断睡眠，进程正在等待I/O</li>
<li><code>T</code> - 已停止</li>
<li><code>Z</code> - 僵尸进程</li>
<li><code>&lt;</code> - 高优先级进程</li>
<li><code>N</code> - 低优先级进程 </li>
</ol>
<p><code>ps</code>只是进程快照，而<code>top</code>命令可以动态的显示系统进程更新的信息(默认情况下，每3秒更新一次).<code>pstree</code>可以输出一个树形结构的进程列表</p>
<h4 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h4><p>可以在命令之后加上<code>&amp;</code>，让它立即在后台执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> xlogo &amp;</span></div><div class="line">[1] 28236</div></pre></td></tr></table></figure>
<p><code>jobs</code>可以显示当前终端后头运行的任务以及状态</p>
<p><strong>一个在后台运行的进程对一切来自键盘的输入都免疫，也不能用<code>ctrl+c</code>来中断它。</strong></p>
<p>使用<code>fg</code>将一个进程返回前台执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> xlogo &amp;</span></div><div class="line">[1] 55692</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">fg</span> %1  //这里的%1被称为jobspec</span></div></pre></td></tr></table></figure>
<p>有时候我们需要停止一个进程，而不是终止。这样会把一个前台进程移到后台等待，输入<code>ctrl+z</code>,可以停止一个前台进程。处于停止的进程可以使用<code>fg</code>命令恢复程序到前台运行或者用<code>bg</code>命令把程序移到后台。</p>
<p>可以使用<code>kill PID</code>或<code>kill jobspec</code>来终止进程</p>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>常用命令:</p>
<ol>
<li><code>yy</code> - 复制当前行</li>
<li><code>5yy</code> - 复制当前行以及随后的四行文本</li>
<li><code>y0</code> - 复制当前光标位置到当前行首的内容</li>
<li><code>y$</code> - 复制当前光标位置到当前行的尾部</li>
<li><code>p</code> - 粘贴</li>
<li><code>d</code> - 删除/剪切文本</li>
</ol>
<h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p><code>cat -A 文件名</code>可以查看文件中的特殊符号</p>
<p><code>cat -n 文件名</code>输出文件内容并显示行号</p>
<p><code>sort</code>对标准输入的内容，或命令行中指定的一个或多个文件进行排序，然后把排序结果发送到标准输出。</p>
<p><code>cut</code>用来从文本行中抽取文本，并把它输入到标准输出</p>
<p><code>paste</code>功能与<code>cut</code>相反，它会添加一个或多个文本列到文件中，而不是从文件中抽取文本列。它通过读取多个文件，然后把每个文件中的字段整合成单个单个文本流，输入到标准输出。</p>
<p><code>sed</code>命令对文本流就行编辑，一般用来做替换操作。</p>]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3.6更新内容]]></title>
      <url>https://xin053.github.io/2016/12/23/Python3.6%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="Python3-6"><a href="#Python3-6" class="headerlink" title="Python3.6"></a>Python3.6</h2><p>北京时间2016年12月23日晚上6点半左右，<a href="https://www.python.org/" target="_blank" rel="external">python官网</a>放出了python3.6.0正式版，安装后，可以看到windows版具体编译时间是2016年12月23日早上8点6分。可以说python3.6从测试到正式发布已经有很长一段时间了，并且官方表示，2017年初开始对3.6版本进行各种bug修复等改进，也就是3.6.x的版本，关于python3.6相较于3.5有哪些变化，请看<a href="https://docs.python.org/3.6/whatsnew/3.6.html" target="_blank" rel="external">What’s New In Python 3.6</a><br>本文主要讲解如何将工作环境从python3.5转到python3.6，以及python3.6新功能的介绍。</p>
<p><img src="https://www.python.org/static/img/python-logo.png" alt=""></p>
<a id="more"></a>
<h2 id="工作环境"><a href="#工作环境" class="headerlink" title="工作环境"></a>工作环境</h2><p>由于python的每个版本，例如3.5和3.6安装时安装目录是分开的(windows环境)，而如果我们将python第三方库安装在python安装目录下的话，那么现在我如果使用3.6，又得重新将3.6的安装目录添加到环境变量<code>PATH</code>，并且将大量第三方库安装到3.6安装目录，但是这样就引发了一个问题，那就是多份第三方库都存在于电脑中，当然也可以删除3.5相关的所有文件，但是实际上重新安装常用的那些库又很麻烦，所以我将python虚拟环境当作我的工作环境，也就是在<code>F:\pythonVE</code>目录创建一个python虚拟环境，将第三方库都安装在这个虚拟环境中，所以现在刚刚安装好python3.6，只用在cmd执行:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m venv --upgrade F:\pythonVE</div></pre></td></tr></table></figure>
<p>注意这里的<code>python</code>是3.6中的<code>python.exe</code>,<code>--upgrade</code>参数的意思就是将虚拟环境中的python版本升级为此python版本(3.6版本)</p>
<p>所以<code>PAHT</code>中只用添加虚拟环境的路径就可以了，然后就是慢慢更新第三方包了，毕竟第三方包适配3.6也需要时间，但是毫无疑问，会很快。<strong>jupyter的<code>ipython-qtconsole.exe</code>现在就用不了，因为pyqt还没支持3.6(毕竟3.6今天才出23333)，不过相信过几天就可以用了，python3已经是趋势，不要告诉我你的主要工作环境是python2(话说12月17号更新了python2.7.13)</strong></p>
<p><strong>注意有些包还是要手动更新的，例如windows上无法编译lxml，所以一般都是下载编译好的进行安装，之前下载的是支持python3.5的lxml，现在需要卸载当前库，并手动下载编译好的支持3.6的lxml进行安装,有些包使用pip安装的时候会提示编码问题，简单的方法就是从<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">Unofficial Windows Binaries for Python Extension Packages</a>下载，然后直接安装</strong></p>
<p><strong><em>以上只是本人环境，因为我目前只把python当作工具，所以不会像开发库一样考虑版本兼容等情况，不过一般还是建议将常用包放在python安装目录下，对于特定的项目构建虚拟环境，在虚拟环境中安装与python版本相适应的包进行开发。</em></strong></p>
<h2 id="What’s-New-In-Python-3-6"><a href="#What’s-New-In-Python-3-6" class="headerlink" title="What’s New In Python 3.6"></a>What’s New In Python 3.6</h2><p>主要改变:</p>
<ul>
<li>PEP 468 - Preserving the order of **kwargs in a function</li>
<li>PEP 487 - Simpler customization of class creation</li>
<li>PEP 495 - Local Time Disambiguation</li>
<li>PEP 498 - Literal String Formatting</li>
<li>PEP 506 - Adding A Secrets Module To The Standard Library</li>
<li>PEP 509 - Add a private version to dict</li>
<li>PEP 515 - Underscores in Numeric Literals</li>
<li>PEP 519 - Adding a file system path protocol</li>
<li>PEP 520 - Preserving Class Attribute Definition Order</li>
<li>PEP 523 - Adding a frame evaluation API to CPython</li>
<li>PEP 524 - Make os.urandom() blocking on Linux (during system startup)</li>
<li>PEP 525 - Asynchronous Generators (provisional)</li>
<li>PEP 526 - Syntax for Variable Annotations (provisional)</li>
<li>PEP 528 - Change Windows console encoding to UTF-8</li>
<li>PEP 529 - Change Windows filesystem encoding to UTF-8</li>
<li>PEP 530 - Asynchronous Comprehensions</li>
</ul>
<h3 id="PEP-498-Formatted-string-literals"><a href="#PEP-498-Formatted-string-literals" class="headerlink" title="PEP 498: Formatted string literals"></a>PEP 498: Formatted string literals</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">"Fred"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"He said his name is <span class="subst">&#123;name&#125;</span>."</span></div><div class="line"><span class="string">'He said his name is Fred.'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>width = <span class="number">10</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>precision = <span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>value = decimal.Decimal(<span class="string">"12.34567"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">f"result: <span class="subst">&#123;value:&#123;width&#125;</span>.<span class="subst">&#123;precision&#125;</span>&#125;"</span>  <span class="comment"># nested fields</span></div><div class="line"><span class="string">'result:      12.35'</span></div></pre></td></tr></table></figure>
<p>在字符串前面加<code>f</code>，表示该字符串将被格式化，类似于对字符串进行<code>str.format()</code>操作，不得不说，确实很方便</p>
<h3 id="PEP-526-Syntax-for-variable-annotations"><a href="#PEP-526-Syntax-for-variable-annotations" class="headerlink" title="PEP 526: Syntax for variable annotations"></a>PEP 526: Syntax for variable annotations</h3><p>提供变量声明语法,，包括类中的变量，实例中的变量和函数参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">primes: List[int] = []</div><div class="line"></div><div class="line">captain: str  <span class="comment"># Note: no initial value!</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Starship</span>:</span></div><div class="line">    stats: Dict[str, int] = &#123;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Starship</span>:</span></div><div class="line"><span class="meta">... </span>    stats: str</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Starship.__annotations__</div><div class="line">&#123;<span class="string">'stats'</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;&#125;</span></div></pre></td></tr></table></figure>
<p>当然，python始终是一门动态语言，所以这些类型声明实际上只是将这些类型信息存储在类或者模块的<code>__annotations__</code>属性中，并不会在运行时检擦这些属性，只是起到提示的作用，当然，这个特性确实也很有用处，具体类型声明语法请看<a href="https://www.python.org/dev/peps/pep-0484/" target="_blank" rel="external">PEP 484</a></p>
<h3 id="PEP-515-Underscores-in-Numeric-Literals"><a href="#PEP-515-Underscores-in-Numeric-Literals" class="headerlink" title="PEP 515: Underscores in Numeric Literals"></a>PEP 515: Underscores in Numeric Literals</h3><p>能够在数字间添加下划线以提高阅读性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; 1_000_000_000_000_000</div><div class="line">1000000000000000</div><div class="line">&gt;&gt;&gt; type(1_000_000_000_000_000)</div><div class="line">&lt;class 'int'&gt;</div><div class="line">&gt;&gt;&gt; 0x_FF_FF_FF_FF</div><div class="line">4294967295</div></pre></td></tr></table></figure>
<p>同时字符串格式化也支持这种下划线的格式化方式:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:_&#125;'</span>.format(<span class="number">1000000</span>)</div><div class="line"><span class="string">'1_000_000'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:_x&#125;'</span>.format(<span class="number">0xFFFFFFFF</span>)</div><div class="line"><span class="string">'ffff_ffff'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;:_X&#125;'</span>.format(<span class="number">0xFFfFFFFF</span>)</div><div class="line"><span class="string">'FFFF_FFFF'</span></div></pre></td></tr></table></figure>
<p>当然也可以使用二进制<code>b</code>，八进制<code>o</code></p>
<h3 id="PEP-525-Asynchronous-Generators"><a href="#PEP-525-Asynchronous-Generators" class="headerlink" title="PEP 525: Asynchronous Generators"></a>PEP 525: Asynchronous Generators</h3><p>异步生成器，python3.6中可以在同一函数体中使用<code>await</code>和<code>yield</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticker</span>:</span></div><div class="line">    <span class="string">"""Yield numbers from 0 to `to` every `delay` seconds."""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, delay, to)</span>:</span></div><div class="line">        self.delay = delay</div><div class="line">        self.i = <span class="number">0</span></div><div class="line">        self.to = to</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__aiter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">__anext__</span><span class="params">(self)</span>:</span></div><div class="line">        i = self.i</div><div class="line">        <span class="keyword">if</span> i &gt;= self.to:</div><div class="line">            <span class="keyword">raise</span> StopAsyncIteration</div><div class="line">        self.i += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> i:</div><div class="line">            <span class="keyword">await</span> asyncio.sleep(self.delay)</div><div class="line">        <span class="keyword">return</span> i</div></pre></td></tr></table></figure>
<p>以上代码现在可以简写为:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">ticker</span><span class="params">(delay, to)</span>:</span></div><div class="line">    <span class="string">"""Yield numbers from 0 to `to` every `delay` seconds."""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(to):</div><div class="line">        <span class="keyword">yield</span> i</div><div class="line">        <span class="keyword">await</span> asyncio.sleep(delay)</div></pre></td></tr></table></figure>
<h3 id="PEP-530-Asynchronous-Comprehensions"><a href="#PEP-530-Asynchronous-Comprehensions" class="headerlink" title="PEP 530: Asynchronous Comprehensions"></a>PEP 530: Asynchronous Comprehensions</h3><p>可以在列表，元组，字典，生成器表达式中使用<code>async for</code>和<code>await</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">result = []</div><div class="line"><span class="keyword">async</span> <span class="keyword">for</span> i <span class="keyword">in</span> aiter():</div><div class="line">    <span class="keyword">if</span> i % <span class="number">2</span>:</div><div class="line">        result.append(i)</div></pre></td></tr></table></figure>
<p>可以简写为:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = [i <span class="keyword">async</span> <span class="keyword">for</span> i <span class="keyword">in</span> aiter() <span class="keyword">if</span> i % <span class="number">2</span>]</div></pre></td></tr></table></figure>
<p>有关<code>await</code>的例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = [<span class="keyword">await</span> fun() <span class="keyword">for</span> fun <span class="keyword">in</span> funcs <span class="keyword">if</span> <span class="keyword">await</span> condition()]</div></pre></td></tr></table></figure>
<h3 id="PEP-487-Simpler-customization-of-class-creation"><a href="#PEP-487-Simpler-customization-of-class-creation" class="headerlink" title="PEP 487: Simpler customization of class creation"></a>PEP 487: Simpler customization of class creation</h3><p>现在可以不用使用元类来自定义子类的创建</p>
<p>当子类被创建时，基类中的<code>__init_subclass__()</code>类方法将被调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PluginBase</span>:</span></div><div class="line">    subclasses = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init_subclass__</span><span class="params">(cls, **kwargs)</span>:</span></div><div class="line">        super().__init_subclass__(**kwargs)</div><div class="line">        cls.subclasses.append(cls)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plugin1</span><span class="params">(PluginBase)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plugin2</span><span class="params">(PluginBase)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h3 id="PEP-487-Descriptor-Protocol-Enhancements"><a href="#PEP-487-Descriptor-Protocol-Enhancements" class="headerlink" title="PEP 487: Descriptor Protocol Enhancements"></a>PEP 487: Descriptor Protocol Enhancements</h3><p>描述符中新增了<code>__set_name__()</code>方法，当描述符被实例化时，便会调用<code>__set_name__()</code>方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntField</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f'expecting integer in <span class="subst">&#123;self.name&#125;</span>'</span>)</div><div class="line">        instance.__dict__[self.name] = value</div><div class="line"></div><div class="line">    <span class="comment"># this is the new initializer:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set_name__</span><span class="params">(self, owner, name)</span>:</span></div><div class="line">        self.name = name</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span>:</span></div><div class="line">    int_field = IntField() <span class="comment"># 将会调用__set_name__()方法，将属性名int_field保存起来</span></div></pre></td></tr></table></figure>
<h3 id="PEP-519-Adding-a-file-system-path-protocol"><a href="#PEP-519-Adding-a-file-system-path-protocol" class="headerlink" title="PEP 519: Adding a file system path protocol"></a>PEP 519: Adding a file system path protocol</h3><p>在大多数眼中，路径就是字符串或者是字节对象,以至于python标准库<code>pathlib</code>较少被使用。现在提供了一个<code>os.PathLike</code>接口，只要实现了<code>__fspath__()</code>方法，那么这个对象就表示是一个路径，并且可以使用<code>os.fspath()</code>,<code>os.fsdecode()</code>, 或者 <code>os.fsencode()</code>方法或者这个路径对象的字符串或字节表示</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pathlib</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(pathlib.Path(<span class="string">"README"</span>)) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    contents = f.read()</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os.path</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.splitext(pathlib.Path(<span class="string">"some_file.txt"</span>))</div><div class="line">(<span class="string">'some_file'</span>, <span class="string">'.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.path.join(<span class="string">"/a/b"</span>, pathlib.Path(<span class="string">"c"</span>))</div><div class="line"><span class="string">'/a/b/c'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.fspath(pathlib.Path(<span class="string">"some_file.txt"</span>))</div><div class="line"><span class="string">'some_file.txt'</span></div></pre></td></tr></table></figure>
<h3 id="PEP-529-Change-Windows-filesystem-encoding-to-UTF-8"><a href="#PEP-529-Change-Windows-filesystem-encoding-to-UTF-8" class="headerlink" title="PEP 529: Change Windows filesystem encoding to UTF-8"></a>PEP 529: Change Windows filesystem encoding to UTF-8</h3><p>现在的python3.6版本使得我们可以在windows平台是正确使用字节对象表示的路径，而不会造成数据丢失，事实上，该字节对象就是通过<code>sys.getfilesystemencoding()</code>编码的，也就是<code>UTF-8</code></p>
<h3 id="PEP-528-Change-Windows-console-encoding-to-UTF-8"><a href="#PEP-528-Change-Windows-console-encoding-to-UTF-8" class="headerlink" title="PEP 528: Change Windows console encoding to UTF-8"></a>PEP 528: Change Windows console encoding to UTF-8</h3><p>The default console on Windows will now accept all Unicode characters and provide correctly read str objects to Python code. <code>sys.stdin</code>, <code>sys.stdout</code> and<code>sys.stderr</code> now default to utf-8 encoding.</p>
<p>只想说，简直是福音，再也不用担心控制台输出乱码了。。。</p>
<h3 id="PEP-520-Preserving-Class-Attribute-Definition-Order"><a href="#PEP-520-Preserving-Class-Attribute-Definition-Order" class="headerlink" title="PEP 520: Preserving Class Attribute Definition Order"></a>PEP 520: Preserving Class Attribute Definition Order</h3><p>类中定义的属性的顺序在<code>__dict__</code>中将被保留</p>
<h3 id="PEP-468-Preserving-Keyword-Argument-Order"><a href="#PEP-468-Preserving-Keyword-Argument-Order" class="headerlink" title="PEP 468: Preserving Keyword Argument Order"></a>PEP 468: Preserving Keyword Argument Order</h3><p><code>**kwargs</code> in a function signature is now guaranteed to be an insertion-order-preserving mapping.</p>
<h4 id="New-dict-implementation"><a href="#New-dict-implementation" class="headerlink" title="New dict implementation"></a>New dict implementation</h4><p>新的dict实现，比原来的实现快20% 到25%不说，还保留了顺序，也就是说dict现在是有序的。。。所以要OrderedDict何用？不过，官方也说了，现在只是暂时这样，有可能之后的版本又变成无序的了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">&#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;</div></pre></td></tr></table></figure>
<h3 id="其他改动"><a href="#其他改动" class="headerlink" title="其他改动"></a>其他改动</h3><p>添加了<a href="https://docs.python.org/3.6/library/secrets.html#module-secrets" target="_blank" rel="external"><code>secrets</code></a>模块</p>
<p>改进了<code>re</code>模块，在正则表达式中添加了修饰符跨度的支持，Examples: <code>&#39;(i:p)ython&#39;</code> matches <code>&#39;python&#39;</code> and <code>&#39;Python&#39;</code>, but not <code>&#39;PYTHON&#39;</code>; <code>&#39;(?i)g(?-i:v)r&#39;</code>matches <code>&#39;GvR&#39;</code> and <code>&#39;gvr&#39;</code>, but not <code>&#39;GVR&#39;</code></p>
<p>更多细节改动参考<a href="https://docs.python.org/3.6/whatsnew/3.6.html" target="_blank" rel="external">官网What’s New In Python 3.6</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://docs.python.org/3.6/whatsnew/3.6.html" target="_blank" rel="external">What’s New In Python 3.6</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cryptography加密库使用详解]]></title>
      <url>https://xin053.github.io/2016/12/20/cryptography%E5%8A%A0%E5%AF%86%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="cryptography简介"><a href="#cryptography简介" class="headerlink" title="cryptography简介"></a>cryptography简介</h2><p>cryptography模块主要分为两类，一类是高层次的加密配方，也就是我们只用关心如何使用它提供的api，并不用关心具体加密过程等细节，这也是我们经常使用的。另一类是低层次的加密原语，如果对密码学不是很了解的话，使用加密原语构造自己的加密算法是很危险的。本片文章介绍高层次的对称加密api和低层次非对称的公钥私钥以及证书</p>
<a id="more"></a>
<h2 id="cryptography使用"><a href="#cryptography使用" class="headerlink" title="cryptography使用"></a>cryptography使用</h2><h3 id="Fernet-对称加密"><a href="#Fernet-对称加密" class="headerlink" title="Fernet(对称加密)"></a>Fernet(对称加密)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</div><div class="line"></div><div class="line">key = Fernet.generate_key()</div><div class="line">key  <span class="comment"># A URL-safe base64-encoded 32-byte key</span></div><div class="line"><span class="comment"># b'7A7idpk7MjmvTWqZf4_vWwvXwAJmmi4SFRnomqKTrB8='</span></div><div class="line">f = Fernet(key)</div><div class="line">token = f.encrypt(<span class="string">b"my deep dark secret"</span>)</div><div class="line">token</div><div class="line"><span class="comment"># b'gAAAAABYWUWYZywJx9l3UrSUMGa5OS3dlz15NpUuOu-Wk6UNsLnQmtDx2hGdRRhwe62EhzT7OuvLafjzwjf7fASFRLMBQPhq3fa2U_WsFcEUzCFR0ZcxJC8='</span></div><div class="line">f.decrypt(token)</div><div class="line"><span class="comment"># b'my deep dark secret'</span></div></pre></td></tr></table></figure>
<h4 id="Using-passwords-with-Fernet"><a href="#Using-passwords-with-Fernet" class="headerlink" title="Using passwords with Fernet"></a>Using passwords with Fernet</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> cryptography.hazmat.primitives.kdf.pbkdf2 <span class="keyword">import</span> PBKDF2HMAC</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>password = <span class="string">b"password"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>salt = os.urandom(<span class="number">16</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>kdf = PBKDF2HMAC(</div><div class="line"><span class="meta">... </span>    algorithm=hashes.SHA256(),</div><div class="line"><span class="meta">... </span>    length=<span class="number">32</span>,</div><div class="line"><span class="meta">... </span>    salt=salt,</div><div class="line"><span class="meta">... </span>    iterations=<span class="number">100000</span>,</div><div class="line"><span class="meta">... </span>    backend=default_backend()</div><div class="line"><span class="meta">... </span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>key = base64.urlsafe_b64encode(kdf.derive(password))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = Fernet(key)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>token = f.encrypt(<span class="string">b"Secret message!"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>token</div><div class="line"><span class="string">'...'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.decrypt(token)</div><div class="line"><span class="string">'Secret message!'</span></div></pre></td></tr></table></figure>
<p>为了以后根据<code>password</code>得到<code>token</code>，需要保存好<code>salt</code></p>
<h3 id="X-509-数字证书标准"><a href="#X-509-数字证书标准" class="headerlink" title="X.509(数字证书标准)"></a>X.509(数字证书标准)</h3><p>数字证书是CA机构签名的含有服务器公钥以及其他网站相关信息的一种电子证书，用来说明该服务器(网站)确实是真的(官方的)，而不是伪造的</p>
<p>这里主要使用的是非对称加密，也就是公钥和私钥(RSA)，私钥用来签名，公钥用来验签</p>
<h4 id="Creating-a-Certificate-Signing-Request-CSR"><a href="#Creating-a-Certificate-Signing-Request-CSR" class="headerlink" title="Creating a Certificate Signing Request (CSR)"></a>Creating a Certificate Signing Request (CSR)</h4><p>When obtaining a certificate from a certificate authority (CA), the usual flow is:</p>
<ol>
<li>You generate a private/public key pair.</li>
<li>You create a request for a certificate, which is signed by your key (to prove that you own that key).</li>
<li>You give your CSR to a CA (but <em>not</em> the private key).</li>
<li>The CA validates that you own the resource (e.g. domain) you want a certificate for.</li>
<li>The CA gives you a certificate, signed by them, which identifies your public key, and the resource you are authenticated for.</li>
<li>You configure your server to use that certificate, combined with your private key, to server traffic.</li>
</ol>
<p>所以首先要生成密钥对:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</div><div class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</div><div class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> rsa</div><div class="line"></div><div class="line">key = rsa.generate_private_key(</div><div class="line">    public_exponent=<span class="number">65537</span>,</div><div class="line">    key_size=<span class="number">2048</span>,</div><div class="line">    backend=default_backend()</div><div class="line">)</div></pre></td></tr></table></figure>
<p>关于生成certificate signing request，请看<a href="https://cryptography.io/en/latest/x509/tutorial/#creating-a-certificate-signing-request-csr" target="_blank" rel="external">官方文档</a>,然后就可以将生成的证书发送给CA机构，待CA机构处理完，就会返回给你经过他们签名的数字证书，该数字证书也是用户用来核实我们网站的证书。</p>
<h4 id="RSA-常用操作"><a href="#RSA-常用操作" class="headerlink" title="RSA 常用操作"></a>RSA 常用操作</h4><h5 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</div><div class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> rsa</div><div class="line"></div><div class="line">private_key = rsa.generate_private_key(</div><div class="line">    public_exponent=<span class="number">65537</span>,</div><div class="line">    key_size=<span class="number">2048</span>,</div><div class="line">    backend=default_backend()</div><div class="line">)</div></pre></td></tr></table></figure>
<p>这样就生成了一个<code>RSAPrivateKey</code>对象。参数保持上面就可以了，具体参数解析看<a href="https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/#generation" target="_blank" rel="external">官方文档</a></p>
<p><strong>私钥公钥是成对生成的，所以当我们使用<code>generate_private_key</code>生成<code>RSAPrivateKey</code>对象时，我们可以通过生成的对象获取到<code>RSAPublicKey</code>对象</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public_key = private_key.public_key()</div></pre></td></tr></table></figure>
<p>当然，肯定是不可以从<code>RSAPublicKey</code>对象中获取到<code>RSAPrivateKey</code>对象的。</p>
<h5 id="从pem文件导入"><a href="#从pem文件导入" class="headerlink" title="从pem文件导入"></a>从pem文件导入</h5><p>也可以从一个pem格式的文件导入一个<code>RSAPrivateKey</code>对象</p>
<p>pem格式文件就是类似:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-----BEGIN CERTIFICATE-----</div><div class="line">MIICKjCCAZMCCQDQ8o4kHKdCPDANBgkqhkiG9w0BAQUFADB6MQswCQYDVQQGEwJV</div><div class="line">UzELMAkGA1UECBMCQ0ExCzAJBgNVBAcTAlNGMQ8wDQYDVQQKEwZKb3llbnQxEDAO</div><div class="line">BgNVBAsTB05vZGUuanMxDDAKBgNVBAMTA2NhMTEgMB4GCSqGSIb3DQEJARYRcnlA</div><div class="line">dGlueWNsb3Vkcy5vcmcwHhcNMTEwMzE0MTgyOTEyWhcNMzgwNzI5MTgyOTEyWjB9</div><div class="line">MQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExCzAJBgNVBAcTAlNGMQ8wDQYDVQQK</div><div class="line">EwZKb3llbnQxEDAOBgNVBAsTB05vZGUuanMxDzANBgNVBAMTBmFnZW50MTEgMB4G</div><div class="line">CSqGSIb3DQEJARYRcnlAdGlueWNsb3Vkcy5vcmcwXDANBgkqhkiG9w0BAQEFAANL</div><div class="line">ADBIAkEAnzpAqcoXZxWJz/WFK7BXwD23jlREyG11x7gkydteHvn6PrVBbB5yfu6c</div><div class="line">bk8w3/Ar608AcyMQ9vHjkLQKH7cjEQIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAKha</div><div class="line">HqjCfTIut+m/idKy3AoFh48tBHo3p9Nl5uBjQJmahKdZAaiksL24Pl+NzPQ8LIU+</div><div class="line">FyDHFp6OeJKN6HzZ72Bh9wpBVu6Uj1hwhZhincyTXT80wtSI/BoUAW8Ls2kwPdus</div><div class="line">64LsJhhxqj2m4vPKNRbHB2QxnNrGi30CUf3kt3Ia</div><div class="line">-----END CERTIFICATE-----</div></pre></td></tr></table></figure>
<p><strong><em>A PEM block which starts with <code>-----BEGIN CERTIFICATE-----</code> is not a public or private key, it’s an<a href="https://cryptography.io/en/latest/x509/" target="_blank" rel="external">X.509 Certificate</a>. You can load it using <a href="https://cryptography.io/en/latest/x509/reference/#cryptography.x509.load_pem_x509_certificate" target="_blank" rel="external"><code>load_pem_x509_certificate()</code></a> and extract the public key with <a href="https://cryptography.io/en/latest/x509/reference/#cryptography.x509.Certificate.public_key" target="_blank" rel="external"><code>Certificate.public_key</code></a></em></strong></p>
<p>当然这个文件也可以被加密，我们使用如下方法从pem文件中导入<code>RSAPrivateKey</code>对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">"path/to/key.pem"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> key_file:</div><div class="line">    private_key = serialization.load_pem_private_key(</div><div class="line">        key_file.read(),</div><div class="line">        password=<span class="keyword">None</span>,</div><div class="line">        backend=default_backend()</div><div class="line">    )</div></pre></td></tr></table></figure>
<p>同理也可以从cer文件和ssh格式文件中导入私钥或公钥。</p>
<h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><p><code>RSAPrivateKey</code>对象和<code>RSAPublicKey</code>对象都可以序列化为pem文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</div><div class="line"></div><div class="line">pem = private_key.private_bytes(</div><div class="line">   encoding=serialization.Encoding.PEM,</div><div class="line">   format=serialization.PrivateFormat.PKCS8,</div><div class="line">   encryption_algorithm=serialization.BestAvailableEncryption(<span class="string">b'mypassword'</span>)</div><div class="line">)</div><div class="line"></div><div class="line">pem.splitlines()</div><div class="line"><span class="comment"># [b'-----BEGIN ENCRYPTED PRIVATE KEY-----',</span></div><div class="line"><span class="comment">#  b'MIIFHzBJBgkqhkiG9w0BBQ0wPDAbBgkqhkiG9w0BBQwwDgQI4LyuGo+hDoACAggA',</span></div><div class="line"><span class="comment">#  b'MB0GCWCGSAFlAwQBKgQQGuA8UxHCt7qLEF29noqffQSCBNBH0rZH59FTTWaPWEV/',</span></div><div class="line"><span class="comment">#  ......</span></div><div class="line"><span class="comment">#  b'Y6Dt0ACOPHcd8Z2Y9MTJ0QFY8A==',</span></div><div class="line"><span class="comment">#  b'-----END ENCRYPTED PRIVATE KEY-----']</span></div></pre></td></tr></table></figure>
<p>强烈建议对私钥进行序列化的时候用自己的密钥进行加密，这样不会将私钥完全暴露</p>
<p><strong>我们之所以说上述过程是序列化，而不是保存私钥，是因为该pem文件不止包含私钥，还包括一些有关私钥的重要信息，具体pem格式请查阅相关文档。而且实际上用的时候并不需要我们手动对pem文件进行解析，只用使用库提供的api就行</strong></p>
<p>也可以不加密，改变如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">encryption_algorithm=serialization.NoEncryption()</div></pre></td></tr></table></figure>
<p>对于公钥的序列化，如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</div><div class="line">public_key = private_key.public_key()</div><div class="line"></div><div class="line">pem = public_key.public_bytes(</div><div class="line">   encoding=serialization.Encoding.PEM,</div><div class="line">   format=serialization.PublicFormat.SubjectPublicKeyInfo</div><div class="line">)</div><div class="line"></div><div class="line">pem.splitlines()</div><div class="line"><span class="comment"># [b'-----BEGIN PUBLIC KEY-----',</span></div><div class="line"><span class="comment">#  b'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtboyGrCz1JIVru4+eoKG',</span></div><div class="line"><span class="comment">#  b'n/adEsavPDb2FQ6/UkIum392ni/Q9H27chliPXEZWZmEorbJvWeHupuL0ld3IWXi',</span></div><div class="line"><span class="comment">#  ......</span></div><div class="line"><span class="comment">#  b'LwIDAQAB',</span></div><div class="line"><span class="comment">#  b'-----END PUBLIC KEY-----']</span></div></pre></td></tr></table></figure>
<h5 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h5><p>使用私钥可以对一段信息进行签名，然后别人就可以使用公钥进行验证。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</div><div class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> padding</div><div class="line"></div><div class="line">signer = private_key.signer(</div><div class="line">    padding.PSS(</div><div class="line">        mgf=padding.MGF1(hashes.SHA256()),</div><div class="line">        salt_length=padding.PSS.MAX_LENGTH</div><div class="line">    ),</div><div class="line">    hashes.SHA256()</div><div class="line">)</div><div class="line"></div><div class="line">message = <span class="string">b"A message I want to sign"</span></div><div class="line">signer.update(message)</div><div class="line">signature = signer.finalize()</div><div class="line"></div><div class="line">signature</div><div class="line"><span class="comment"># b'\x19\x87!5\xc0\xe3s\x01M\xa5-\xf3......\xce\xf5\x03=F\xb3\xd5\xd1\xf9\xc2\xf2\xbak'</span></div></pre></td></tr></table></figure>
<p><code>padding</code>也就是填充，就是将不够长度的信息填充成指定长度(这里为256)，具体为什么需要填充请参考SHA256算法实现</p>
<p>也可以使用更简单的方法进行签名:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">message = <span class="string">b"A message I want to sign"</span></div><div class="line">signature = private_key.sign(</div><div class="line">    message,</div><div class="line">    padding.PSS(</div><div class="line">        mgf=padding.MGF1(hashes.SHA256()),</div><div class="line">        salt_length=padding.PSS.MAX_LENGTH</div><div class="line">    ),</div><div class="line">    hashes.SHA256()</div><div class="line">)</div></pre></td></tr></table></figure>
<h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public_key = private_key.public_key()</div><div class="line">verifier = public_key.verifier(</div><div class="line">    signature,</div><div class="line">    padding.PSS(</div><div class="line">        mgf=padding.MGF1(hashes.SHA256()),</div><div class="line">        salt_length=padding.PSS.MAX_LENGTH</div><div class="line">    ),</div><div class="line">    hashes.SHA256()</div><div class="line">)</div><div class="line"></div><div class="line">verifier.update(message)</div><div class="line">verifier.verify()</div></pre></td></tr></table></figure>
<p>如果验证不通过，将会触发异常，同样，也有以下简单的方式进行验证:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public_key.verify(</div><div class="line">    signature,</div><div class="line">    message,</div><div class="line">    padding.PSS(</div><div class="line">        mgf=padding.MGF1(hashes.SHA256()),</div><div class="line">        salt_length=padding.PSS.MAX_LENGTH</div><div class="line">    ),</div><div class="line">    hashes.SHA256()</div><div class="line">)</div></pre></td></tr></table></figure>
<h5 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h5><p><strong>使用私钥对信息加密没有意义，因为全世界都有你的公钥，毕竟公钥是公开的</strong>，当然，如果你不公开你的公钥，那更失去了意义，所以加密指的是用公钥进行加密，然后我们使用私钥来解密</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">message = <span class="string">b"encrypted data"</span></div><div class="line">ciphertext = public_key.encrypt(</div><div class="line">    message,</div><div class="line">    padding.OAEP(</div><div class="line">        mgf=padding.MGF1(algorithm=hashes.SHA1()),</div><div class="line">        algorithm=hashes.SHA1(),</div><div class="line">        label=<span class="keyword">None</span></div><div class="line">    )</div><div class="line">)</div><div class="line"></div><div class="line">ciphertext</div><div class="line"><span class="comment"># b'J\x95\xadC\xa9......\x18\xbb\\\xa3\xb3\x13f_N\x89\x07`\xa1'</span></div></pre></td></tr></table></figure>
<h5 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">plaintext = private_key.decrypt(</div><div class="line">    ciphertext,</div><div class="line">    padding.OAEP(</div><div class="line">        mgf=padding.MGF1(algorithm=hashes.SHA1()),</div><div class="line">        algorithm=hashes.SHA1(),</div><div class="line">        label=<span class="keyword">None</span></div><div class="line">    )</div><div class="line">)</div><div class="line"></div><div class="line">plaintext</div><div class="line"><span class="comment"># b'encrypted data'</span></div></pre></td></tr></table></figure>
<p>可以看到目前对公钥私钥的操作很多都是使用固定参数就完全够了，所以可以对此进一步封装，于是就出现了<a href="https://github.com/istommao/cryptokit/blob/master/cryptokit/rsa.py" target="_blank" rel="external">该项目</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://cryptography.io/en/latest/" target="_blank" rel="external">cryptography官方文档</a></li>
<li><a href="https://cryptography.io/en/latest/hazmat/primitives/asymmetric/rsa/" target="_blank" rel="external">cryptography RSA</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> cryptography </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[yagmail邮件发送库使用详解]]></title>
      <url>https://xin053.github.io/2016/12/17/yagmail%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="yagmail简介"><a href="#yagmail简介" class="headerlink" title="yagmail简介"></a>yagmail简介</h2><p>使用python标准库进行邮件的处理比较复杂，所以产生了yagmail，但是yagmail目前只能用SMTP协议进行邮件发送，并不能读取邮件，也不支持其他的邮件相关协议，但是对于一般使用完全够了。</p>
<p><img src="https://github.com/kootenpv/yagmail/raw/master/resources/icon.png" style="zoom:35%"></p>
<a id="more"></a>
<h2 id="yagmail使用"><a href="#yagmail使用" class="headerlink" title="yagmail使用"></a>yagmail使用</h2><p>首先是通过<code>yagmail.SMTP()</code>生成一个客户端，但是为了不将我们的密码暴露下脚本文件中，yagmail使用<a href="https://github.com/jaraco/keyring/" target="_blank" rel="external">keyring</a>模块将密码存放在系统keyring服务中。</p>
<p>关于keyring是什么，请看:<a href="https://askubuntu.com/questions/32164/what-does-a-keyring-do" target="_blank" rel="external">What does a Keyring do?</a></p>
<p>官方文档中，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yagmail.register(<span class="string">'mygmailusername'</span>, <span class="string">'mygmailpassword'</span>)</div></pre></td></tr></table></figure>
<p>实际上是对<code>keyring.set_password(&#39;yagmail&#39;, &#39;mygmailusername&#39;, &#39;mygmailpassword&#39;)</code>的封装。</p>
<p><code>SMTP()</code>方法会去用户主文件夹读取<code>.yagmail</code>文件，但是以上操作并不会生成这个文件，所以需要自己创建，并将自己的邮箱写入文件中。</p>
<p>例如，我测试过程中写入<code>.yagmail</code>文件中的内容为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">810620174@qq.com</div></pre></td></tr></table></figure>
<p>而之前我已经通过<code>register()</code>方法将该邮箱的密码保存到了系统keyring中，所以接下来就可以初始化一个SMTP客户端</p>
<p>另外还需要注意的是，经过测试，163邮箱很容易将邮件识别为垃圾邮件，导致邮件发送错误，而qq邮箱需要关闭<a href="https://aq.qq.com/cn2/safe_service/device_lock" target="_blank" rel="external">邮件保护</a>，其他邮箱没有测试，这里推荐使用qq邮箱。</p>
<h3 id="常用邮箱SMTP服务器地址和端口"><a href="#常用邮箱SMTP服务器地址和端口" class="headerlink" title="常用邮箱SMTP服务器地址和端口"></a>常用邮箱SMTP服务器地址和端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">sina.com: </div><div class="line">POP3服务器地址:pop3.sina.com.cn（端口：110） </div><div class="line">SMTP服务器地址:smtp.sina.com.cn（端口：25）   </div><div class="line"></div><div class="line">sinaVIP： </div><div class="line">POP3服务器:pop3.vip.sina.com （端口：110） </div><div class="line">SMTP服务器:smtp.vip.sina.com （端口：25）  </div><div class="line"></div><div class="line">sohu.com: </div><div class="line">POP3服务器地址:pop3.sohu.com（端口：110） </div><div class="line">SMTP服务器地址:smtp.sohu.com（端口：25）  </div><div class="line"></div><div class="line">126邮箱： </div><div class="line">POP3服务器地址:pop.126.com（端口：110） </div><div class="line">SMTP服务器地址:smtp.126.com（端口：25）  </div><div class="line"></div><div class="line">139邮箱： </div><div class="line">POP3服务器地址：POP.139.com（端口：110） </div><div class="line">SMTP服务器地址：SMTP.139.com(端口：25)  </div><div class="line"></div><div class="line">163.com: </div><div class="line">POP3服务器地址:pop.163.com（端口：110） </div><div class="line">SMTP服务器地址:smtp.163.com（端口：25）  </div><div class="line"></div><div class="line">QQ邮箱  </div><div class="line">POP3服务器地址：pop.qq.com（端口：110） </div><div class="line">SMTP服务器地址：smtp.qq.com （端口：25）  </div><div class="line"></div><div class="line">QQ企业邮箱 </div><div class="line">POP3服务器地址：pop.exmail.qq.com （SSL启用 端口：995） </div><div class="line">SMTP服务器地址：smtp.exmail.qq.com（SSL启用 端口：587/465）</div><div class="line"></div><div class="line">yahoo.com: </div><div class="line">POP3服务器地址:pop.mail.yahoo.com </div><div class="line">SMTP服务器地址:smtp.mail.yahoo.com  </div><div class="line"></div><div class="line">yahoo.com.cn: </div><div class="line">POP3服务器地址:pop.mail.yahoo.com.cn（端口：995） </div><div class="line">SMTP服务器地址:smtp.mail.yahoo.com.cn（端口：587）  </div><div class="line"></div><div class="line">HotMail </div><div class="line">POP3服务器地址：pop3.live.com （端口：995） </div><div class="line">SMTP服务器地址：smtp.live.com （端口：587） </div><div class="line"></div><div class="line">gmail(google.com) </div><div class="line">POP3服务器地址:pop.gmail.com（SSL启用 端口：995） </div><div class="line">SMTP服务器地址:smtp.gmail.com（SSL启用 端口：587）  </div><div class="line"></div><div class="line">263.net: </div><div class="line">POP3服务器地址:pop3.263.net（端口：110） </div><div class="line">SMTP服务器地址:smtp.263.net（端口：25）  </div><div class="line"></div><div class="line">263.net.cn: </div><div class="line">POP3服务器地址:pop.263.net.cn（端口：110） </div><div class="line">SMTP服务器地址:smtp.263.net.cn（端口：25） </div><div class="line"></div><div class="line">x263.net: </div><div class="line">POP3服务器地址:pop.x263.net（端口：110） </div><div class="line">SMTP服务器地址:smtp.x263.net（端口：25） </div><div class="line"></div><div class="line">21cn.com: </div><div class="line">POP3服务器地址:pop.21cn.com（端口：110） </div><div class="line">SMTP服务器地址:smtp.21cn.com（端口：25） </div><div class="line"></div><div class="line">Foxmail： </div><div class="line">POP3服务器地址:POP.foxmail.com（端口：110） </div><div class="line">SMTP服务器地址:SMTP.foxmail.com（端口：25）  </div><div class="line"></div><div class="line">china.com: </div><div class="line">POP3服务器地址:pop.china.com（端口：110） </div><div class="line">SMTP服务器地址:smtp.china.com（端口：25） </div><div class="line"></div><div class="line">tom.com: </div><div class="line">POP3服务器地址:pop.tom.com（端口：110） </div><div class="line">SMTP服务器地址:smtp.tom.com（端口：25）  </div><div class="line"></div><div class="line">etang.com: </div><div class="line">POP3服务器地址:pop.etang.com </div><div class="line">SMTP服务器地址:smtp.etang.com</div></pre></td></tr></table></figure>
<p><code>yagmail.SMTP()</code>默认使用的gmail的SMTP服务，所以我们如果使用qq邮箱，则使用如下代码初始化一个SMTP客户端</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yag = yagmail.SMTP(<span class="string">'810620174@qq.com'</span>, host=<span class="string">'smtp.qq.com'</span>, port=<span class="string">'25'</span>)</div></pre></td></tr></table></figure>
<p>紧接着就可以发送邮件了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yag.send(<span class="string">'13207130066.cool@163.com'</span>, <span class="string">'邮件主题'</span>, <span class="string">'这是邮件内容'</span>)</div></pre></td></tr></table></figure>
<p>至此，便像<code>13207130066.cool@163.com</code>这个邮箱发送了一封邮件。</p>
<p>注意<code>send()</code>方法的定义:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, to=None, subject=None, contents=None, attachments=None, cc=None, bcc=None,preview_only=False, validate_email=True, throw_invalid_exception=False, headers=None)</span></span></div></pre></td></tr></table></figure>
<p>如果不指定<code>to</code>参数，则发送给自己,如果<code>to</code>参数是一个列表，则将该邮件发送给列表中的所有用户，<code>attachments</code>表示附件，该参数可以是列表，表示发送多个附件</p>
<p>对于<code>contents</code>参数，官方说明如下:</p>
<ul>
<li>If it is a dictionary it will assume the key is the content and the value is an alias (only for images currently!) e.g. {‘/path/to/image.png’ : ‘MyPicture’}</li>
<li>It will try to see if the content (string) can be read as a file locally, e.g. ‘/path/to/image.png’</li>
<li>if impossible, it will check if the string is valid html e.g. <code>This is a big title</code></li>
<li>if not, it must be text. e.g. ‘Hi Dorika!’</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://github.com/kootenpv/yagmail#no-more-password-and-username" target="_blank" rel="external">yagmail官方文档</a></li>
<li><a href="http://wenku.baidu.com/link?url=dzf8yMnLf6TwrW44kjjl364hD_qSkRsjtc3T9nUuxwjrzo6ohG-9RxJSES5YupoXuzYe2S4vYRCcTvCE8mwH_8EJEqZOslUxo_nxQmtqAXi" target="_blank" rel="external">常用的邮箱服务器(SMTP、POP3)地址、端口</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> yagmail </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算机重点问题集锦]]></title>
      <url>https://xin053.github.io/2016/12/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%87%8D%E7%82%B9%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>计算机行业重点问题，需要深入理解，<strong>持续更新</strong></p>
<a id="more"></a>
<h2 id="阻塞非阻塞与同步异步以及并发并行的区别"><a href="#阻塞非阻塞与同步异步以及并发并行的区别" class="headerlink" title="阻塞非阻塞与同步异步以及并发并行的区别"></a>阻塞非阻塞与同步异步以及并发并行的区别</h2><ul>
<li><a href="https://www.zhihu.com/question/19732473/answer/14413599" target="_blank" rel="external">怎样理解阻塞非阻塞与同步异步的区别？</a></li>
<li><a href="http://blog.csdn.net/qq_24541459/article/details/51704918" target="_blank" rel="external">多线程与异步的区别</a></li>
<li><a href="深入理解并发/并行，阻塞/非阻塞，同步/异步">深入理解并发/并行，阻塞/非阻塞，同步/异步</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> WeNeedToKnow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 集锦 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scrapy爬虫库使用详解]]></title>
      <url>https://xin053.github.io/2016/12/10/Scrapy%E7%88%AC%E8%99%AB%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="Scrapy简介"><a href="#Scrapy简介" class="headerlink" title="Scrapy简介"></a>Scrapy简介</h2><p><img src="https://scrapy.org/img/scrapylogo.png" alt=""></p>
<p>scrapy发出的请求是异步的，默认过滤掉相同的url。能做html/xml解析，数据能导出多种格式，还有强大的插件系统</p>
<p>scrapy(1.2.2)目前支持python 3，但是官方文档是也有说明，并不支持windows平台上的python3，因为scrapy的核心依赖<code>Twisted</code>目前并不支持windows平台上的python 3，所以知乎上有人推荐使用python 2.7，并需要安装<a href="https://www.microsoft.com/en-us/download/details.aspx?id=44266" target="_blank" rel="external">Visual C++ Compiler for Python 2.7</a>，并且window10 也支持这个软件，但是按照python开发者手册上的说明，<a href="https://docs.python.org/devguide/#status-of-python-branches" target="_blank" rel="external">python2.7只会维护到2020年</a>，并且python的未来也是指向python 3，基本上主流库都支持了python 3，并且很多库已经开始不支持python 2了，所以这里我还是想使用python 3.</p>
<p>关于为什么不支持windows平台，原因是windows上不能编译scrapy的依赖<code>lxml</code>和<code>Twisted</code>,但是我们可以下载已经编译好的<code>whl</code>包，用<code>pip</code>安装即可，详情，可以参考这篇博客: <a href="https://my.oschina.net/wangyuefive/blog/784171" target="_blank" rel="external">python 3.5 + scrapy1.2 windows下的安装</a></p>
<a id="more"></a>
<h2 id="Scrapy使用"><a href="#Scrapy使用" class="headerlink" title="Scrapy使用"></a>Scrapy使用</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy startproject test_scrapy</div></pre></td></tr></table></figure>
<p>将会在当前工作目录下创建<code>test_scrapy</code>文件夹，文件下下有以下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">test_scrapy/</div><div class="line">    scrapy.cfg            # deploy configuration file</div><div class="line"></div><div class="line">    test_scrapy/             # project&apos;s Python module, you&apos;ll import your code from here</div><div class="line">        __init__.py</div><div class="line"></div><div class="line">        items.py          # project items definition file</div><div class="line"></div><div class="line">        middlewares.py    # Define here the models for your spider middleware</div><div class="line"></div><div class="line">        pipelines.py      # project pipelines file</div><div class="line"></div><div class="line">        settings.py       # project settings file</div><div class="line"></div><div class="line">        spiders/          # a directory where you&apos;ll later put your spiders</div><div class="line">            __init__.py</div></pre></td></tr></table></figure>
<h3 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h3><p>我们编写的爬虫类必须继承<code>scrapy.Spider</code>并定义好初始请求链接，并且应该将文件放置在<code>spiders</code>目录下。</p>
<p>我们在<code>spiders</code>目录下创建<code>quotes_spider.py</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        urls = [</div><div class="line">            <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">            <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</div><div class="line">        ]</div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</div><div class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div><div class="line">        self.log(<span class="string">'Saved file %s'</span> % filename)</div></pre></td></tr></table></figure>
<p><code>name</code>是spider名称，同一项目中不能同名</p>
<p><code>start_requests()</code>必须返回可迭代的<code>Requests</code>(一个<code>Requests</code>列表或者是生成器对象)，这些请求是爬虫初始的爬取对象.scrapy提供一种简单实现<code>start_requests()</code>的方式，就是使用<code>start_urls</code>列表，该列表在后台会被自动封装成<code>Requests</code>生成器并使用默认的回掉函数<code>parse()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</div><div class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(response.body)</div></pre></td></tr></table></figure>
<p><code>parse()</code>是默认的回调函数。<code>Request</code>可以设置得到响应后的回调函数。</p>
<h3 id="运行爬虫"><a href="#运行爬虫" class="headerlink" title="运行爬虫"></a>运行爬虫</h3><p>在项目的根目录执行:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl quotes</div></pre></td></tr></table></figure>
<p><code>quotes</code>是爬虫名</p>
<p>将会看到以下输出:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">27</span> [scrapy] INFO: Spider opened</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">27</span> [scrapy] INFO: Crawled <span class="number">0</span> pages (at <span class="number">0</span> pages/min), scraped <span class="number">0</span> items (at <span class="number">0</span> items/min)</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">27</span> [scrapy] DEBUG: Telnet console listening on <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6023</span></div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">28</span> [scrapy] DEBUG: Crawled (<span class="number">404</span>) &lt;GET http://quotes.toscrape.com/robots.txt&gt; (referer: None)</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">28</span> [scrapy] DEBUG: Crawled (<span class="number">200</span>) &lt;GET http://quotes.toscrape.com/page/<span class="number">1</span>/&gt; (referer: None)</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">28</span> [quotes] DEBUG: Saved file quotes-<span class="number">1</span>.html</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">29</span> [scrapy] DEBUG: Crawled (<span class="number">200</span>) &lt;GET http://quotes.toscrape.com/page/<span class="number">2</span>/&gt; (referer: None)</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">29</span> [quotes] DEBUG: Saved file quotes-<span class="number">2</span>.html</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">29</span> [scrapy] INFO: Closing spider (finished)</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">29</span> [scrapy] INFO: Dumping Scrapy stats:</div><div class="line">&#123;<span class="string">'downloader/request_bytes'</span>: <span class="number">675</span>,</div><div class="line"> <span class="string">'downloader/request_count'</span>: <span class="number">3</span>,</div><div class="line"> <span class="string">'downloader/request_method_count/GET'</span>: <span class="number">3</span>,</div><div class="line"> <span class="string">'downloader/response_bytes'</span>: <span class="number">5976</span>,</div><div class="line"> <span class="string">'downloader/response_count'</span>: <span class="number">3</span>,</div><div class="line"> <span class="string">'downloader/response_status_count/200'</span>: <span class="number">2</span>,</div><div class="line"> <span class="string">'downloader/response_status_count/404'</span>: <span class="number">1</span>,</div><div class="line"> <span class="string">'finish_reason'</span>: <span class="string">'finished'</span>,</div><div class="line"> <span class="string">'finish_time'</span>: datetime.datetime(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">29</span>, <span class="number">492581</span>),</div><div class="line"> <span class="string">'log_count/DEBUG'</span>: <span class="number">6</span>,</div><div class="line"> <span class="string">'log_count/INFO'</span>: <span class="number">7</span>,</div><div class="line"> <span class="string">'response_received_count'</span>: <span class="number">3</span>,</div><div class="line"> <span class="string">'scheduler/dequeued'</span>: <span class="number">2</span>,</div><div class="line"> <span class="string">'scheduler/dequeued/memory'</span>: <span class="number">2</span>,</div><div class="line"> <span class="string">'scheduler/enqueued'</span>: <span class="number">2</span>,</div><div class="line"> <span class="string">'scheduler/enqueued/memory'</span>: <span class="number">2</span>,</div><div class="line"> <span class="string">'start_time'</span>: datetime.datetime(<span class="number">2016</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">39</span>, <span class="number">27</span>, <span class="number">724826</span>)&#125;</div><div class="line"><span class="number">2016</span>-<span class="number">12</span>-<span class="number">11</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">29</span> [scrapy] INFO: Spider closed (finished)</div></pre></td></tr></table></figure>
<p>并在根目录生成<code>quotes-1.html</code>和<code>quotes-2.html</code></p>
<h3 id="解析网页"><a href="#解析网页" class="headerlink" title="解析网页"></a>解析网页</h3><p>使用类选择器对html/xml进行解析,同时scrapy也支持<a href="http://www.w3school.com.cn/xpath/" target="_blank" rel="external">XPath表达式</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title'</span>)</div><div class="line">[&lt;Selector xpath=<span class="string">'descendant-or-self::title'</span> data=<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>&gt;]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).extract()</div><div class="line">[<span class="string">'Quotes to Scrape'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title'</span>).extract()</div><div class="line">[<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'li.next a'</span>).extract_first()</div><div class="line"><span class="string">'&lt;a href="/page/2/"&gt;Next &lt;span aria-hidden="true"&gt;→&lt;/span&gt;&lt;/a&gt;'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line"><span class="string">'/page/2/'</span></div></pre></td></tr></table></figure>
<p><code>response.css()</code>返回列表，如果想提取第一个，可以这样:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).extract_first()</div><div class="line"><span class="string">'Quotes to Scrape'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>)[<span class="number">0</span>].extract()</div><div class="line"><span class="string">'Quotes to Scrape'</span></div></pre></td></tr></table></figure>
<p>推荐使用第一种方式，这样，如果<code>response.css()</code>返回空列表，前者会返回<code>None</code>，后者会触发异常</p>
<p>除了使用 <code>extract()</code> 和 <code>extract_first()</code>提取数据，也可以使用<code>re()</code>进行正则提取</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).re(<span class="string">r'Quotes.*'</span>)</div><div class="line">[<span class="string">'Quotes to Scrape'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).re(<span class="string">r'Q\w+'</span>)</div><div class="line">[<span class="string">'Quotes'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>response.css(<span class="string">'title::text'</span>).re(<span class="string">r'(\w+) to (\w+)'</span>)</div><div class="line">[<span class="string">'Quotes'</span>, <span class="string">'Scrape'</span>]</div></pre></td></tr></table></figure>
<h3 id="Following-links"><a href="#Following-links" class="headerlink" title="Following links"></a>Following links</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'span small::text'</span>).extract_first(),</div><div class="line">                <span class="comment"># 'author': quote.xpath('span/small/text()').extract_first(),</span></div><div class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            next_page = response.urljoin(next_page) <span class="comment"># urljoin()获取完整url地址</span></div><div class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=self.parse)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">'author'</span></div><div class="line"></div><div class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># follow links to author pages</span></div><div class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.author+a::attr(href)'</span>).extract():</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(response.urljoin(href),</div><div class="line">                                 callback=self.parse_author)</div><div class="line"></div><div class="line">        <span class="comment"># follow pagination links</span></div><div class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            next_page = response.urljoin(next_page)</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=self.parse)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_author</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">extract_with_css</span><span class="params">(query)</span>:</span></div><div class="line">            <span class="keyword">return</span> response.css(query).extract_first().strip()</div><div class="line"></div><div class="line">        <span class="keyword">yield</span> &#123;</div><div class="line">            <span class="string">'name'</span>: extract_with_css(<span class="string">'h3.author-title::text'</span>),</div><div class="line">            <span class="string">'birthdate'</span>: extract_with_css(<span class="string">'.author-born-date::text'</span>),</div><div class="line">            <span class="string">'bio'</span>: extract_with_css(<span class="string">'.author-description::text'</span>),</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">C:\WINDOWS\system32&gt;scrapy</div><div class="line">Scrapy <span class="number">1.2</span>.<span class="number">2</span> - no active project</div><div class="line"></div><div class="line">Usage:</div><div class="line">  scrapy &lt;command&gt; [options] [args]</div><div class="line"></div><div class="line">Available commands:</div><div class="line">  bench         Run quick benchmark test</div><div class="line">  commands</div><div class="line">  fetch         Fetch a URL using the Scrapy downloader</div><div class="line">  genspider     Generate new spider using pre-defined templates</div><div class="line">  runspider     Run a self-contained spider (without creating a project)</div><div class="line">  settings      Get settings values</div><div class="line">  shell         Interactive scraping console</div><div class="line">  startproject  Create new project</div><div class="line">  version       Print Scrapy version</div><div class="line">  view          Open URL <span class="keyword">in</span> browser, as seen by Scrapy</div><div class="line"></div><div class="line">  [ more ]      More commands available when run from project directory</div><div class="line"></div><div class="line">Use <span class="string">"scrapy &lt;command&gt; -h"</span> to see more info about a command</div></pre></td></tr></table></figure>
<p>更多命令以及命令的详细使用方法请参考<a href="https://doc.scrapy.org/en/latest/topics/commands.html#available-tool-commands" target="_blank" rel="external">官方文档</a></p>
<h3 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h3><p>除了继承<code>scrapy.Spider</code>，常用的还有<code>scrapy.spiders.CrawlSpider</code>,该类可以在前者的基础上添加<code>Rule</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</div><div class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(CrawlSpider)</span>:</span></div><div class="line">    name = <span class="string">'example.com'</span></div><div class="line">    allowed_domains = [<span class="string">'example.com'</span>]</div><div class="line">    start_urls = [<span class="string">'http://www.example.com'</span>]</div><div class="line"></div><div class="line">    rules = (</div><div class="line">        <span class="comment"># Extract links matching 'category.php' (but not matching 'subsection.php')</span></div><div class="line">        <span class="comment"># and follow links from them (since no callback means follow=True by default).</span></div><div class="line">        Rule(LinkExtractor(allow=(<span class="string">'category\.php'</span>, ), deny=(<span class="string">'subsection\.php'</span>, ))),</div><div class="line"></div><div class="line">        <span class="comment"># Extract links matching 'item.php' and parse them with the spider's method parse_item</span></div><div class="line">        Rule(LinkExtractor(allow=(<span class="string">'item\.php'</span>, )), callback=<span class="string">'parse_item'</span>),</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></div><div class="line">        self.logger.info(<span class="string">'Hi, this is an item page! %s'</span>, response.url)</div><div class="line">        item = scrapy.Item()</div><div class="line">        item[<span class="string">'id'</span>] = response.xpath(<span class="string">'//td[@id="item_id"]/text()'</span>).re(<span class="string">r'ID: (\d+)'</span>)</div><div class="line">        item[<span class="string">'name'</span>] = response.xpath(<span class="string">'//td[@id="item_name"]/text()'</span>).extract()</div><div class="line">        item[<span class="string">'description'</span>] = response.xpath(<span class="string">'//td[@id="item_description"]/text()'</span>).extract()</div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<h3 id="SitemapSpider"><a href="#SitemapSpider" class="headerlink" title="SitemapSpider"></a>SitemapSpider</h3><p><code>scrapy.spiders.SitemapSpider</code>可以根据sitemaps和robots.txt进行爬去</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> SitemapSpider</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(SitemapSpider)</span>:</span></div><div class="line">    sitemap_urls = [<span class="string">'http://www.example.com/robots.txt'</span>]</div><div class="line">    sitemap_rules = [</div><div class="line">        (<span class="string">'/shop/'</span>, <span class="string">'parse_shop'</span>),</div><div class="line">    ]</div><div class="line">    sitemap_follow = [<span class="string">'/sitemap_shops'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_shop</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">pass</span> <span class="comment"># ... scrape shop here ...</span></div></pre></td></tr></table></figure>
<p>规则中表示含有<code>/shop/</code>的url的回调函数为<code>parse_shop</code>,<code>sitemap_follow</code>表示只跟随包含<code>/sitemap_shops</code>的url</p>
<h3 id="Item"><a href="#Item" class="headerlink" title="Item"></a>Item</h3><p>python自带的<code>dict</code>没有结构体的概念，所以scrapy提供了<code>Item</code>类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    name = scrapy.Field()</div><div class="line">    price = scrapy.Field()</div><div class="line">    stock = scrapy.Field()</div><div class="line">    last_updated = scrapy.Field(serializer=str)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>product = Product(name=<span class="string">'Desktop PC'</span>, price=<span class="number">1000</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> product</div><div class="line">Product(name=<span class="string">'Desktop PC'</span>, price=<span class="number">1000</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>product[<span class="string">'name'</span>]</div><div class="line">Desktop PC</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>product.get(<span class="string">'name'</span>)</div><div class="line">Desktop PC</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>product[<span class="string">'price'</span>]</div><div class="line"><span class="number">1000</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>product.keys()</div><div class="line">[<span class="string">'price'</span>, <span class="string">'name'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>product.items()</div><div class="line">[(<span class="string">'price'</span>, <span class="number">1000</span>), (<span class="string">'name'</span>, <span class="string">'Desktop PC'</span>)]</div></pre></td></tr></table></figure>
<p>Item Loader能够更好将<code>response</code>中的数据注入到<code>Item</code>中</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</div><div class="line"><span class="keyword">from</span> myproject.items <span class="keyword">import</span> Product</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    l = ItemLoader(item=Product(), response=response)</div><div class="line">    l.add_xpath(<span class="string">'name'</span>, <span class="string">'//div[@class="product_name"]'</span>)</div><div class="line">    l.add_xpath(<span class="string">'name'</span>, <span class="string">'//div[@class="product_title"]'</span>)</div><div class="line">    l.add_xpath(<span class="string">'price'</span>, <span class="string">'//p[@id="price"]'</span>)</div><div class="line">    l.add_css(<span class="string">'stock'</span>, <span class="string">'p#stock]'</span>)</div><div class="line">    l.add_value(<span class="string">'last_updated'</span>, <span class="string">'today'</span>) <span class="comment"># you can also use literal values</span></div><div class="line">    <span class="keyword">return</span> l.load_item()</div></pre></td></tr></table></figure>
<h3 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h3><p><code>Item</code>被爬取后会发送给pipeline进行处理，一般pipeline是只用实现<code>process_item</code>的类，也可以实现<code>open_spider()</code>(爬虫开始前执行)和<code>close_spider()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    collection_name = <span class="string">'scrapy_items'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></div><div class="line">        self.mongo_uri = mongo_uri</div><div class="line">        self.mongo_db = mongo_db</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        <span class="keyword">return</span> cls(</div><div class="line">            mongo_uri=crawler.settings.get(<span class="string">'MONGO_URI'</span>),</div><div class="line">            mongo_db=crawler.settings.get(<span class="string">'MONGO_DATABASE'</span>, <span class="string">'items'</span>)</div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.client = pymongo.MongoClient(self.mongo_uri)</div><div class="line">        self.db = self.client[self.mongo_db]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.client.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        self.db[self.collection_name].insert(dict(item))</div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>以上是scrapy基础内容，更多有关scrapy，如log和email等查看<a href="https://doc.scrapy.org/en/latest/index.html" target="_blank" rel="external">官方文档</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://doc.scrapy.org/en/latest/index.html" target="_blank" rel="external">Scrapy官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[re正则库使用详解]]></title>
      <url>https://xin053.github.io/2016/12/01/re%E6%AD%A3%E5%88%99%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="re简介"><a href="#re简介" class="headerlink" title="re简介"></a>re简介</h2><p>正则表达式会被python解释器编译成字节码，这样查找的效率比单纯用python代码实现查找要快，但是匹配统一内容可以有多种不同的正则表达式，并且他们的效率各不相同</p>
<h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">. ^ $ * + ? &#123; &#125; [ ] \ | ( )</div></pre></td></tr></table></figure>
<p>匹配这些特殊符号需要使用<code>\</code>进行转义</p>
<a id="more"></a>
<h3 id=""><a href="#" class="headerlink" title="."></a><code>.</code></h3><p>匹配除换行符以外的任意字符，如果指定了<code>DOTALL</code>标志，则匹配所有字符，但注意<code>.</code>表示仅仅匹配一个字符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">re.findall(<span class="string">r'.'</span>, <span class="string">'\r\nabc'</span>)</div><div class="line"><span class="comment"># ['\r', 'a', 'b', 'c']</span></div><div class="line">re.findall(<span class="string">r'.'</span>, <span class="string">'\r\nabc'</span>, flags=re.DOTALL)</div><div class="line"><span class="comment"># ['\r', '\n', 'a', 'b', 'c']</span></div></pre></td></tr></table></figure>
<h3 id="-1"><a href="#-1" class="headerlink" title="^"></a><code>^</code></h3><p>匹配字符串的开始，当指定<code>MULTILINE</code>标志，则匹配每一行的开头</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'ab.'</span>, <span class="string">'abcdefabhy'</span>)</div><div class="line"><span class="comment"># ['abc', 'abh']</span></div><div class="line">re.findall(<span class="string">r'^ab.'</span>, <span class="string">'abcdefabhy'</span>)</div><div class="line"><span class="comment"># ['abc']</span></div><div class="line">re.findall(<span class="string">r'^ab.'</span>,</div><div class="line">           <span class="string">'''abcd</span></div><div class="line">           abcd</div><div class="line">           acd</div><div class="line">           abcd''')</div><div class="line"><span class="comment"># ['abc']</span></div><div class="line">re.findall(<span class="string">r'^ab.'</span>,</div><div class="line">           <span class="string">'''abcd</span></div><div class="line">           abcd</div><div class="line">           acd</div><div class="line">           abcd''', flags=re.MULTILINE)</div><div class="line"><span class="comment"># ['abc', 'abc', 'abc']</span></div></pre></td></tr></table></figure>
<h3 id="-2"><a href="#-2" class="headerlink" title="###"></a><code>###</code></h3><p>匹配字符串的结尾，当指定<code>MULTILINE</code>标志，则匹配每一行的结尾(匹配换行符之前的)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'.ab$'</span>, <span class="string">'aabcbab'</span>)</div><div class="line"><span class="comment"># ['bab']</span></div><div class="line">re.findall(<span class="string">r'ab.$'</span>, <span class="string">'aabcbab'</span>)</div><div class="line"><span class="comment"># []</span></div><div class="line">re.findall(<span class="string">r'ab.$'</span>, <span class="string">'aabcbab1\n'</span>) <span class="comment"># 注意换行符不是结尾，换行符之前的才是结尾</span></div><div class="line"><span class="comment"># ['ab1']</span></div></pre></td></tr></table></figure>
<h3 id="-3"><a href="#-3" class="headerlink" title="*"></a><code>*</code></h3><p><code>*</code>表示0个或多个前一字符或正则</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'ab*c'</span>, <span class="string">'ac.abc.abbbbc'</span>)</div><div class="line"><span class="comment"># ['ac', 'abc', 'abbbbc']</span></div></pre></td></tr></table></figure>
<h3 id="-4"><a href="#-4" class="headerlink" title="+"></a><code>+</code></h3><p><code>+</code>表示1个或多个前一字符或正则</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'ab+c'</span>, <span class="string">'ac.abc.abbbbc'</span>)</div><div class="line"><span class="comment"># ['abc', 'abbbbc']</span></div></pre></td></tr></table></figure>
<h3 id="-5"><a href="#-5" class="headerlink" title="?"></a><code>?</code></h3><p><code>?</code>表示0个或1个前一字符或正则</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'ab?c'</span>, <span class="string">'ac.abc.abbbbc'</span>)</div><div class="line"><span class="comment"># ['ac', 'abc']</span></div></pre></td></tr></table></figure>
<h3 id="-6"><a href="#-6" class="headerlink" title="*? +? ??"></a><code>*?</code> <code>+?</code> <code>??</code></h3><p><code>*</code> <code>+</code> <code>?</code> 都是贪婪的，会匹配最长的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'&lt;.*&gt;'</span>, <span class="string">'&lt;a&gt; b &lt;c&gt;'</span>)</div><div class="line"><span class="comment"># ['&lt;a&gt; b &lt;c&gt;']</span></div></pre></td></tr></table></figure>
<p>在这些操作符后面添加<code>?</code>能够使之变为不贪婪的，也就是匹配最短的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'&lt;.*?&gt;'</span>, <span class="string">'&lt;a&gt; b &lt;c&gt;'</span>)</div><div class="line"><span class="comment"># ['&lt;a&gt;', '&lt;c&gt;']</span></div></pre></td></tr></table></figure>
<h3 id="m"><a href="#m" class="headerlink" title="{m}"></a><code>{m}</code></h3><p><code>{m}</code>表示m个前一字符或正则</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'a&#123;3&#125;b'</span>, <span class="string">'aabaaabaaaab'</span>)</div><div class="line"><span class="comment"># ['aaab', 'aaab']</span></div></pre></td></tr></table></figure>
<h3 id="m-n"><a href="#m-n" class="headerlink" title="{m,n}"></a><code>{m,n}</code></h3><p><code>{m,n}</code>表示m到n个前一字符或正则  注意:<code>,</code>后面没有空格</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'a&#123;2,3&#125;b'</span>, <span class="string">'aabaaabaaaab'</span>)</div><div class="line"><span class="comment"># ['aab', 'aaab', 'aaab']</span></div></pre></td></tr></table></figure>
<p>省略m表示没有下限，省略n表示没有上限</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'a&#123;,3&#125;b'</span>, <span class="string">'babaabaaabaaaab'</span>)</div><div class="line"><span class="comment"># ['b', 'ab', 'aab', 'aaab', 'aaab']</span></div><div class="line">re.findall(<span class="string">r'a&#123;2,&#125;b'</span>, <span class="string">'babaabaaabaaaab'</span>)</div><div class="line"><span class="comment"># ['aab', 'aaab', 'aaaab']</span></div></pre></td></tr></table></figure>
<h3 id="m-n-1"><a href="#m-n-1" class="headerlink" title="{m,n}?"></a><code>{m,n}?</code></h3><p><code>{m,n}</code>会匹配最长的，在后面加<code>?</code>，则匹配最短的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'a&#123;2,4&#125;'</span>, <span class="string">'aaaa'</span>)</div><div class="line"><span class="comment"># ['aaaa']</span></div><div class="line">re.findall(<span class="string">r'a&#123;2,4&#125;?'</span>, <span class="string">'aaaa'</span>)</div><div class="line"><span class="comment"># ['aa', 'aa']</span></div></pre></td></tr></table></figure>
<h3 id="-7"><a href="#-7" class="headerlink" title="[]"></a><code>[]</code></h3><p><code>[]</code>指定一组字符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'[a-z]'</span>, <span class="string">'adfzADFZ059'</span>)</div><div class="line"><span class="comment"># ['a', 'd', 'f', 'z']</span></div><div class="line">re.findall(<span class="string">r'[a-zA-Z0-9]'</span>, <span class="string">'adfzADFZ059'</span>)</div><div class="line"><span class="comment"># ['a', 'd', 'f', 'z', 'A', 'D', 'F', 'Z', '0', '5', '9']</span></div></pre></td></tr></table></figure>
<p>很多特殊符号在<code>[]</code>环境内无效,其他特殊符号需要转义:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'[.$*+?&#123;&#125;|()]'</span>, <span class="string">'.^$*+?&#123;&#125;[]\|()'</span>)</div><div class="line"><span class="comment"># ['.', '$', '*', '+', '?', '&#123;', '&#125;', '|', '(', ')']</span></div></pre></td></tr></table></figure>
<p><code>[]</code>内的<code>^</code>表示非，<code>^^</code>表示除<code>^</code>以外的全部字符:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'[^5]'</span>, <span class="string">'1359'</span>)</div><div class="line"><span class="comment"># ['1', '3', '9']</span></div><div class="line">re.findall(<span class="string">r'[^^]'</span>, <span class="string">'1359^'</span>)</div><div class="line"><span class="comment"># ['1', '3', '5', '9']</span></div></pre></td></tr></table></figure>
<h3 id="-8"><a href="#-8" class="headerlink" title="|"></a><code>|</code></h3><p><code>|</code>也就是或，注意也是短路操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'a|bc'</span>, <span class="string">'acbcabc'</span>)</div><div class="line"><span class="comment"># ['a', 'bc', 'a', 'bc']</span></div><div class="line">re.findall(<span class="string">r'[a|b]c'</span>, <span class="string">'acbcabc'</span>)</div><div class="line"><span class="comment"># ['ac', 'bc', 'bc']</span></div></pre></td></tr></table></figure>
<h3 id="-9"><a href="#-9" class="headerlink" title="(...)"></a><code>(...)</code></h3><p>匹配圆括号里的RE匹配的内容，并指定组的开始和结束位置。组里面的内容可以被提取,要匹配<code>(</code>和<code>)</code>，则需要使用转义符号或者是<code>[(]</code>,<code>[)]</code></p>
<h3 id="aiLmsux"><a href="#aiLmsux" class="headerlink" title="(?aiLmsux)"></a><code>(?aiLmsux)</code></h3><p><code>i</code>,<code>L</code>,<code>m</code>,<code>s</code>,<code>u</code>,<code>x</code>里的一个或多个字母。表达式不匹配任何字符，但是指定相应的标志：<code>re.I</code>(忽略大小写)、<code>re.L</code>(依赖locale)、<code>re.M</code>(多行模式)、<code>re.S</code>(.匹配所有字符)、<code>re.U</code>(依赖Unicode)、<code>re.X</code>(详细模式)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'(?i)ab'</span>, <span class="string">'abABAbaB'</span>)</div><div class="line"><span class="comment"># ['ab', 'AB', 'Ab', 'aB']</span></div></pre></td></tr></table></figure>
<h3 id="P-lt-name-gt"><a href="#P-lt-name-gt" class="headerlink" title="(?P&lt;name&gt;...)"></a><code>(?P&lt;name&gt;...)</code></h3><p>和普通的圆括号类似，但是子串匹配到的内容将可以用命名的<code>name</code>参数来提取。组的<code>name</code>必须是有效的python标识符，而且在本表达式内不重名。命名了的组和普通组一样，也用数字来提取，也就是说名字只是个额外的属性。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">m = re.match(<span class="string">'(?P&lt;name&gt;\w+)'</span>, <span class="string">'zzx:22'</span>)</div><div class="line">m.group(<span class="string">'name'</span>)</div><div class="line"><span class="comment"># 'zzx'</span></div><div class="line">m.group(<span class="number">1</span>)</div><div class="line"><span class="comment"># 'zzx'</span></div></pre></td></tr></table></figure>
<h2 id="special-sequences"><a href="#special-sequences" class="headerlink" title="special sequences"></a>special sequences</h2><h3 id="number"><a href="#number" class="headerlink" title="\number"></a><code>\number</code></h3><p>表示之前的分组</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.match(<span class="string">r'(.+) \1 (abc) \2'</span>, <span class="string">'55 55 abc abc'</span>)</div><div class="line"><span class="comment"># &lt;_sre.SRE_Match object; span=(0, 13), match='55 55 abc abc'&gt;</span></div></pre></td></tr></table></figure>
<h3 id="A"><a href="#A" class="headerlink" title="\A"></a><code>\A</code></h3><p>仅匹配字符串的开头</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'\Aabc'</span>, <span class="string">'abcabc'</span>)</div><div class="line"><span class="comment"># ['abc']</span></div></pre></td></tr></table></figure>
<h3 id="b"><a href="#b" class="headerlink" title="\b"></a><code>\b</code></h3><p>表示单词开始和结尾处的空白字符以及非字母非数字的字符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'\babc\b'</span>, <span class="string">'abc.'</span>)</div><div class="line"><span class="comment"># ['abc']</span></div><div class="line">re.findall(<span class="string">r'\babc\b'</span>, <span class="string">'abc!'</span>)</div><div class="line"><span class="comment"># ['abc']</span></div><div class="line">re.findall(<span class="string">r'\babc\b'</span>, <span class="string">'abca'</span>)</div><div class="line"><span class="comment"># []</span></div></pre></td></tr></table></figure>
<h3 id="B"><a href="#B" class="headerlink" title="\B"></a><code>\B</code></h3><p><code>\b</code>的反面</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'py\B'</span>, <span class="string">'python'</span>)</div><div class="line"><span class="comment"># ['py']</span></div><div class="line">re.findall(<span class="string">r'py\B'</span>, <span class="string">'py.'</span>)</div><div class="line"><span class="comment"># []</span></div></pre></td></tr></table></figure>
<h3 id="s"><a href="#s" class="headerlink" title="\s"></a><code>\s</code></h3><p>匹配空白字符,包括<code>[ \t\n\r\f\v]</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'aa\s+bb'</span>, <span class="string">'aa \n\t  bb'</span>)</div><div class="line"><span class="comment"># ['aa \n\t  bb']</span></div></pre></td></tr></table></figure>
<h3 id="S"><a href="#S" class="headerlink" title="\S"></a><code>\S</code></h3><p><code>\s</code>的反面</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'aa\S+bb'</span>, <span class="string">'aahg.!bb'</span>)</div><div class="line"><span class="comment"># ['aahg.!bb']</span></div><div class="line">re.findall(<span class="string">r'aa\S+bb'</span>, <span class="string">'aa bb'</span>)</div><div class="line"><span class="comment"># []</span></div></pre></td></tr></table></figure>
<h3 id="w"><a href="#w" class="headerlink" title="\w"></a><code>\w</code></h3><p>匹配数字和字母</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'\w+'</span>, <span class="string">'aa3bb 45AS'</span>)</div><div class="line"><span class="comment"># ['aa3bb', '45AS']</span></div></pre></td></tr></table></figure>
<h3 id="W"><a href="#W" class="headerlink" title="\W"></a><code>\W</code></h3><p><code>\w</code>的反面</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'\W+'</span>, <span class="string">'aa3bb .! 45AS'</span>)</div><div class="line"><span class="comment"># [' .! ']</span></div></pre></td></tr></table></figure>
<h3 id="Z"><a href="#Z" class="headerlink" title="\Z"></a><code>\Z</code></h3><p>匹配字符串结尾</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">re.findall(<span class="string">r'ab\Z'</span>, <span class="string">'abab'</span>)</div><div class="line"><span class="comment"># ['ab']</span></div></pre></td></tr></table></figure>
<h2 id="re模块方法"><a href="#re模块方法" class="headerlink" title="re模块方法"></a><code>re</code>模块方法</h2><h3 id="re-compile-pattern-flags-0"><a href="#re-compile-pattern-flags-0" class="headerlink" title="re.compile(pattern, flags=0)"></a><code>re.compile(pattern, flags=0)</code></h3><p>编译一个正则表达式为一个正则表达式对象，之后就可以使用该对象对字符串进行匹配了</p>
<h3 id="re-search-pattern-string-flags-0"><a href="#re-search-pattern-string-flags-0" class="headerlink" title="re.search(pattern, string, flags=0)"></a><code>re.search(pattern, string, flags=0)</code></h3><p>从字符串的开头开始搜索匹配，返回匹配到的第一个</p>
<h3 id="re-match-pattern-string-flags-0"><a href="#re-match-pattern-string-flags-0" class="headerlink" title="re.match(pattern, string, flags=0)"></a><code>re.match(pattern, string, flags=0)</code></h3><p>返回字符串中匹配的第一个</p>
<h3 id="re-fullmatch-pattern-string-flags-0"><a href="#re-fullmatch-pattern-string-flags-0" class="headerlink" title="re.fullmatch(pattern, string, flags=0)"></a><code>re.fullmatch(pattern, string, flags=0)</code></h3><p>对整个字符串进行匹配</p>
<h3 id="re-split-pattern-string-maxsplit-0-flags-0"><a href="#re-split-pattern-string-maxsplit-0-flags-0" class="headerlink" title="re.split(pattern, string, maxsplit=0, flags=0)"></a><code>re.split(pattern, string, maxsplit=0, flags=0)</code></h3><p>凭正则表达式分割字符串</p>
<h3 id="re-findall-pattern-string-flags-0"><a href="#re-findall-pattern-string-flags-0" class="headerlink" title="re.findall(pattern, string, flags=0)"></a><code>re.findall(pattern, string, flags=0)</code></h3><p>如果匹配模式中包含分组，则返回分组，如果有多个分组，则返回分组组成的元组</p>
<h3 id="re-finditer-pattern-string-flags-0"><a href="#re-finditer-pattern-string-flags-0" class="headerlink" title="re.finditer(pattern, string, flags=0)"></a><code>re.finditer(pattern, string, flags=0)</code></h3><p>返回迭代器</p>
<h3 id="re-sub-pattern-repl-string-count-0-flags-0"><a href="#re-sub-pattern-repl-string-count-0-flags-0" class="headerlink" title="re.sub(pattern, repl, string, count=0, flags=0)"></a><code>re.sub(pattern, repl, string, count=0, flags=0)</code></h3><p>替换</p>
<h2 id="Match-Objects"><a href="#Match-Objects" class="headerlink" title="Match Objects"></a>Match Objects</h2><p>像<code>match()</code> <code>search()</code>等方法返回的就是一个<code>Match</code>对象，该对象包括的属性和方法请看<a href="https://docs.python.org/3/library/re.html#match-objects" target="_blank" rel="external">官方文档</a></p>
<p>注意，关于分组，第0组就是匹配到的字符串</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = re.match(<span class="string">r'\babc\b'</span>, <span class="string">'abc!'</span>)</div><div class="line">a.group()</div><div class="line"><span class="comment"># 'abc'</span></div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://docs.python.org/3/library/re.html" target="_blank" rel="external">re官方文档</a></li>
<li><a href="https://docs.python.org/3/howto/regex.html" target="_blank" rel="external">Regular Expression HOWTO</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> re </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python描述符descriptor]]></title>
      <url>https://xin053.github.io/2016/11/29/Python%E6%8F%8F%E8%BF%B0%E7%AC%A6descriptor/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="Python描述符-descriptor-解密"><a href="#Python描述符-descriptor-解密" class="headerlink" title="Python描述符(descriptor)解密"></a>Python描述符(descriptor)解密</h3><p>原文链接： <a href="http://nbviewer.ipython.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb" target="_blank" rel="external">Chris Beaumont</a> 翻译： <a href="http://www.geekfan.net/" target="_blank" rel="external">极客范 </a>- <a href="http://www.geekfan.net/author/murong/" target="_blank" rel="external">慕容老匹夫</a></p>
<p>转载链接： <a href="http://www.geekfan.net/7862/" target="_blank" rel="external">http://www.geekfan.net/7862/</a></p>
<p>Python中包含了许多内建的语言特性，它们使得代码简洁且易于理解。这些特性包括列表/集合/字典推导式，属性（property）、以及装饰器（decorator）。对于大部分特性来说，这些“中级”的语言特性有着完善的文档，并且易于学习。</p>
<p>但是这里有个例外，那就是描述符。至少对于我来说，描述符是Python语言核心中困扰我时间最长的一个特性。这里有几点原因如下：</p>
<ol>
<li>有关描述符的官方文档相当难懂，而且没有包含优秀的示例告诉你为什么需要编写描述符（我得为Raymond Hettinger辩护一下，他写的其他主题的Python文章和视频对我的帮助还是非常大的）</li>
<li>编写描述符的语法显得有些怪异</li>
<li>自定义描述符可能是Python中用的最少的特性，因此你很难在开源项目中找到优秀的示例</li>
</ol>
<p>但是一旦你理解了之后，描述符的确还是有它的应用价值的。这篇文章告诉你描述符可以用来做什么，以及为什么应该引起你的注意。</p>
<a id="more"></a>
<h2 id="一句话概括：描述符就是可重用的属性"><a href="#一句话概括：描述符就是可重用的属性" class="headerlink" title="一句话概括：描述符就是可重用的属性"></a>一句话概括：描述符就是可重用的属性</h2><p>在这里我要告诉你：从根本上讲，描述符就是可以重复使用的属性。也就是说，描述符可以让你编写这样的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f = Foo()</div><div class="line">b = f.bar</div><div class="line">f.bar = c</div><div class="line"><span class="keyword">del</span> f.bar</div></pre></td></tr></table></figure>
<p>而在解释器执行上述代码时，当发现你试图访问属性<code>b = f.bar</code>、对属性赋值<code>f.bar = c</code>或者删除一个实例变量的属性<code>del f.bar</code>时，就会去调用自定义的方法。</p>
<p>让我们先来解释一下为什么把对函数的调用伪装成对属性的访问是大有好处的。</p>
<h2 id="property——把函数调用伪装成对属性的访问"><a href="#property——把函数调用伪装成对属性的访问" class="headerlink" title="property——把函数调用伪装成对属性的访问"></a>property——把函数调用伪装成对属性的访问</h2><p>想象一下你正在编写管理电影信息的代码。你最后写好的Movie类可能看上去是这样的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, rating, runtime, budget, gross)</span>:</span></div><div class="line">        self.title = title</div><div class="line">        self.rating = rating</div><div class="line">        self.runtime = runtime</div><div class="line">        self.budget = budget</div><div class="line">        self.gross = gross</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profit</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.gross - self.budget</div></pre></td></tr></table></figure>
<p>你开始在项目的其他地方使用这个类，但是之后你意识到：如果不小心给电影打了负分怎么办？你觉得这是错误的行为，希望<code>Movie</code>类可以阻止这个错误。 你首先想到的办法是将<code>Movie</code>类修改为这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, rating, runtime, budget, gross)</span>:</span></div><div class="line">        self.title = title</div><div class="line">        self.rating = rating</div><div class="line">        self.runtime = runtime</div><div class="line">        self.gross = gross</div><div class="line">        <span class="keyword">if</span> budget &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Negative value not allowed: %s"</span> % budget)</div><div class="line">        self.budget = budget</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profit</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.gross - self.budget</div></pre></td></tr></table></figure>
<p>但这行不通。因为其他部分的代码都是直接通过<code>Movie.budget</code>来赋值的,这个新修改的类只会在<code>__init__</code>方法中捕获错误的数据，但对于已经存在的类实例就无能为力了。如果有人试着运行<code>m.budget = -100</code>，那么谁也没法阻止。作为一个Python程序员同时也是电影迷，你该怎么办？</p>
<p>幸运的是，Python的<code>property</code>解决了这个问题。如果你从未见过<code>property</code>的用法，下面是一个示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, rating, runtime, budget, gross)</span>:</span></div><div class="line">        self._budget = <span class="keyword">None</span></div><div class="line"> </div><div class="line">        self.title = title</div><div class="line">        self.rating = rating</div><div class="line">        self.runtime = runtime</div><div class="line">        self.gross = gross</div><div class="line">        self.budget = budget</div><div class="line"> </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">budget</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._budget</div><div class="line"> </div><div class="line"><span class="meta">    @budget.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">budget</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Negative value not allowed: %s"</span> % value)</div><div class="line">        self._budget = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profit</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.gross - self.budget</div><div class="line"> </div><div class="line">m = Movie(<span class="string">'Casablanca'</span>, <span class="number">97</span>, <span class="number">102</span>, <span class="number">964000</span>, <span class="number">1300000</span>)</div><div class="line"><span class="keyword">print</span> m.budget       <span class="comment"># calls m.budget(), returns result</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    m.budget = <span class="number">-100</span>  <span class="comment"># calls budget.setter(-100), and raises ValueError</span></div><div class="line"><span class="keyword">except</span> ValueError:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Woops. Not allowed"</span></div><div class="line"> </div><div class="line"><span class="number">964000</span></div><div class="line">Woops. Not allowed</div></pre></td></tr></table></figure>
<p>我们用<code>@property</code>装饰器指定了一个<code>getter</code>方法，用<code>@budget.setter</code>装饰器指定了一个<code>setter</code>方法。当我们这么做时，每当有人试着访问<code>budget</code>属性，Python就会自动调用相应的<code>getter/setter</code>方法。比方说，当遇到<code>m.budget = value</code>这样的代码时就会自动调用<code>budget.setter</code></p>
<p>花点时间来欣赏一下Python这么做是多么的优雅：如果没有<code>property</code>，我们将不得不把所有的实例属性隐藏起来，提供大量显式的类似<code>get_budget</code>和<code>set_budget</code>方法。像这样编写类的话，使用起来就会不断的去调用这些<code>getter/setter</code>方法，这看起来就像臃肿的Java代码一样。更糟的是，如果我们不采用这种编码风格，直接对实例属性进行访问。那么稍后就没法以清晰的方式增加对非负数的条件检查——我们不得不重新创建<code>set_budget</code>方法，然后搜索整个工程中的源代码，将<code>m.budget = value</code>这样的代码替换为<code>m.set_budget(value)</code>。太蛋疼了！！</p>
<p>因此，<code>property</code>让我们将自定义的代码同变量的访问/设定联系在了一起，同时为你的类保持一个简单的访问属性的接口。干得漂亮！</p>
<h2 id="property的不足"><a href="#property的不足" class="headerlink" title="property的不足"></a>property的不足</h2><p>对<code>property</code>来说，最大的缺点就是它们不能重复使用。举个例子，假设你想为<code>rating</code>，<code>runtime</code>和<code>gross</code>这些字段也添加非负检查。下面是修改过的新类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, rating, runtime, budget, gross)</span>:</span></div><div class="line">        self._rating = <span class="keyword">None</span></div><div class="line">        self._runtime = <span class="keyword">None</span></div><div class="line">        self._budget = <span class="keyword">None</span></div><div class="line">        self._gross = <span class="keyword">None</span></div><div class="line"> </div><div class="line">        self.title = title</div><div class="line">        self.rating = rating</div><div class="line">        self.runtime = runtime</div><div class="line">        self.gross = gross</div><div class="line">        self.budget = budget</div><div class="line"> </div><div class="line">    <span class="comment">#nice</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">budget</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._budget</div><div class="line"> </div><div class="line"><span class="meta">    @budget.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">budget</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Negative value not allowed: %s"</span> % value)</div><div class="line">        self._budget = value</div><div class="line"> </div><div class="line">    <span class="comment">#ok    </span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rating</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._rating</div><div class="line"> </div><div class="line"><span class="meta">    @rating.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rating</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Negative value not allowed: %s"</span> % value)</div><div class="line">        self._rating = value</div><div class="line"> </div><div class="line">    <span class="comment">#uhh...</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runtime</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._runtime</div><div class="line"> </div><div class="line"><span class="meta">    @runtime.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runtime</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Negative value not allowed: %s"</span> % value)</div><div class="line">        self._runtime = value        </div><div class="line"> </div><div class="line">    <span class="comment">#is this forever?</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gross</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._gross</div><div class="line"> </div><div class="line"><span class="meta">    @gross.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gross</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Negative value not allowed: %s"</span> % value)</div><div class="line">        self._gross = value        </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profit</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.gross - self.budget</div></pre></td></tr></table></figure>
<p>可以看到代码增加了不少，但重复的逻辑也出现了不少。虽然<code>property</code>可以让类从外部看起来接口整洁漂亮，<strong>但是却做不到内部同样整洁漂亮。</strong></p>
<h2 id="描述符登场（最终的大杀器）"><a href="#描述符登场（最终的大杀器）" class="headerlink" title="描述符登场（最终的大杀器）"></a>描述符登场（最终的大杀器）</h2><p>这就是描述符所解决的问题。描述符是<code>property</code>的升级版，允许你为重复的<code>property</code>逻辑编写单独的类来处理。下面的示例展示了描述符是如何工作的（现在还不必担心<code>NonNegative</code>类的实现）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> weakref <span class="keyword">import</span> WeakKeyDictionary</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonNegative</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""A descriptor that forbids negative values"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, default)</span>:</span></div><div class="line">        self.default = default</div><div class="line">        self.data = WeakKeyDictionary()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="comment"># we get here when someone calls x.d, and d is a NonNegative instance</span></div><div class="line">        <span class="comment"># instance = x</span></div><div class="line">        <span class="comment"># owner = type(x)</span></div><div class="line">        <span class="keyword">return</span> self.data.get(instance, self.default)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="comment"># we get here when someone calls x.d = val, and d is a NonNegative instance</span></div><div class="line">        <span class="comment"># instance = x</span></div><div class="line">        <span class="comment"># value = val</span></div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Negative value not allowed: %s"</span> % value)</div><div class="line">        self.data[instance] = value</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span><span class="params">(object)</span>:</span></div><div class="line"> </div><div class="line">    <span class="comment">#always put descriptors at the class-level</span></div><div class="line">    rating = NonNegative(<span class="number">0</span>)</div><div class="line">    runtime = NonNegative(<span class="number">0</span>)</div><div class="line">    budget = NonNegative(<span class="number">0</span>)</div><div class="line">    gross = NonNegative(<span class="number">0</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title, rating, runtime, budget, gross)</span>:</span></div><div class="line">        self.title = title</div><div class="line">        self.rating = rating</div><div class="line">        self.runtime = runtime</div><div class="line">        self.budget = budget</div><div class="line">        self.gross = gross</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profit</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.gross - self.budget</div><div class="line"> </div><div class="line">m = Movie(<span class="string">'Casablanca'</span>, <span class="number">97</span>, <span class="number">102</span>, <span class="number">964000</span>, <span class="number">1300000</span>)</div><div class="line"><span class="keyword">print</span> m.budget  <span class="comment"># calls Movie.budget.__get__(m, Movie)</span></div><div class="line">m.rating = <span class="number">100</span>  <span class="comment"># calls Movie.budget.__set__(m, 100)</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    m.rating = <span class="number">-1</span>   <span class="comment"># calls Movie.budget.__set__(m, -100)</span></div><div class="line"><span class="keyword">except</span> ValueError:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Woops, negative value"</span></div><div class="line"> </div><div class="line"><span class="number">964000</span></div><div class="line">Woops, negative value</div></pre></td></tr></table></figure>
<p>这里引入了一些新的语法，我们一条条的来看：</p>
<p><code>NonNegative</code>是一个描述符对象，因为它定义了<code>__get__</code>，<code>__set__</code>或<code>__delete__</code>方法。</p>
<p><code>Movie</code>类现在看起来非常清晰。我们在类的层面上创建了4个描述符，把它们当做普通的实例属性。显然，描述符在这里为我们做非负检查。</p>
<h3 id="访问描述符"><a href="#访问描述符" class="headerlink" title="访问描述符"></a>访问描述符</h3><p>当解释器遇到<code>print m.buget</code>时，它就会把<code>budget</code>当作一个带有<code>__get__</code>方法的描述符，调用<code>Movie.budget.__get__</code>方法并将方法的返回值打印出来，而不是直接传递<code>m.budget</code>来打印。这和你访问一个<code>property</code>相似，Python自动调用一个方法，同时返回结果。</p>
<p><code>__get__</code>接收2个参数：一个是点号左边的实例对象（在这里，就是m.budget中的m），另一个是这个实例的类型<code>Movie</code>。在一些Python<a href="http://docs.python.org/2/reference/datamodel.html#implementing-descriptors" target="_blank" rel="external">文档</a>中，<code>Movie</code>被称作描述符的所有者（owner）。如果我们需要访问<code>Movie.budget</code>，Python将会调用<code>Movie.budget.__get__(None, Movie)</code>。可以看到，第一个参数要么是所有者的实例，要么是<code>None</code>。这些输入参数可能看起来很怪，但是这里它们告诉了你描述符属于哪个对象的一部分。当我们看到<code>NonNegative</code>类的实现时这一切就合情合理了。</p>
<h3 id="对描述符赋值"><a href="#对描述符赋值" class="headerlink" title="对描述符赋值"></a>对描述符赋值</h3><p>当解释器看到<code>m.rating = 100</code>时，Python识别出<code>rating</code>是一个带有<code>__set__</code>方法的描述符，于是就调用<code>Movie.rating.__set__(m, 100)</code>。和<code>__get__</code>一样，<code>__set__</code>的第一个参数是点号左边的类实例<code>m.rating = 100</code>中的<code>m</code>。第二个参数是所赋的值（100）。</p>
<h3 id="删除描述符"><a href="#删除描述符" class="headerlink" title="删除描述符"></a>删除描述符</h3><p>为了说明的完整，这里提一下删除。如果你调用<code>del m.budget</code>，Python就会调用<code>Movie.budget.__delete__(m)</code>。</p>
<h2 id="NonNegative类是如何工作的？"><a href="#NonNegative类是如何工作的？" class="headerlink" title="NonNegative类是如何工作的？"></a>NonNegative类是如何工作的？</h2><p>带着前面的困惑，我们终于要揭示<code>NonNegative</code>类是如何工作的了。每个<code>NonNegative</code>的实例都维护着一个字典，其中保存着所有者实例和对应数据的映射关系。当我们调用<code>m.budget</code>时，<code>__get__</code>方法会查找与<code>m</code>相关联的数据，并返回这个结果（如果这个值不存在，则会返回一个默认值）。<code>__set__</code>采用的方式相同，但是这里会包含额外的非负检查。我们使用<code>WeakKeyDictionary</code>来取代普通的字典以防止内存泄露——我们可不想仅仅因为它在描述符的字典中就让一个无用的实例一直存活着。</p>
<p>使用描述符会有一点别扭。因为它们作用于类的层次上，每一个类实例都共享同一个描述符。这就意味着对不同的实例对象而言，描述符不得不手动地管理不同的状态，同时需要显式的将类实例作为第一个参数准确传递给<code>__get__</code>、<code>__set__</code>以及<code>__delete__</code>方法。</p>
<p>我希望这个例子解释清楚了描述符可以用来做什么——它们提供了一种方法将<code>property</code>的逻辑隔离到单独的类中来处理。如果你发现自己正在不同的<code>property</code>之间重复着相同的逻辑，那么本文也许会成为一个线索供你思考为何用描述符重构代码是值得一试的。</p>
<h2 id="秘诀和陷阱"><a href="#秘诀和陷阱" class="headerlink" title="秘诀和陷阱"></a>秘诀和陷阱</h2><h3 id="把描述符放在类的层次上（class-level）"><a href="#把描述符放在类的层次上（class-level）" class="headerlink" title="把描述符放在类的层次上（class level）"></a>把描述符放在类的层次上（class level）</h3><p>为了让描述符能够正常工作，它们必须定义在类的层次上。如果你不这么做，那么Python无法自动为你调用<code>__get__</code>和<code>__set__</code>方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Broken</span><span class="params">(object)</span>:</span></div><div class="line">    y = NonNegative(<span class="number">5</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.x = NonNegative(<span class="number">0</span>)  <span class="comment"># NOT a good descriptor</span></div><div class="line"> </div><div class="line">b = Broken()</div><div class="line"><span class="keyword">print</span> <span class="string">"X is %s, Y is %s"</span> % (b.x, b.y)</div><div class="line"> </div><div class="line">X <span class="keyword">is</span> &lt;__main__.NonNegative object at <span class="number">0x10432c250</span>&gt;, Y <span class="keyword">is</span> <span class="number">5</span></div></pre></td></tr></table></figure>
<p>可以看到，访问类层次上的描述符<code>y</code>可以自动调用<code>__get__</code>。但是访问实例层次上的描述符x只会返回描述符本身，真是魔法一般的存在啊。</p>
<h3 id="确保实例的数据只属于实例本身"><a href="#确保实例的数据只属于实例本身" class="headerlink" title="确保实例的数据只属于实例本身"></a>确保实例的数据只属于实例本身</h3><p>你可能会像这样编写<code>NonNegative</code>描述符：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrokenNonNegative</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, default)</span>:</span></div><div class="line">        self.value = default</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Negative value not allowed: %s"</span> % value)</div><div class="line">        self.value = value</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    bar = BrokenNonNegative(<span class="number">5</span>) </div><div class="line"> </div><div class="line">f = Foo()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    f.bar = <span class="number">-1</span></div><div class="line"><span class="keyword">except</span> ValueError:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Caught the invalid assignment"</span></div><div class="line"> </div><div class="line">Caught the invalid assignment</div></pre></td></tr></table></figure>
<p>这么做看起来似乎能正常工作。但这里的问题就在于所有<code>Foo</code>的实例都共享相同的<code>bar</code>，这会产生一些令人痛苦的结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    bar = BrokenNonNegative(<span class="number">5</span>) </div><div class="line"> </div><div class="line">f = Foo()</div><div class="line">g = Foo()</div><div class="line"> </div><div class="line"><span class="keyword">print</span> <span class="string">"f.bar is %s\ng.bar is %s"</span> % (f.bar, g.bar)</div><div class="line"><span class="keyword">print</span> <span class="string">"Setting f.bar to 10"</span></div><div class="line">f.bar = <span class="number">10</span></div><div class="line"><span class="keyword">print</span> <span class="string">"f.bar is %s\ng.bar is %s"</span> % (f.bar, g.bar)  <span class="comment">#ouch</span></div><div class="line">f.bar <span class="keyword">is</span> <span class="number">5</span></div><div class="line">g.bar <span class="keyword">is</span> <span class="number">5</span></div><div class="line">Setting f.bar to <span class="number">10</span></div><div class="line">f.bar <span class="keyword">is</span> <span class="number">10</span></div><div class="line">g.bar <span class="keyword">is</span> <span class="number">10</span></div></pre></td></tr></table></figure>
<p>这就是为什么我们要在<code>NonNegative</code>中使用数据字典的原因。<code>__get__</code>和<code>__set__</code>的第一个参数告诉我们需要关心哪一个实例。<code>NonNegative</code>使用这个参数作为字典的<code>key</code>，为每一个<code>Foo</code>实例单独保存一份数据。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    bar = NonNegative(<span class="number">5</span>)</div><div class="line"> </div><div class="line">f = Foo()</div><div class="line">g = Foo()</div><div class="line"><span class="keyword">print</span> <span class="string">"f.bar is %s\ng.bar is %s"</span> % (f.bar, g.bar)</div><div class="line"><span class="keyword">print</span> <span class="string">"Setting f.bar to 10"</span></div><div class="line">f.bar = <span class="number">10</span></div><div class="line"><span class="keyword">print</span> <span class="string">"f.bar is %s\ng.bar is %s"</span> % (f.bar, g.bar)  <span class="comment">#better</span></div><div class="line">f.bar <span class="keyword">is</span> <span class="number">5</span></div><div class="line">g.bar <span class="keyword">is</span> <span class="number">5</span></div><div class="line">Setting f.bar to <span class="number">10</span></div><div class="line">f.bar <span class="keyword">is</span> <span class="number">10</span></div><div class="line">g.bar <span class="keyword">is</span> <span class="number">5</span></div></pre></td></tr></table></figure>
<p>这就是描述符最令人感到别扭的地方（坦白的说，我不理解为什么Python不让你在实例的层次上定义描述符，并且总是需要将实际的处理分发给<code>__get__</code>和<code>__set__</code>。这么做行不通一定是有原因的）</p>
<h3 id="注意不可哈希的描述符所有者"><a href="#注意不可哈希的描述符所有者" class="headerlink" title="注意不可哈希的描述符所有者"></a>注意不可哈希的描述符所有者</h3><p><code>NonNegative</code>类使用了一个字典来单独保存专属于实例的数据。这个一般来说是没问题的，除非你用到了不可哈希（unhashable）的对象：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class MoProblems(list):  #you can't use lists as dictionary keys</div><div class="line">    x = NonNegative(5)</div><div class="line"> </div><div class="line">m = MoProblems()</div><div class="line">print m.x  # womp womp</div><div class="line"> </div><div class="line">TypeError</div><div class="line">Traceback (most recent call last)</div><div class="line">&lt;ipython-input-8-dd73b177bd8d&gt; in &lt;module&gt;()</div><div class="line">      3 </div><div class="line">      4 m = MoProblems()</div><div class="line">----&gt; 5 print m.x  # womp womp</div><div class="line"> </div><div class="line">&lt;ipython-input-3-6671804ce5d5&gt; in __get__(self, instance, owner)</div><div class="line">      9         # instance = x</div><div class="line">     10         # owner = type(x)</div><div class="line">---&gt; 11         return self.data.get(instance, self.default)</div><div class="line">     12 </div><div class="line">     13     def __set__(self, instance, value):</div><div class="line"> </div><div class="line">TypeError: unhashable type: 'MoProblems'</div></pre></td></tr></table></figure>
<p>因为<code>MoProblems</code>的实例（<code>list</code>的子类）是不可哈希的，因此它们不能为<code>MoProblems</code>.<code>x</code>用做数据字典的key。有一些方法可以规避这个问题，但是都不完美。最好的方法可能就是给你的描述符加标签了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Descriptor(object):</div><div class="line"> </div><div class="line">    def __init__(self, label):</div><div class="line">        self.label = label</div><div class="line"> </div><div class="line">    def __get__(self, instance, owner):</div><div class="line">        print '__get__', instance, owner</div><div class="line">        return instance.__dict__.get(self.label)</div><div class="line"> </div><div class="line">    def __set__(self, instance, value):</div><div class="line">        print '__set__'</div><div class="line">        instance.__dict__[self.label] = value</div><div class="line"> </div><div class="line">class Foo(list):</div><div class="line">    x = Descriptor('x')</div><div class="line">    y = Descriptor('y')</div><div class="line"> </div><div class="line">f = Foo()</div><div class="line">f.x = 5</div><div class="line">print f.x</div><div class="line"> </div><div class="line">__set__</div><div class="line">__get__ [] &lt;class '__main__.Foo'&gt;</div><div class="line">5</div></pre></td></tr></table></figure>
<p>这种方法依赖于Python的方法解析顺序（即，MRO）。我们给Foo中的每个描述符加上一个标签名，名称和我们赋值给描述符的变量名相同，比如<code>x = Descriptor(‘x’)</code>。之后，描述符将特定于实例的数据保存在<code>f.__dict__[&#39;x&#39;]</code>中。这个字典条目通常是当我们请求<code>f.x</code>时Python给出的返回值。然而，由于<code>Foo.x</code>是一个描述符，Python不能正常的使用<code>f.__dict__[‘x’]</code>，但是描述符可以安全的在这里存储数据。只是要记住，不要在别的地方也给这个描述符添加标签。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Foo(object):</div><div class="line">    x = Descriptor('y')</div><div class="line"> </div><div class="line">f = Foo()</div><div class="line">f.x = 5</div><div class="line">print f.x</div><div class="line"> </div><div class="line">f.y = 4    #oh no!</div><div class="line">print f.x</div><div class="line">__set__</div><div class="line">__get__ &lt;__main__.Foo object at 0x10432c810&gt; &lt;class '__main__.Foo'&gt;</div><div class="line">5</div><div class="line">__get__ &lt;__main__.Foo object at 0x10432c810&gt; &lt;class '__main__.Foo'&gt;</div><div class="line">4</div></pre></td></tr></table></figure>
<p>我不喜欢这种方式，因为这样的代码很脆弱也有很多微妙之处。但这个方法的确很普遍，可以用在不可哈希的所有者类上。David Beazley在他的<a href="http://www.amazon.com/Python-Essential-Reference-4th-Edition/dp/0672329786/" target="_blank" rel="external">书</a>中用到了这个方法。</p>
<h3 id="在元类中使用带标签的描述符"><a href="#在元类中使用带标签的描述符" class="headerlink" title="在元类中使用带标签的描述符"></a>在元类中使用带标签的描述符</h3><p>由于描述符的标签名和赋给它的变量名相同，所以有人使用元类来自动处理这个簿记（bookkeeping）任务。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment">#notice we aren't setting the label here</span></div><div class="line">        self.label = <span class="keyword">None</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__get__. Label = %s'</span> % self.label</div><div class="line">        <span class="keyword">return</span> instance.__dict__.get(self.label, <span class="keyword">None</span>)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'__set__'</span></div><div class="line">        instance.__dict__[self.label] = value</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DescriptorOwner</span><span class="params">(type)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, attrs)</span>:</span></div><div class="line">        <span class="comment"># find all descriptors, auto-set their labels</span></div><div class="line">        <span class="keyword">for</span> n, v <span class="keyword">in</span> attrs.items():</div><div class="line">            <span class="keyword">if</span> isinstance(v, Descriptor):</div><div class="line">                v.label = n</div><div class="line">        <span class="keyword">return</span> super(DescriptorOwner, cls).__new__(cls, name, bases, attrs)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">    __metaclass__ = DescriptorOwner</div><div class="line">    x = Descriptor()</div><div class="line"> </div><div class="line">f = Foo()</div><div class="line">f.x = <span class="number">10</span></div><div class="line"><span class="keyword">print</span> f.x</div><div class="line"> </div><div class="line">__set__</div><div class="line">__get__. Label = x</div><div class="line"><span class="number">10</span></div></pre></td></tr></table></figure>
<p>我不会去解释有关元类的细节——参考文献中David Beazley已经在他的文章中解释的很清楚了。 需要指出的是元类自动的为描述符添加标签，并且和赋给描述符的变量名字相匹配。</p>
<p>尽管这样解决了描述符的标签和变量名不一致的问题，但是却引入了复杂的元类。虽然我很怀疑，但是你可以自行判断这么做是否值得。</p>
<h3 id="访问描述符的方法"><a href="#访问描述符的方法" class="headerlink" title="访问描述符的方法"></a>访问描述符的方法</h3><p>描述符仅仅是类，也许你想要为它们增加一些方法。举个例子，描述符是一个用来回调<code>property</code>的很好的手段。比如我们想要一个类的某个部分的状态发生变化时就立刻通知我们。下面的大部分代码是用来做这个的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackProperty</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""A property that will alert observers when upon updates"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, default=None)</span>:</span></div><div class="line">        self.data = WeakKeyDictionary()</div><div class="line">        self.default = default</div><div class="line">        self.callbacks = WeakKeyDictionary()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.data.get(instance, self.default)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span>        </div><div class="line">        <span class="keyword">for</span> callback <span class="keyword">in</span> self.callbacks.get(instance, []):</div><div class="line">            <span class="comment"># alert callback function of new value</span></div><div class="line">            callback(value)</div><div class="line">        self.data[instance] = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_callback</span><span class="params">(self, instance, callback)</span>:</span></div><div class="line">        <span class="string">"""Add a new function to call everytime the descriptor updates"""</span></div><div class="line">        <span class="comment">#but how do we get here?!?!</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">not</span> <span class="keyword">in</span> self.callbacks:</div><div class="line">            self.callbacks[instance] = []</div><div class="line">        self.callbacks[instance].append(callback)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span><span class="params">(object)</span>:</span></div><div class="line">    balance = CallbackProperty(<span class="number">0</span>)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">low_balance_warning</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">if</span> value &lt; <span class="number">100</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"You are poor"</span></div><div class="line"> </div><div class="line">ba = BankAccount()</div><div class="line"> </div><div class="line"><span class="comment"># will not work -- try it</span></div><div class="line"><span class="comment">#ba.balance.add_callback(ba, low_balance_warning)</span></div></pre></td></tr></table></figure>
<p>这是一个很有吸引力的模式——我们可以自定义回调函数用来响应一个类中的状态变化，而且完全无需修改这个类的代码。这样做可真是替人分忧解难呀。现在，我们所要做的就是调用<code>ba.balance.add_callback(ba, low_balance_warning)</code>，以使得每次<code>balance</code>变化时<code>low_balance_warning</code>都会被调用。</p>
<p>但是我们是如何做到的呢？当我们试图访问它们时，描述符总是会调用<code>__get__</code>。就好像<code>add_callback</code>方法是无法触及的一样！其实关键在于利用了一种特殊的情况，即，当从类的层次访问时，<code>__get__</code>方法的第一个参数是<code>None</code>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallbackProperty</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""A property that will alert observers when upon updates"""</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, default=None)</span>:</span></div><div class="line">        self.data = WeakKeyDictionary()</div><div class="line">        self.default = default</div><div class="line">        self.callbacks = WeakKeyDictionary()</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> self        </div><div class="line">        <span class="keyword">return</span> self.data.get(instance, self.default)</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></div><div class="line">        <span class="keyword">for</span> callback <span class="keyword">in</span> self.callbacks.get(instance, []):</div><div class="line">            <span class="comment"># alert callback function of new value</span></div><div class="line">            callback(value)</div><div class="line">        self.data[instance] = value</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_callback</span><span class="params">(self, instance, callback)</span>:</span></div><div class="line">        <span class="string">"""Add a new function to call everytime the descriptor within instance updates"""</span></div><div class="line">        <span class="keyword">if</span> instance <span class="keyword">not</span> <span class="keyword">in</span> self.callbacks:</div><div class="line">            self.callbacks[instance] = []</div><div class="line">        self.callbacks[instance].append(callback)</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span><span class="params">(object)</span>:</span></div><div class="line">    balance = CallbackProperty(<span class="number">0</span>)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">low_balance_warning</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">if</span> value &lt; <span class="number">100</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"You are now poor"</span></div><div class="line"> </div><div class="line">ba = BankAccount()</div><div class="line">BankAccount.balance.add_callback(ba, low_balance_warning)</div><div class="line"> </div><div class="line">ba.balance = <span class="number">5000</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Balance is %s"</span> % ba.balance</div><div class="line">ba.balance = <span class="number">99</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Balance is %s"</span> % ba.balance</div><div class="line">Balance <span class="keyword">is</span> <span class="number">5000</span></div><div class="line">You are now poor</div><div class="line">Balance <span class="keyword">is</span> <span class="number">99</span></div></pre></td></tr></table></figure>
<h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><ul>
<li>描述符伪装成类的属型，而当类的实例通过点操作符访问时，实际是就是调用描述符中三个方法之一</li>
<li>属性查找的顺序是:”类 -&gt; 基类 -&gt; 实例”,并不是首先就在表示实例的那片内存中查找属性，而是首先在类中查找，因为python需要首先判断该’属性’是否是描述符(伪装的属性)，如果是描述符，那么则不是调用<code>__setattr__()</code>或者<code>__getattr__()</code>方法对<code>__dict__</code>字典进行处理，而是调用描述符的<code>__get__()</code>,<code>__set__()</code>和<code>__delete__()</code>方法</li>
<li>由于描述符只能作为类的属性，所以该类的多个实例都是公用的这个描述符，所以一般在描述符中的<code>__init__()</code>函数中创建一个字典，以类实例的地址(例子中的<code>instance</code>)参数作为key，以要这个实例的数据作为value</li>
<li>类中的普通方法第一个参数是<code>self</code>,因为实例化类时，会自动将分配给实例的内存地址传递该self，也就是所谓的绑定，该函数也就成为绑定函数了，而给实例动态添加的方法以及类之外定义的方法就不需要<code>self</code>参数了</li>
<li>以底层的思维了看待类和对象，都是内存中分配的地址空间而已，虽然有书上说类也是对象，但是不好理解，从底层就容易理解一些，先划分区域，并写入相应数据，然后这就是类，然后以这个类实例化时，就是再划分一块内存，写于相应数据(为了节省空间，不会完全复制类中的属性和方法，只会简单的赋值一些属性表示该对象是那个类的实例)，然后这就是类。类属性就是属性的值只在代表类的那块内存中，而不在代表对象的那块内存中</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://www.zhihu.com/question/25391709" target="_blank" rel="external">如何理解 Python 的 Descriptor？</a></li>
<li><a href="https://segmentfault.com/a/1190000004478718" target="_blank" rel="external">Python 的 descriptor（上）</a></li>
<li><a href="http://www.geekfan.net/7862/" target="_blank" rel="external">Python描述符（descriptor）解密</a></li>
<li><a href="https://docs.python.org/3/howto/descriptor.html" target="_blank" rel="external">Descriptor HowTo Guide</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> descriptor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[os库常用方法使用介绍]]></title>
      <url>https://xin053.github.io/2016/11/29/os%E5%BA%93%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="os简介"><a href="#os简介" class="headerlink" title="os简介"></a>os简介</h2><p>与系统相依赖的一些操作，有些操作只支持unix系统</p>
<h2 id="os常用方法"><a href="#os常用方法" class="headerlink" title="os常用方法"></a>os常用方法</h2><h3 id="environ与getenv"><a href="#environ与getenv" class="headerlink" title="environ与getenv"></a>environ与getenv</h3><p>获取环境变量</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">os.environ[<span class="string">"PYTHON_HOME"</span>]</div><div class="line"><span class="comment"># 'F:\\pythonVE'</span></div><div class="line">os.getenv(<span class="string">'PYTHON_HOME'</span>)</div><div class="line"><span class="comment"># 'F:\\pythonVE'</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h3><p>获取当前进程或者指定pid进程的用户和用户组，仅支持unix，详情见<a href="https://docs.python.org/3/library/os.html#os.getegid" target="_blank" rel="external"><code>os</code></a></p>
<p>其中windows平台也可以使用的:</p>
<p>获取当前登陆用户:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">os.getlogin() </div><div class="line"><span class="comment"># 'zzx'</span></div></pre></td></tr></table></figure>
<h3 id="chdir与getcwd"><a href="#chdir与getcwd" class="headerlink" title="chdir与getcwd"></a>chdir与getcwd</h3><p>改变与获取当前工作路径</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">os.getcwd()</div><div class="line"><span class="comment"># 'F:\\pythonVE\\Scripts'</span></div><div class="line">os.chdir(<span class="string">'..'</span>)</div><div class="line">os.getcwd()</div><div class="line"><span class="comment"># 'F:\\pythonVE'</span></div></pre></td></tr></table></figure>
<h3 id="listdir与scandir"><a href="#listdir与scandir" class="headerlink" title="listdir与scandir"></a>listdir与scandir</h3><p>枚举指定目录,不指定<code>path</code>参数则默认当前路径</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">os.listdir()</div><div class="line"><span class="comment"># ['Include', 'Lib', 'pip-selfcheck.json', 'pyvenv.cfg', 'Scripts', 'share']</span></div><div class="line">os.listdir(<span class="string">'.'</span>)</div><div class="line"><span class="comment"># ['Include', 'Lib', 'pip-selfcheck.json', 'pyvenv.cfg', 'Scripts', 'share']</span></div></pre></td></tr></table></figure>
<p><code>scandir()</code>与<code>listdir()</code>作用相同，但是返回的是迭代器</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = os.scandir()</div><div class="line">a</div><div class="line"><span class="comment"># &lt;nt.ScandirIterator at 0x187d4cc5440&gt;</span></div><div class="line">a.__next__()</div><div class="line"><span class="comment"># &lt;DirEntry 'Include'&gt;</span></div><div class="line">a.__next__()</div><div class="line"><span class="comment"># &lt;DirEntry 'Lib'&gt;</span></div></pre></td></tr></table></figure>
<p>而<code>DirEntry</code>对象包含了与文件相关的属性，详情见:<a href="https://docs.python.org/3/library/os.html#os.DirEntry" target="_blank" rel="external"><code>os.DirEntry</code></a></p>
<h3 id="文件系统相关"><a href="#文件系统相关" class="headerlink" title="文件系统相关"></a>文件系统相关</h3><ul>
<li><code>mkdir()</code> 创建目录</li>
<li><code>remove()</code> 删除文件</li>
<li><code>rmdir()</code> 删除目录</li>
<li><code>rename()</code> 重命名</li>
</ul>
<h3 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h3><p>文件相关信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>statinfo = os.stat(<span class="string">'somefile.txt'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>statinfo</div><div class="line">os.stat_result(st_mode=<span class="number">33188</span>, st_ino=<span class="number">7876932</span>, st_dev=<span class="number">234881026</span>,</div><div class="line">st_nlink=<span class="number">1</span>, st_uid=<span class="number">501</span>, st_gid=<span class="number">501</span>, st_size=<span class="number">264</span>, st_atime=<span class="number">1297230295</span>,</div><div class="line">st_mtime=<span class="number">1297230027</span>, st_ctime=<span class="number">1297230027</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>statinfo.st_size</div><div class="line"><span class="number">264</span></div></pre></td></tr></table></figure>
<h3 id="startfile"><a href="#startfile" class="headerlink" title="startfile"></a>startfile</h3><p>使用电脑上默认应用打开指定文件</p>
<h3 id="分隔符-换行符相关"><a href="#分隔符-换行符相关" class="headerlink" title="分隔符 换行符相关"></a>分隔符 换行符相关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.curdir</div><div class="line"><span class="string">'.'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.pardir</div><div class="line"><span class="string">'..'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.sep</div><div class="line"><span class="string">'\\'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.altsep</div><div class="line"><span class="string">'/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.extsep</div><div class="line"><span class="string">'.'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.pathsep</div><div class="line"><span class="string">';'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.defpath</div><div class="line"><span class="string">'.;C:\\bin'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>os.linesep</div><div class="line"><span class="string">'\r\n'</span></div></pre></td></tr></table></figure>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="https://docs.python.org/3/library/os.html" target="_blank" rel="external"><code>os</code>官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> os </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VS Code常用快捷键]]></title>
      <url>https://xin053.github.io/2016/11/15/VS%20Code%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="VS-Code常用快捷键"><a href="#VS-Code常用快捷键" class="headerlink" title="VS Code常用快捷键"></a>VS Code常用快捷键</h2><p><img src="https://code.visualstudio.com/home/home-screenshot-win-lg.png" alt=""></p>
<a id="more"></a>
<h3 id="F1-打开命令模式"><a href="#F1-打开命令模式" class="headerlink" title="F1 打开命令模式"></a>F1 打开命令模式</h3><p><img src="http://i.imgur.com/zvthdzV.png" alt=""></p>
<h3 id="Ctrl-X-剪切当前行或选中内容"><a href="#Ctrl-X-剪切当前行或选中内容" class="headerlink" title="Ctrl+X 剪切当前行或选中内容"></a>Ctrl+X 剪切当前行或选中内容</h3><h3 id="Ctrl-C-复制当前行或选中内容"><a href="#Ctrl-C-复制当前行或选中内容" class="headerlink" title="Ctrl+C 复制当前行或选中内容"></a>Ctrl+C 复制当前行或选中内容</h3><h3 id="Alt-↓-↑-上下移动当前行"><a href="#Alt-↓-↑-上下移动当前行" class="headerlink" title="Alt + ↓ / ↑ 上下移动当前行"></a>Alt + ↓ / ↑ 上下移动当前行</h3><p><img src="http://i.imgur.com/mIvWx1g.gif" alt=""></p>
<h3 id="Shift-Alt-↓-↑-复制当前行并上下移动"><a href="#Shift-Alt-↓-↑-复制当前行并上下移动" class="headerlink" title="Shift+Alt + ↓ / ↑ 复制当前行并上下移动"></a>Shift+Alt + ↓ / ↑ 复制当前行并上下移动</h3><p><img src="http://i.imgur.com/31nhx1W.gif" alt=""></p>
<h3 id="Ctrl-Enter-在下一行插入光标"><a href="#Ctrl-Enter-在下一行插入光标" class="headerlink" title="Ctrl+Enter 在下一行插入光标"></a>Ctrl+Enter 在下一行插入光标</h3><p><img src="http://i.imgur.com/y1ADLF0.gif" alt=""></p>
<h3 id="Ctrl-Shift-Enter-在上一行插入光标"><a href="#Ctrl-Shift-Enter-在上一行插入光标" class="headerlink" title="Ctrl+Shift+Enter 在上一行插入光标"></a>Ctrl+Shift+Enter 在上一行插入光标</h3><p><img src="http://i.imgur.com/G47gJ6m.gif" alt=""></p>
<h3 id="Home-跳到当前行的开始"><a href="#Home-跳到当前行的开始" class="headerlink" title="Home 跳到当前行的开始"></a>Home 跳到当前行的开始</h3><h3 id="End-跳到当前行的末尾"><a href="#End-跳到当前行的末尾" class="headerlink" title="End 跳到当前行的末尾"></a>End 跳到当前行的末尾</h3><h3 id="Ctrl-Home-跳到当前文件的开始"><a href="#Ctrl-Home-跳到当前文件的开始" class="headerlink" title="Ctrl+Home 跳到当前文件的开始"></a>Ctrl+Home 跳到当前文件的开始</h3><h3 id="Ctrl-End-跳到当前文件的末尾"><a href="#Ctrl-End-跳到当前文件的末尾" class="headerlink" title="Ctrl+End 跳到当前文件的末尾"></a>Ctrl+End 跳到当前文件的末尾</h3><h3 id="Ctrl-↑-↓-上下滑动滚动条"><a href="#Ctrl-↑-↓-上下滑动滚动条" class="headerlink" title="Ctrl+↑ / ↓ 上下滑动滚动条"></a>Ctrl+↑ / ↓ 上下滑动滚动条</h3><h3 id="Ctrl-G-行跳转"><a href="#Ctrl-G-行跳转" class="headerlink" title="Ctrl+G 行跳转"></a>Ctrl+G 行跳转</h3><p><img src="http://i.imgur.com/6Qe94Rm.gif" alt=""></p>
<h3 id="Ctrl-P-文件跳转"><a href="#Ctrl-P-文件跳转" class="headerlink" title="Ctrl+P 文件跳转"></a>Ctrl+P 文件跳转</h3><p><img src="http://i.imgur.com/2myzjV9.gif" alt=""></p>
<h3 id="Ctrl-Shift-O-符号跳转"><a href="#Ctrl-Shift-O-符号跳转" class="headerlink" title="Ctrl+Shift+O 符号跳转"></a>Ctrl+Shift+O 符号跳转</h3><p><img src="http://i.imgur.com/WLXn40n.gif" alt=""></p>
<h3 id="Alt-←-→-前进或后退-跟鼠标上的宏键功能一样"><a href="#Alt-←-→-前进或后退-跟鼠标上的宏键功能一样" class="headerlink" title="Alt+ ← / → 前进或后退,跟鼠标上的宏键功能一样"></a>Alt+ ← / → 前进或后退,跟鼠标上的宏键功能一样</h3><h3 id="Ctrl-M-通过tab切换焦点"><a href="#Ctrl-M-通过tab切换焦点" class="headerlink" title="Ctrl+M 通过tab切换焦点"></a>Ctrl+M 通过tab切换焦点</h3><p><img src="http://i.imgur.com/vCgFttG.gif" alt=""></p>
<h3 id="Alt-Click-插入光标"><a href="#Alt-Click-插入光标" class="headerlink" title="Alt+Click 插入光标"></a>Alt+Click 插入光标</h3><p><img src="http://i.imgur.com/eLq7XBG.gif" alt=""></p>
<h3 id="Ctrl-U-撤销上次光标操作"><a href="#Ctrl-U-撤销上次光标操作" class="headerlink" title="Ctrl+U 撤销上次光标操作"></a>Ctrl+U 撤销上次光标操作</h3><h3 id="Ctrl-F2-在所有选中单词后面添加光标"><a href="#Ctrl-F2-在所有选中单词后面添加光标" class="headerlink" title="Ctrl+F2 在所有选中单词后面添加光标"></a>Ctrl+F2 在所有选中单词后面添加光标</h3><p><img src="http://i.imgur.com/ZOutnSo.gif" alt=""></p>
<h3 id="Shift-Alt-→-←-控制选中范围"><a href="#Shift-Alt-→-←-控制选中范围" class="headerlink" title="Shift+Alt+ → / ← 控制选中范围"></a>Shift+Alt+ → / ← 控制选中范围</h3><p><img src="http://i.imgur.com/BANxAgX.gif" alt=""></p>
<h3 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h3><p>默认快捷键是<code>Ctrl + space</code>，但是和系统输入法的切换冲突了，并且之前java开发使用习惯了<code>Alt + /</code>作为代码提示的快捷键，所有将代码提示的快捷键改为了<code>Alt + /</code></p>
<p><img src="http://i.imgur.com/AlvEqJP.png" alt=""></p>
<h3 id="Trigger-parameter-hints"><a href="#Trigger-parameter-hints" class="headerlink" title="Trigger parameter hints"></a>Trigger parameter hints</h3><p>默认快捷键是<code>Ctrl+Shift+Space</code> ,同样因为冲突改为了<code>alt+shift+/</code></p>
<p><img src="http://i.imgur.com/Fs7CvFL.gif" alt=""></p>
<h3 id="F12-跳转到定义处-与Ctrl-左键效果一样"><a href="#F12-跳转到定义处-与Ctrl-左键效果一样" class="headerlink" title="F12 跳转到定义处 与Ctrl + 左键效果一样"></a>F12 跳转到定义处 与Ctrl + 左键效果一样</h3><h3 id="Alt-F12"><a href="#Alt-F12" class="headerlink" title="Alt + F12"></a>Alt + F12</h3><p><img src="http://i.imgur.com/3YDdhPI.gif" alt=""></p>
<h3 id="Ctrl-Alt-左键-在侧边打开定义"><a href="#Ctrl-Alt-左键-在侧边打开定义" class="headerlink" title="Ctrl + Alt + 左键 在侧边打开定义"></a>Ctrl + Alt + 左键 在侧边打开定义</h3><p>与<code>Ctrl+K F12</code>效果相同</p>
<p><img src="http://i.imgur.com/CeE7wOU.gif" alt=""></p>
<h3 id="Shift-F12-Show-References"><a href="#Shift-F12-Show-References" class="headerlink" title="Shift+F12 Show References"></a>Shift+F12 Show References</h3><p><img src="http://i.imgur.com/NiUKjAM.gif" alt=""></p>
<h3 id="F11-全屏"><a href="#F11-全屏" class="headerlink" title="F11 全屏"></a>F11 全屏</h3><p><strong>以上便是常用的VS Code快捷键，不包括插件提供的快捷键，关于其他的快捷键请看参考文档</strong></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://go.microsoft.com/fwlink/?linkid=832145" target="_blank" rel="external">官方快捷键手册</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> WeNeedToKnow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VS Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BeautifulSoup html与xml解析库使用详解]]></title>
      <url>https://xin053.github.io/2016/11/14/BeautifulSoup%20html%E4%B8%8Exml%E8%A7%A3%E6%9E%90%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="BeautifulSoup简介"><a href="#BeautifulSoup简介" class="headerlink" title="BeautifulSoup简介"></a>BeautifulSoup简介</h2><p>BeautifulSoup 3只支持python 2，并且已经停止开发，BeautifulSoup支持python2和3，以下使用方法参考4.4版说明文档</p>
<p><img src="http://www.crummy.com/software/BeautifulSoup/bs4/doc/_images/6.1.jpg" alt=""></p>
<a id="more"></a>
<h2 id="BeautifulSoup使用"><a href="#BeautifulSoup使用" class="headerlink" title="BeautifulSoup使用"></a>BeautifulSoup使用</h2><h3 id="解析器比较"><a href="#解析器比较" class="headerlink" title="解析器比较"></a>解析器比较</h3><table>
<thead>
<tr>
<th>解析器</th>
<th>使用方法</th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody>
<tr>
<td>Python标准库</td>
<td><code>BeautifulSoup(markup,&quot;html.parser&quot;)</code></td>
<td>Python的内置标准库执行速度适中文档容错能力强</td>
<td>Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td>
</tr>
<tr>
<td>lxml HTML 解析器</td>
<td><code>BeautifulSoup(markup,&quot;lxml&quot;)</code></td>
<td>速度快文档容错能力强</td>
<td>需要安装C语言库</td>
</tr>
<tr>
<td>lxml XML 解析器</td>
<td><code>BeautifulSoup(markup,[&quot;lxml-xml&quot;])``BeautifulSoup(markup,&quot;xml&quot;)</code></td>
<td>速度快唯一支持XML的解析器</td>
<td>需要安装C语言库</td>
</tr>
<tr>
<td>html5lib</td>
<td><code>BeautifulSoup(markup,&quot;html5lib&quot;)</code></td>
<td>最好的容错性以浏览器的方式解析文档生成HTML5格式的文档</td>
<td>速度慢不依赖外部扩展</td>
</tr>
</tbody>
</table>
<p>如果不指定解析器，BeautifulSoup会自动选择最合适的解析器来解析文档</p>
<h3 id="对象种类"><a href="#对象种类" class="headerlink" title="对象种类"></a>对象种类</h3><p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种: <code>Tag</code> , <code>NavigableString</code> , <code>BeautifulSoup</code> , <code>Comment</code> .</p>
<h4 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h4><p><code>Tag</code> 对象与XML或HTML原生文档中的tag相同:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">soup = BeautifulSoup(<span class="string">'&lt;b class="boldest"&gt;Extremely bold&lt;/b&gt;'</span>)</div><div class="line">tag = soup.b</div><div class="line">type(tag)</div><div class="line"><span class="comment"># &lt;class 'bs4.element.Tag'&gt;</span></div><div class="line">str(tag)</div><div class="line"><span class="comment"># '&lt;b class="boldest"&gt;Extremely bold&lt;/b&gt;'</span></div></pre></td></tr></table></figure>
<p>每个tag都有name和attribute:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tag.name</div><div class="line"><span class="comment"># 'b'</span></div><div class="line">tag.attrs</div><div class="line"><span class="comment"># &#123;'class': ['boldest']&#125;</span></div><div class="line">tag[<span class="string">'class'</span>]</div><div class="line"><span class="comment"># ['boldest']</span></div></pre></td></tr></table></figure>
<p>可以通过直接赋值来增加或修改tag的名字和属性:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">tag.name = <span class="string">"blockquote"</span></div><div class="line">tag</div><div class="line"><span class="comment"># &lt;blockquote class="boldest"&gt;Extremely bold&lt;/blockquote&gt;</span></div><div class="line"></div><div class="line">tag[<span class="string">'class'</span>] = <span class="string">'verybold'</span></div><div class="line">tag[<span class="string">'id'</span>] = <span class="number">1</span></div><div class="line">tag</div><div class="line"><span class="comment"># &lt;blockquote class="verybold" id="1"&gt;Extremely bold&lt;/blockquote&gt;</span></div></pre></td></tr></table></figure>
<p>通过<code>del</code>删除属性:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">del</span> tag[<span class="string">'class'</span>]</div><div class="line"><span class="keyword">del</span> tag[<span class="string">'id'</span>]</div><div class="line">tag</div><div class="line"><span class="comment"># &lt;blockquote&gt;Extremely bold&lt;/blockquote&gt;</span></div><div class="line">print(tag.get(<span class="string">'class'</span>))</div><div class="line"><span class="comment"># None</span></div></pre></td></tr></table></figure>
<p>对于多值属性,会返回一个列表，使用的时候注意是返回列表还是字符串:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">css_soup = BeautifulSoup(<span class="string">'&lt;p class="body strikeout"&gt;&lt;/p&gt;'</span>)</div><div class="line">css_soup.p[<span class="string">'class'</span>]</div><div class="line"><span class="comment"># ["body", "strikeout"]</span></div><div class="line"></div><div class="line">css_soup = BeautifulSoup(<span class="string">'&lt;p class="body"&gt;&lt;/p&gt;'</span>)</div><div class="line">css_soup.p[<span class="string">'class'</span>]</div><div class="line"><span class="comment"># ["body"]</span></div></pre></td></tr></table></figure>
<p>如果转换的文档是XML格式,那么tag中不包含多值属性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xml_soup = BeautifulSoup(<span class="string">'&lt;p class="body strikeout"&gt;&lt;/p&gt;'</span>, <span class="string">'xml'</span>)</div><div class="line">xml_soup.p[<span class="string">'class'</span>]</div><div class="line"><span class="comment"># 'body strikeout'</span></div></pre></td></tr></table></figure>
<h4 id="NavigableString"><a href="#NavigableString" class="headerlink" title="NavigableString"></a>NavigableString</h4><p>字符串常被包含在tag内.Beautiful Soup用 <code>NavigableString</code> 类来包装tag中的字符串:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tag.string</div><div class="line"><span class="comment"># 'Extremely bold'</span></div><div class="line">type(tag.string)</div><div class="line"><span class="comment"># &lt;class 'bs4.element.NavigableString'&gt;</span></div></pre></td></tr></table></figure>
<p>tag中包含的字符串不能编辑,但是可以被替换成其它的字符串,用 <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#replace-with" target="_blank" rel="external">replace_with()</a> 方法:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tag.string.replace_with(<span class="string">"No longer bold"</span>)</div><div class="line">tag</div><div class="line"><span class="comment"># &lt;blockquote class="verybold" id="1"&gt;No longer bold&lt;/blockquote&gt;</span></div></pre></td></tr></table></figure>
<p>如果想在Beautiful Soup之外使用 <code>NavigableString</code> 对象,需要调用 <code>unicode()</code> 方法,将该对象转换成普通的Unicode字符串,否则就算Beautiful Soup已方法已经执行结束,该对象的输出也会带有对象的引用地址.这样会浪费内存.</p>
<h4 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h4><p><code>BeautifulSoup</code> 对象表示的是一个文档的全部内容.大部分时候,可以把它当作 <code>Tag</code> 对象,它支持 <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id18" target="_blank" rel="external">遍历文档树</a> 和 <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id27" target="_blank" rel="external">搜索文档树</a> 中描述的大部分的方法.</p>
<p>因为 <code>BeautifulSoup</code> 对象并不是真正的HTML或XML的tag,所以它没有name和attribute属性.但有时查看它的 <code>.name</code> 属性是很方便的,所以 <code>BeautifulSoup</code> 对象包含了一个值为 “[document]” 的特殊属性 <code>.name</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">soup.name</div><div class="line"><span class="comment"># '[document]'</span></div></pre></td></tr></table></figure>
<h4 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">markup = <span class="string">"&lt;b&gt;&lt;!--Hey, buddy. Want to buy a used parser?--&gt;&lt;/b&gt;"</span></div><div class="line">soup = BeautifulSoup(markup)</div><div class="line">comment = soup.b.string</div><div class="line">type(comment)</div><div class="line"><span class="comment"># &lt;class 'bs4.element.Comment'&gt;</span></div></pre></td></tr></table></figure>
<p><code>Comment</code> 对象是一个特殊类型的 <code>NavigableString</code> 对象:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">comment</div><div class="line"><span class="comment"># 'Hey, buddy. Want to buy a used parser'</span></div></pre></td></tr></table></figure>
<p>但是当它出现在HTML文档中时, <code>Comment</code> 对象会使用特殊的格式输出:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print(soup.b.prettify())</div><div class="line"><span class="comment"># &lt;b&gt;</span></div><div class="line"><span class="comment">#  &lt;!--Hey, buddy. Want to buy a used parser?--&gt;</span></div><div class="line"><span class="comment"># &lt;/b&gt;</span></div></pre></td></tr></table></figure>
<h3 id="遍历文档树"><a href="#遍历文档树" class="headerlink" title="遍历文档树"></a>遍历文档树</h3><p>我们测试的文档内容:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">html_doc = <span class="string">"""</span></div><div class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</div><div class="line">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</div><div class="line">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</div><div class="line">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</div><div class="line">and they lived at the bottom of a well.&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p class="story"&gt;...&lt;/p&gt;</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">soup = BeautifulSoup(html_doc, <span class="string">'html.parser'</span>)</div></pre></td></tr></table></figure>
<p>通过点取属性的方式只能获得当前名字的第一个tag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">soup.body.b</div><div class="line"><span class="comment"># &lt;b&gt;The Dormouse's story&lt;/b&gt;</span></div><div class="line">soup.a</div><div class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<p>使用<code>find_all()</code>获取所有的tag:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">soup.find_all(<span class="string">'a'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>tag的 <code>.contents</code> 属性可以将tag的子节点以列表的方式输出:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">head_tag = soup.head</div><div class="line">head_tag</div><div class="line"># &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</div><div class="line"></div><div class="line">head_tag.contents</div><div class="line">[&lt;title&gt;The Dormouse's story&lt;/title&gt;]</div><div class="line"></div><div class="line">title_tag = head_tag.contents[0]</div><div class="line">title_tag</div><div class="line"># &lt;title&gt;The Dormouse's story&lt;/title&gt;</div><div class="line">title_tag.contents</div><div class="line"># ['The Dormouse's story']</div></pre></td></tr></table></figure>
<p>字符串没有 <code>.contents</code> 属性,因为字符串没有子节点:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">text = title_tag.contents[<span class="number">0</span>]</div><div class="line">text.contents</div><div class="line"><span class="comment"># AttributeError: 'NavigableString' object has no attribute 'contents'</span></div></pre></td></tr></table></figure>
<p>通过tag的 <code>.children</code> 生成器,可以对tag的子节点进行循环:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> child <span class="keyword">in</span> title_tag.children:</div><div class="line">    print(child)</div><div class="line">    <span class="comment"># The Dormouse's story</span></div></pre></td></tr></table></figure>
<p><code>.descendants</code> 属性可以对所有tag的子孙节点进行递归循环</p>
<p><code>BeautifulSoup</code> 有一个直接子节点(<html>节点),却有很多子孙节点:</html></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">len(list(soup.children))</div><div class="line"><span class="comment"># 1</span></div><div class="line">len(list(soup.descendants))</div><div class="line"><span class="comment"># 25</span></div></pre></td></tr></table></figure>
<p>输出所有<code>string</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> string <span class="keyword">in</span> soup.stripped_strings:</div><div class="line">    print(repr(string))</div><div class="line">    <span class="comment"># u"The Dormouse's story"</span></div><div class="line">    <span class="comment"># u"The Dormouse's story"</span></div><div class="line">    <span class="comment"># u'Once upon a time there were three little sisters; and their names were'</span></div><div class="line">    <span class="comment"># u'Elsie'</span></div><div class="line">    <span class="comment"># u','</span></div><div class="line">    <span class="comment"># u'Lacie'</span></div><div class="line">    <span class="comment"># u'and'</span></div><div class="line">    <span class="comment"># u'Tillie'</span></div><div class="line">    <span class="comment"># u';\nand they lived at the bottom of a well.'</span></div><div class="line">    <span class="comment"># u'...'</span></div></pre></td></tr></table></figure>
<p>通过 <code>.parent</code> 属性来获取某个元素的父节点.</p>
<p>通过元素的 <code>.parents</code> 属性可以递归得到元素的所有父辈节点</p>
<p>在文档树中,使用 <code>.next_sibling</code> 和 <code>.previous_sibling</code> 属性来查询兄弟节点</p>
<p>通过 <code>.next_siblings</code> 和 <code>.previous_siblings</code> 属性可以对当前节点的兄弟节点迭代输出</p>
<p><code>.next_element</code> 属性指向解析过程中下一个被解析的对象(字符串或tag),结果可能与 <code>.next_sibling</code>相同,但通常是不一样的.</p>
<p>通过 <code>.next_elements</code> 和 <code>.previous_elements</code> 的迭代器就可以向前或向后访问文档的解析内容,就好像文档正在被解析一样</p>
<h3 id="搜索文档树"><a href="#搜索文档树" class="headerlink" title="搜索文档树"></a>搜索文档树</h3><p>除了<code>find_all()</code>之外，搜索也支持正则表达式:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.compile(<span class="string">"^b"</span>)):</div><div class="line">    print(tag.name)</div><div class="line"><span class="comment"># body</span></div><div class="line"><span class="comment"># b</span></div></pre></td></tr></table></figure>
<p>下面代码找到文档中所有<code>&lt;a&gt;</code>标签和<code>&lt;b&gt;</code>标签:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">soup.find_all([<span class="string">"a"</span>, <span class="string">"b"</span>])</div><div class="line"><span class="comment"># [&lt;b&gt;The Dormouse's story&lt;/b&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p><code>True</code> 可以匹配任何值,下面代码查找到所有的tag,但是不会返回字符串节点</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="keyword">True</span>):</div><div class="line">    print(tag.name)</div><div class="line"><span class="comment"># html</span></div><div class="line"><span class="comment"># head</span></div><div class="line"><span class="comment"># title</span></div><div class="line"><span class="comment"># body</span></div><div class="line"><span class="comment"># p</span></div><div class="line"><span class="comment"># b</span></div><div class="line"><span class="comment"># p</span></div><div class="line"><span class="comment"># a</span></div><div class="line"><span class="comment"># a</span></div><div class="line"><span class="comment"># a</span></div><div class="line"><span class="comment"># p</span></div></pre></td></tr></table></figure>
<p>如果包含一个名字为 <code>id</code> 的参数,Beautiful Soup会搜索每个tag的”id”属性.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">soup.find_all(id=<span class="string">'link2'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>如果传入 <code>href</code> 参数,Beautiful Soup会搜索每个tag的”href”属性:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">soup.find_all(href=re.compile(<span class="string">"elsie"</span>))</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>下面的例子在文档树中查找所有包含 <code>id</code> 属性的tag,无论 <code>id</code> 的值是什么:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">soup.find_all(id=<span class="keyword">True</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>使用多个指定名字的参数可以同时过滤tag的多个属性:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">soup.find_all(href=re.compile(<span class="string">"elsie"</span>), id=<span class="string">'link1'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;three&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>通过 <code>string</code> 参数可以搜搜文档中的字符串内容.与 <code>name</code> 参数的可选值一样, <code>string</code> 参数接受 <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id30" target="_blank" rel="external">字符串</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id31" target="_blank" rel="external">正则表达式</a> , <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id32" target="_blank" rel="external">列表</a>, <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#true" target="_blank" rel="external">True</a> . 看例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">soup.find_all(string=<span class="string">"Elsie"</span>)</div><div class="line"><span class="comment"># [u'Elsie']</span></div><div class="line"></div><div class="line">soup.find_all(string=[<span class="string">"Tillie"</span>, <span class="string">"Elsie"</span>, <span class="string">"Lacie"</span>])</div><div class="line"><span class="comment"># [u'Elsie', u'Lacie', u'Tillie']</span></div><div class="line"></div><div class="line">soup.find_all(string=re.compile(<span class="string">"Dormouse"</span>))</div><div class="line">[<span class="string">u"The Dormouse's story"</span>, <span class="string">u"The Dormouse's story"</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_the_only_string_within_a_tag</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">""</span>Return <span class="keyword">True</span> <span class="keyword">if</span> this string <span class="keyword">is</span> the only child of its parent tag.<span class="string">""</span></div><div class="line">    <span class="keyword">return</span> (s == s.parent.string)</div><div class="line"></div><div class="line">soup.find_all(string=is_the_only_string_within_a_tag)</div><div class="line"><span class="comment"># [u"The Dormouse's story", u"The Dormouse's story", u'Elsie', u'Lacie', u'Tillie', u'...']</span></div></pre></td></tr></table></figure>
<p>虽然 <code>string</code> 参数用于搜索字符串,还可以与其它参数混合使用来过滤tag.Beautiful Soup会找到<code>.string</code> 方法与 <code>string</code> 参数值相符的tag.下面代码用来搜索内容里面包含“Elsie”的<code>&lt;a&gt;</code>标签:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">soup.find_all(<span class="string">"a"</span>, string=<span class="string">"Elsie"</span>)</div><div class="line"><span class="comment"># [&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>限制返回结果的个数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">soup.find_all(<span class="string">"a"</span>, limit=<span class="number">2</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>下面两行代码是等价的:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">soup.find_all(<span class="string">"a"</span>)</div><div class="line">soup(<span class="string">"a"</span>)</div></pre></td></tr></table></figure>
<p>这两行代码也是等价的:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">soup.title.find_all(string=<span class="keyword">True</span>)</div><div class="line">soup.title(string=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<p><code>find_all()</code> 和 <code>find()</code> 只搜索当前节点的所有子节点,孙子节点等. <code>find_parents()</code> 和<code>find_parent()</code> 用来搜索当前节点的父辈节点</p>
<p><code>find_next_siblings()</code> 方法返回所有符合条件的后面的兄弟节点, <code>find_next_sibling()</code> 只返回符合条件的后面的第一个tag节点.</p>
<p><code>find_previous_siblings()</code> 方法返回所有符合条件的前面的兄弟节点, <code>find_previous_sibling()</code> 方法返回第一个符合条件的前面的兄弟节点</p>
<p><code>find_all_next()</code>方法返回所有符合条件的节点, <code>find_next()</code> 方法返回第一个符合条件的节点</p>
<p><code>find_all_previous()</code> 方法返回所有符合条件的节点, <code>find_previous()</code> 方法返回第一个符合条件的节点.</p>
<p>CSS选择器:对于熟悉css选择器的开发人员来说，使用这种方法来查找比较简单:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">soup.select(<span class="string">"title"</span>)</div><div class="line"><span class="comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">"p nth-of-type(3)"</span>)</div><div class="line"><span class="comment"># [&lt;p class="story"&gt;...&lt;/p&gt;]</span></div></pre></td></tr></table></figure>
<p>通过tag标签逐层查找:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">soup.select(<span class="string">"body a"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie"  id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">"html head title"</span>)</div><div class="line"><span class="comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div></pre></td></tr></table></figure>
<p>找到某个tag标签下的直接子标签 <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/#id93" target="_blank" rel="external">[6]</a> :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">soup.select(<span class="string">"head &gt; title"</span>)</div><div class="line"><span class="comment"># [&lt;title&gt;The Dormouse's story&lt;/title&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">"p &gt; a"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie"  id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">"p &gt; a:nth-of-type(2)"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">"p &gt; #link1"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">"body &gt; a"</span>)</div><div class="line"><span class="comment"># []</span></div></pre></td></tr></table></figure>
<p>找到兄弟节点标签:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">soup.select(<span class="string">"#link1 ~ .sister"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie"  id="link3"&gt;Tillie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">"#link1 + .sister"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>通过CSS的类名查找:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">soup.select(<span class="string">".sister"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">"[class~=sister]"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>通过tag的id查找:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">soup.select(<span class="string">"#link1"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">"a#link2"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>同时用多种CSS选择器查询元素:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">soup.select(<span class="string">"#link1,#link2"</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>通过是否存在某个属性来查找:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">soup.select(<span class="string">'a[href]'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>通过属性的值来查找:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">soup.select(<span class="string">'a[href="http://example.com/elsie"]'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">'a[href^="http://example.com/"]'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;,</span></div><div class="line"><span class="comment">#  &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">'a[href$="tillie"]'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;]</span></div><div class="line"></div><div class="line">soup.select(<span class="string">'a[href*=".com/el"]'</span>)</div><div class="line"><span class="comment"># [&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;]</span></div></pre></td></tr></table></figure>
<p>返回查找到的元素的第一个</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">soup.select_one(<span class="string">".sister"</span>)</div><div class="line"><span class="comment"># &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;Elsie&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<h3 id="修改文档树"><a href="#修改文档树" class="headerlink" title="修改文档树"></a>修改文档树</h3><p><code>Tag.insert()</code> 方法与 <code>Tag.append()</code> 方法类似,区别是不会把新元素添加到父节点 <code>.contents</code> 属性的最后,而是把元素插入到指定的位置.与Python列表总的 <code>.insert()</code> 方法的用法下同:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">markup = <span class="string">'&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;'</span></div><div class="line">soup = BeautifulSoup(markup)</div><div class="line">tag = soup.a</div><div class="line"></div><div class="line">tag.insert(<span class="number">1</span>, <span class="string">"but did not endorse "</span>)</div><div class="line">tag</div><div class="line"><span class="comment"># &lt;a href="http://example.com/"&gt;I linked to but did not endorse &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;</span></div><div class="line">tag.contents</div><div class="line"><span class="comment"># [u'I linked to ', u'but did not endorse', &lt;i&gt;example.com&lt;/i&gt;]</span></div></pre></td></tr></table></figure>
<p><code>Tag.clear()</code> 方法移除当前tag的内容:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">markup = <span class="string">'&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;'</span></div><div class="line">soup = BeautifulSoup(markup)</div><div class="line">tag = soup.a</div><div class="line"></div><div class="line">tag.clear()</div><div class="line">tag</div><div class="line"><span class="comment"># &lt;a href="http://example.com/"&gt;&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<p><code>PageElement.extract()</code> 方法将当前tag移除文档树,并作为方法结果返回:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">markup = <span class="string">'&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;'</span></div><div class="line">soup = BeautifulSoup(markup)</div><div class="line">a_tag = soup.a</div><div class="line"></div><div class="line">i_tag = soup.i.extract()</div><div class="line"></div><div class="line">a_tag</div><div class="line"><span class="comment"># &lt;a href="http://example.com/"&gt;I linked to&lt;/a&gt;</span></div><div class="line"></div><div class="line">i_tag</div><div class="line"><span class="comment"># &lt;i&gt;example.com&lt;/i&gt;</span></div><div class="line"></div><div class="line">print(i_tag.parent)</div><div class="line"><span class="keyword">None</span></div></pre></td></tr></table></figure>
<p>这个方法实际上产生了2个文档树: 一个是用来解析原始文档的 <code>BeautifulSoup</code> 对象,另一个是被移除并且返回的tag.被移除并返回的tag可以继续调用 <code>extract</code> 方法:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">my_string = i_tag.string.extract()</div><div class="line">my_string</div><div class="line"><span class="comment"># u'example.com'</span></div><div class="line"></div><div class="line">print(my_string.parent)</div><div class="line"><span class="comment"># None</span></div><div class="line">i_tag</div><div class="line"><span class="comment"># &lt;i&gt;&lt;/i&gt;</span></div></pre></td></tr></table></figure>
<p><code>Tag.decompose()</code> 方法将当前节点移除文档树并完全销毁:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">markup = <span class="string">'&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;'</span></div><div class="line">soup = BeautifulSoup(markup)</div><div class="line">a_tag = soup.a</div><div class="line"></div><div class="line">soup.i.decompose()</div><div class="line"></div><div class="line">a_tag</div><div class="line"><span class="comment"># &lt;a href="http://example.com/"&gt;I linked to&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<p><code>PageElement.replace_with()</code> 方法移除文档树中的某段内容,并用新tag或文本节点替代它:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">markup = <span class="string">'&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;'</span></div><div class="line">soup = BeautifulSoup(markup)</div><div class="line">a_tag = soup.a</div><div class="line"></div><div class="line">new_tag = soup.new_tag(<span class="string">"b"</span>)</div><div class="line">new_tag.string = <span class="string">"example.net"</span></div><div class="line">a_tag.i.replace_with(new_tag)</div><div class="line"></div><div class="line">a_tag</div><div class="line"><span class="comment"># &lt;a href="http://example.com/"&gt;I linked to &lt;b&gt;example.net&lt;/b&gt;&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<p><code>replace_with()</code> 方法返回被替代的tag或文本节点,可以用来浏览或添加到文档树其它地方</p>
<p><code>PageElement.wrap()</code> 方法可以对指定的tag元素进行包装,并返回包装后的结果:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">soup = BeautifulSoup(<span class="string">"&lt;p&gt;I wish I was bold.&lt;/p&gt;"</span>)</div><div class="line">soup.p.string.wrap(soup.new_tag(<span class="string">"b"</span>))</div><div class="line"><span class="comment"># &lt;b&gt;I wish I was bold.&lt;/b&gt;</span></div><div class="line"></div><div class="line">soup.p.wrap(soup.new_tag(<span class="string">"div"</span>))</div><div class="line"><span class="comment"># &lt;div&gt;&lt;p&gt;&lt;b&gt;I wish I was bold.&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;</span></div></pre></td></tr></table></figure>
<p>该方法在 Beautiful Soup 4.0.5 中添加</p>
<p><code>Tag.unwrap()</code> 方法与 <code>wrap()</code> 方法相反.将移除tag内的所有tag标签,该方法常被用来进行标记的解包:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">markup = <span class="string">'&lt;a href="http://example.com/"&gt;I linked to &lt;i&gt;example.com&lt;/i&gt;&lt;/a&gt;'</span></div><div class="line">soup = BeautifulSoup(markup)</div><div class="line">a_tag = soup.a</div><div class="line"></div><div class="line">a_tag.i.unwrap()</div><div class="line">a_tag</div><div class="line"><span class="comment"># &lt;a href="http://example.com/"&gt;I linked to example.com&lt;/a&gt;</span></div></pre></td></tr></table></figure>
<p>与 <code>replace_with()</code> 方法相同, <code>unwrap()</code> 方法返回被移除的tag</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/" target="_blank" rel="external">官网文档</a></li>
<li><a href="https://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">中文4.4文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> BeautifulSoup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[furl链接解析库使用详解]]></title>
      <url>https://xin053.github.io/2016/11/13/furl%E9%93%BE%E6%8E%A5%E8%A7%A3%E6%9E%90%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="furl简介"><a href="#furl简介" class="headerlink" title="furl简介"></a>furl简介</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">scheme://username:password@host:port/path?query#fragment</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>scheme</strong> is the scheme string (all lowercase) or None. None means no scheme. An empty string means a protocol relative URL, like <code>//www.google.com</code>.</li>
<li><strong>username</strong> is the username string for authentication.</li>
<li><strong>password</strong> is the password string for authentication with <strong>username</strong>.</li>
<li><strong>host</strong> is the domain name, IPv4, or IPv6 address as a string. Domain names are all lowercase.</li>
<li><strong>port</strong> is an integer or None. A value of None means no port specified and the default port for the given <strong>scheme</strong> should be inferred, if possible.</li>
<li><strong>path</strong> is a Path object comprised of path segments.</li>
<li><strong>query</strong> is a Query object comprised of query arguments.</li>
<li><strong>fragment</strong> is a Fragment object comprised of a Path and Query object separated by an optional <code>?</code> separator.</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> furl <span class="keyword">import</span> furl</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://user:pass@www.google.com:99/'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.scheme, f.username, f.password, f.host, f.port</div><div class="line">(<span class="string">'http'</span>, <span class="string">'user'</span>, <span class="string">'pass'</span>, <span class="string">'www.google.com'</span>, <span class="number">99</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="furl使用"><a href="#furl使用" class="headerlink" title="furl使用"></a>furl使用</h2><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>会根据协议自动识别默认端口,目前仅支持ftp，ssh，http，https</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'https://secure.google.com/'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.port</div><div class="line"><span class="number">443</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'unknown://www.google.com/'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> f.port</div><div class="line"><span class="keyword">None</span></div></pre></td></tr></table></figure>
<h3 id="netloc"><a href="#netloc" class="headerlink" title="netloc"></a>netloc</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://www.google.com/'</span>).netloc</div><div class="line"><span class="string">'www.google.com'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://www.google.com:99/'</span>).netloc</div><div class="line"><span class="string">'www.google.com:99'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://user:pass@www.google.com:99/'</span>).netloc</div><div class="line"><span class="string">'user:pass@www.google.com:99'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://www.baidu.com?username=zzx'</span>).netloc</div><div class="line"><span class="string">'www.baidu.com'</span></div></pre></td></tr></table></figure>
<h3 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://www.google.com/'</span>).origin</div><div class="line"><span class="string">'http://www.google.com'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://www.google.com:99/'</span>).origin</div><div class="line"><span class="string">'http://www.google.com:99'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://www.baidu.com?username=zzx'</span>).origin</div><div class="line"><span class="string">'http://www.baidu.com'</span></div></pre></td></tr></table></figure>
<h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/a/large%20ish/path'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path</div><div class="line">Path(<span class="string">'/a/large ish/path'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path.segments</div><div class="line">[<span class="string">'a'</span>, <span class="string">'large ish'</span>, <span class="string">'path'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.path)</div><div class="line"><span class="string">'/a/large%20ish/path'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path.segments = [<span class="string">'a'</span>, <span class="string">'new'</span>, <span class="string">'path'</span>, <span class="string">''</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.path)</div><div class="line"><span class="string">'/a/new/path/'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path = <span class="string">'o/hi/there/with%20some%20encoding/'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path.segments</div><div class="line">[<span class="string">'o'</span>, <span class="string">'hi'</span>, <span class="string">'there'</span>, <span class="string">'with some encoding'</span>, <span class="string">''</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.path)</div><div class="line"><span class="string">'/o/hi/there/with%20some%20encoding/'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.url</div><div class="line"><span class="string">'http://www.google.com/o/hi/there/with%20some%20encoding/'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path.segments = [<span class="string">'segments'</span>, <span class="string">'are'</span>, <span class="string">'maintained'</span>, <span class="string">'decoded'</span>, <span class="string">'^`&lt;&gt;[]"#/?'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.path)</div><div class="line"><span class="string">'/segments/are/maintained/decoded/%5E%60%3C%3E%5B%5D%22%23%2F%3F'</span></div></pre></td></tr></table></figure>
<p>可以注意到链接末尾的<code>/</code>被解析为<code>&#39;&#39;</code>,因为它被当作是一个目录:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/a/directory/'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path.isdir</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path.isfile</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/a/file'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path.isdir</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path.isfile</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>对path进行规范化:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com////a/./b/lolsup/../c/'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path.normalize()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.url</div><div class="line"><span class="string">'http://www.google.com/a/b/c/'</span></div></pre></td></tr></table></figure>
<h3 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/?one=1&amp;two=2'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.query</div><div class="line">Query(<span class="string">'one=1&amp;two=2'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.query.params</div><div class="line">omdict1D([(<span class="string">'one'</span>, <span class="string">'1'</span>), (<span class="string">'two'</span>, <span class="string">'2'</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.query)</div><div class="line"><span class="string">'one=1&amp;two=2'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/?one=1&amp;two=2'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.query.params</div><div class="line">omdict1D([(<span class="string">'one'</span>, <span class="string">'1'</span>), (<span class="string">'two'</span>, <span class="string">'2'</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args</div><div class="line">omdict1D([(<span class="string">'one'</span>, <span class="string">'1'</span>), (<span class="string">'two'</span>, <span class="string">'2'</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args <span class="keyword">is</span> f.query.params</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>有关query属性的例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/?space=jams&amp;space=slams'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args[<span class="string">'space'</span>]</div><div class="line"><span class="string">'jams'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args.getlist(<span class="string">'space'</span>)</div><div class="line">[<span class="string">'jams'</span>, <span class="string">'slams'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args.addlist(<span class="string">'repeated'</span>, [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.query)</div><div class="line"><span class="string">'space=jams&amp;space=slams&amp;repeated=1&amp;repeated=2&amp;repeated=3'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args.popvalue(<span class="string">'space'</span>)</div><div class="line"><span class="string">'slams'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args.popvalue(<span class="string">'repeated'</span>, <span class="string">'2'</span>)</div><div class="line"><span class="string">'2'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.query)</div><div class="line"><span class="string">'space=jams&amp;repeated=1&amp;repeated=3'</span></div></pre></td></tr></table></figure>
<p><code>&#39;&#39;</code>与<code>None</code>参数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://sprop.su'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args[<span class="string">'param'</span>] = <span class="string">''</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.url</div><div class="line"><span class="string">'http://sprop.su/?param='</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://sprop.su'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args[<span class="string">'param'</span>] = <span class="keyword">None</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.url</div><div class="line"><span class="string">'http://sprop.su/?param'</span></div></pre></td></tr></table></figure>
<h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/#/fragment/path?with=params'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.fragment</div><div class="line">Fragment(<span class="string">'/fragment/path?with=params'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.fragment.path</div><div class="line">Path(<span class="string">'/fragment/path'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.fragment.query</div><div class="line">Query(<span class="string">'with=params'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.fragment.separator</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/#/fragment/path?with=params'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.fragment)</div><div class="line"><span class="string">'/fragment/path?with=params'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.fragment.path.segments.append(<span class="string">'file.ext'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.fragment)</div><div class="line"><span class="string">'/fragment/path/file.ext?with=params'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/#/fragment/path?with=params'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.fragment)</div><div class="line"><span class="string">'/fragment/path?with=params'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.fragment.args[<span class="string">'new'</span>] = <span class="string">'yep'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(f.fragment)</div><div class="line"><span class="string">'/fragment/path?new=yep&amp;with=params'</span></div></pre></td></tr></table></figure>
<p>fragment的分隔符是<code>?</code></p>
<h3 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.path = <span class="string">'some encoding here'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args[<span class="string">'and some encoding'</span>] = <span class="string">'here, too'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.url</div><div class="line"><span class="string">'http://www.google.com/some%20encoding%20here?and+some+encoding=here,+too'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.set(host=<span class="string">u'ドメイン.テスト'</span>, path=<span class="string">u'джк'</span>, query=<span class="string">u'☃=☺'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.url</div><div class="line"><span class="string">'http://xn--eckwd4c7c.xn--zckzah/%D0%B4%D0%B6%D0%BA?%E2%98%83=%E2%98%BA'</span></div></pre></td></tr></table></figure>
<h3 id="Inline-manipulation"><a href="#Inline-manipulation" class="headerlink" title="Inline manipulation"></a>Inline manipulation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> furl <span class="keyword">import</span> furl</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com/?one=1&amp;two=2'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.args[<span class="string">'three'</span>] = <span class="string">'3'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> f.args[<span class="string">'one'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.url</div><div class="line"><span class="string">'http://www.google.com/?two=2&amp;three=3'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://www.google.com/?one=1'</span>).add(&#123;<span class="string">'two'</span>:<span class="string">'2'</span>&#125;).url</div><div class="line"><span class="string">'http://www.google.com/?one=1&amp;two=2'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://www.google.com/?one=1&amp;two=2'</span>).set(&#123;<span class="string">'three'</span>:<span class="string">'3'</span>&#125;).url</div><div class="line"><span class="string">'http://www.google.com/?three=3'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(<span class="string">'http://www.google.com/?one=1&amp;two=2'</span>).remove([<span class="string">'one'</span>]).url</div><div class="line"><span class="string">'http://www.google.com/?two=2'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://www.google.com/#fragment'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(url).add(args=&#123;<span class="string">'example'</span>:<span class="string">'arg'</span>&#125;).set(port=<span class="number">99</span>).remove(fragment=<span class="keyword">True</span>).url</div><div class="line"><span class="string">'http://www.google.com:99/?example=arg'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl().set(</div><div class="line"><span class="meta">... </span>  scheme=<span class="string">'https'</span>, host=<span class="string">'secure.google.com'</span>, port=<span class="number">99</span>, path=<span class="string">'index.html'</span>,</div><div class="line"><span class="meta">... </span>  args=&#123;<span class="string">'some'</span>:<span class="string">'args'</span>&#125;, fragment=<span class="string">'great job'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.url</div><div class="line"><span class="string">'https://secure.google.com:99/index.html?some=args#great%20job'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://secure.google.com:99/a/path/?some=args#great job'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>furl(url).remove(args=[<span class="string">'some'</span>], path=<span class="string">'path/'</span>, fragment=<span class="keyword">True</span>, port=<span class="keyword">True</span>).url</div><div class="line"><span class="string">'https://secure.google.com/a/'</span></div></pre></td></tr></table></figure>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p><strong>copy()</strong> creates and returns a new furl object with an identical URL.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.copy().set(path=<span class="string">'/new/path'</span>).url</div><div class="line"><span class="string">'http://www.google.com/new/path'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.url</div><div class="line"><span class="string">'http://www.google.com'</span></div></pre></td></tr></table></figure>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = furl(<span class="string">'http://www.google.com'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.join(<span class="string">'new/path'</span>).url</div><div class="line"><span class="string">'http://www.google.com/new/path'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.join(<span class="string">'replaced'</span>).url</div><div class="line"><span class="string">'http://www.google.com/new/replaced'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.join(<span class="string">'../parent'</span>).url</div><div class="line"><span class="string">'http://www.google.com/parent'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.join(<span class="string">'path?query=yes#fragment'</span>).url</div><div class="line"><span class="string">'http://www.google.com/path?query=yes#fragment'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.join(<span class="string">'unknown://www.yahoo.com/new/url/'</span>).url</div><div class="line"><span class="string">'unknown://www.yahoo.com/new/url/'</span></div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://github.com/gruns/furl/blob/master/API.md" target="_blank" rel="external">官方API文档</a></li>
<li><a href="https://github.com/gruns/furl" target="_blank" rel="external">github</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> furl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Redis学习笔记]]></title>
      <url>https://xin053.github.io/2016/11/12/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p>
<p>特点:</p>
<ul>
<li>Redis是完全在内存中保存数据的数据库，使用磁盘只是为了持久性目的</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<p>优点:</p>
<ul>
<li><strong>异常快速: </strong>Redis是非常快的，每秒可以执行大约110000设置操作，81000个/每秒的读取操作。</li>
<li><strong>支持丰富的数据类型: </strong>Redis支持最大多数开发人员已经知道如列表，集合，可排序集合，哈希等数据类型。<br>这使得在应用中很容易解决的各种问题，因为我们知道哪些问题处理使用哪种数据类型更好解决。</li>
<li><strong>操作都是原子的 : </strong>所有 Redis 的操作都是原子，从而确保当两个客户同时访问 Redis 服务器得到的是更新后的值（最新值）。</li>
<li><strong>MultiUtility工具:</strong> Redis是一个多功能实用工具，可以在很多如：缓存，消息传递队列中使用（Redis原生支持发布/订阅），在应用程序中，如：Web应用程序会话，网站页面点击数等任何短暂的数据</li>
</ul>
<a id="more"></a>
<p>因为redis原生支持linux，所以出现了<a href="https://github.com/MSOpenTech/redis，支持windows平台，下载安装包安装即可，并且可以设置最高使用的内存大小，更多配置参考安装目录下的配置文件" target="_blank" rel="external">https://github.com/MSOpenTech/redis，支持windows平台，下载安装包安装即可，并且可以设置最高使用的内存大小，更多配置参考安装目录下的配置文件</a></p>
<h2 id="Redis使用"><a href="#Redis使用" class="headerlink" title="Redis使用"></a>Redis使用</h2><h3 id="连接redis服务器"><a href="#连接redis服务器" class="headerlink" title="连接redis服务器"></a>连接redis服务器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\WINDOWS\system32&gt;redis-cli -h <span class="number">127.0</span>.<span class="number">0.1</span> -p <span class="number">6379</span> -a <span class="string">"123"</span> -n <span class="number">0</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt;</div></pre></td></tr></table></figure>
<p><code>-a</code>后面是密码,<code>-n</code>表示连接第几个数据库，默认连接编号为0的数据库</p>
<p>如果默认是本机6397端口,没有密码，可以直接使用以下连接:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">C:\Users\zzx&gt;redis-cli</div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt;</div></pre></td></tr></table></figure>
<p>输入<code>quit</code>退出</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象</p>
<p>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SET name <span class="string">'zzx'</span></div><div class="line">OK</div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; GET name</div><div class="line"><span class="string">"zzx"</span></div></pre></td></tr></table></figure>
<p><code>SET</code>与<code>GET</code>都可以使用小写，但是一般都是用大写，好区分是不是redix命令</p>
<p>其他命令:<a href="http://www.runoob.com/redis/redis-strings.html" target="_blank" rel="external">http://www.runoob.com/redis/redis-strings.html</a></p>
<p>更多命令见参考文档</p>
<h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; HMSET user:<span class="number">1</span> username zzx password <span class="number">123</span> age <span class="number">22</span></div><div class="line">OK</div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; HGETALL user:<span class="number">1</span></div><div class="line"><span class="number">1</span>) <span class="string">"username"</span></div><div class="line"><span class="number">2</span>) <span class="string">"zzx"</span></div><div class="line"><span class="number">3</span>) <span class="string">"password"</span></div><div class="line"><span class="number">4</span>) <span class="string">"123"</span></div><div class="line"><span class="number">5</span>) <span class="string">"age"</span></div><div class="line"><span class="number">6</span>) <span class="string">"22"</span></div></pre></td></tr></table></figure>
<p><code>user:1</code>是key</p>
<p>每个 hash 可以存储2^32-1键值对（40多亿）</p>
<p>其他命令:<a href="http://www.runoob.com/redis/redis-hashes.html" target="_blank" rel="external">http://www.runoob.com/redis/redis-hashes.html</a></p>
<p>更多命令见参考文档</p>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; LPUSH test_list this is</div><div class="line">(integer) <span class="number">2</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; LPUSH test_list a</div><div class="line">(integer) <span class="number">3</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; LPUSH test_list test <span class="keyword">for</span> list</div><div class="line">(integer) <span class="number">6</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; LRANGE test_list <span class="number">0</span> <span class="number">6</span></div><div class="line"><span class="number">1</span>) <span class="string">"list"</span></div><div class="line"><span class="number">2</span>) <span class="string">"for"</span></div><div class="line"><span class="number">3</span>) <span class="string">"test"</span></div><div class="line"><span class="number">4</span>) <span class="string">"a"</span></div><div class="line"><span class="number">5</span>) <span class="string">"is"</span></div><div class="line"><span class="number">6</span>) <span class="string">"this"</span></div></pre></td></tr></table></figure>
<p>列表最多可存储2^32-1 元素</p>
<p>其他命令:<a href="http://www.runoob.com/redis/redis-lists.html" target="_blank" rel="external">http://www.runoob.com/redis/redis-lists.html</a></p>
<p>更多命令见参考文档</p>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>通过hash实现的，不能保证顺序，元素唯一性</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SADD test_set this is a</div><div class="line">(integer) <span class="number">3</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SADD test_set test <span class="keyword">for</span> set</div><div class="line">(integer) <span class="number">3</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SADD test_set this</div><div class="line">(integer) <span class="number">0</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; SMEMBERS test_set</div><div class="line"><span class="number">1</span>) <span class="string">"test"</span></div><div class="line"><span class="number">2</span>) <span class="string">"this"</span></div><div class="line"><span class="number">3</span>) <span class="string">"set"</span></div><div class="line"><span class="number">4</span>) <span class="string">"for"</span></div><div class="line"><span class="number">5</span>) <span class="string">"is"</span></div><div class="line"><span class="number">6</span>) <span class="string">"a"</span></div></pre></td></tr></table></figure>
<p>对于已经存在与set中的元素会返回0</p>
<p>其他命令:<a href="http://www.runoob.com/redis/redis-sets.html" target="_blank" rel="external">http://www.runoob.com/redis/redis-sets.html</a></p>
<p>更多命令见参考文档</p>
<h4 id="zset-有序集合"><a href="#zset-有序集合" class="headerlink" title="zset(有序集合)"></a>zset(有序集合)</h4><p>元素不重复并且保持插入元素的顺序,与Set不同的是，zset中的每个元素有都个<code>score</code>属性，可以理解为权重，内部是按照权重的大小进行排序的</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ZADD test_zset <span class="number">1</span> this <span class="number">2</span> is <span class="number">3</span> a <span class="number">4</span> test <span class="number">0</span> <span class="keyword">for</span> <span class="number">7</span> zset</div><div class="line">(integer) <span class="number">6</span></div><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ZRANGE test_zset <span class="number">0</span> <span class="number">7</span></div><div class="line"><span class="number">1</span>) <span class="string">"for"</span></div><div class="line"><span class="number">2</span>) <span class="string">"this"</span></div><div class="line"><span class="number">3</span>) <span class="string">"is"</span></div><div class="line"><span class="number">4</span>) <span class="string">"a"</span></div><div class="line"><span class="number">5</span>) <span class="string">"test"</span></div><div class="line"><span class="number">6</span>) <span class="string">"zset"</span></div></pre></td></tr></table></figure>
<p>其他命令:<a href="http://www.runoob.com/redis/redis-sorted-sets.html" target="_blank" rel="external">http://www.runoob.com/redis/redis-sorted-sets.html</a></p>
<p>更多命令见参考文档</p>
<h3 id="redis-key"><a href="#redis-key" class="headerlink" title="redis key"></a>redis key</h3><p>以上的<code>name</code>,<code>test_list</code>,<code>test_set</code>,<code>test_zset</code>和<code>uesr:1</code>都是key</p>
<p>可以通过<code>DEL</code>命令来删除key</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>命令及描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><a href="http://www.runoob.com/redis/keys-del.html" target="_blank" rel="external">DEL key</a>该命令用于在 key 存在时删除 key。</td>
</tr>
<tr>
<td>2</td>
<td><a href="http://www.runoob.com/redis/keys-dump.html" target="_blank" rel="external">DUMP key</a> 序列化给定 key ，并返回被序列化的值。</td>
</tr>
<tr>
<td>3</td>
<td><a href="http://www.runoob.com/redis/keys-exists.html" target="_blank" rel="external">EXISTS key</a> 检查给定 key 是否存在。</td>
</tr>
<tr>
<td>4</td>
<td><a href="http://www.runoob.com/redis/keys-expire.html" target="_blank" rel="external">EXPIRE key</a> seconds为给定 key 设置过期时间。</td>
</tr>
<tr>
<td>5</td>
<td><a href="http://www.runoob.com/redis/keys-expireat.html" target="_blank" rel="external">EXPIREAT key timestamp</a> EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td>
</tr>
<tr>
<td>6</td>
<td><a href="http://www.runoob.com/redis/keys-pexpire.html" target="_blank" rel="external">PEXPIRE key milliseconds</a> 设置 key 的过期时间以毫秒计。</td>
</tr>
<tr>
<td>7</td>
<td><a href="http://www.runoob.com/redis/keys-pexpireat.html" target="_blank" rel="external">PEXPIREAT key milliseconds-timestamp</a> 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td>
</tr>
<tr>
<td>8</td>
<td><a href="http://www.runoob.com/redis/keys-keys.html" target="_blank" rel="external">KEYS pattern</a> 查找所有符合给定模式( pattern)的 key 。</td>
</tr>
<tr>
<td>9</td>
<td><a href="http://www.runoob.com/redis/keys-move.html" target="_blank" rel="external">MOVE key db</a> 将当前数据库的 key 移动到给定的数据库 db 当中。</td>
</tr>
<tr>
<td>10</td>
<td><a href="http://www.runoob.com/redis/keys-persist.html" target="_blank" rel="external">PERSIST key</a> 移除 key 的过期时间，key 将持久保持。</td>
</tr>
<tr>
<td>11</td>
<td><a href="http://www.runoob.com/redis/keys-pttl.html" target="_blank" rel="external">PTTL key</a> 以毫秒为单位返回 key 的剩余的过期时间。</td>
</tr>
<tr>
<td>12</td>
<td><a href="http://www.runoob.com/redis/keys-ttl.html" target="_blank" rel="external">TTL key</a> 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td>
</tr>
<tr>
<td>13</td>
<td><a href="http://www.runoob.com/redis/keys-randomkey.html" target="_blank" rel="external">RANDOMKEY</a> 从当前数据库中随机返回一个 key 。</td>
</tr>
<tr>
<td>14</td>
<td><a href="http://www.runoob.com/redis/keys-rename.html" target="_blank" rel="external">RENAME key newkey</a> 修改 key 的名称</td>
</tr>
<tr>
<td>15</td>
<td><a href="http://www.runoob.com/redis/keys-renamenx.html" target="_blank" rel="external">RENAMENX key newkey</a> 仅当 newkey 不存在时，将 key 改名为 newkey 。</td>
</tr>
<tr>
<td>16</td>
<td><a href="http://www.runoob.com/redis/keys-type.html" target="_blank" rel="external">TYPE key</a> 返回 key 所储存的值的类型。</td>
</tr>
</tbody>
</table>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><table>
<thead>
<tr>
<th>序号</th>
<th>命令及描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><a href="http://www.runoob.com/redis/transactions-discard.html" target="_blank" rel="external">DISCARD</a> 取消事务，放弃执行事务块内的所有命令。</td>
</tr>
<tr>
<td>2</td>
<td><a href="http://www.runoob.com/redis/transactions-exec.html" target="_blank" rel="external">EXEC</a> 执行所有事务块内的命令。</td>
</tr>
<tr>
<td>3</td>
<td><a href="http://www.runoob.com/redis/transactions-multi.html" target="_blank" rel="external">MULTI</a> 标记一个事务块的开始。</td>
</tr>
<tr>
<td>4</td>
<td><a href="http://www.runoob.com/redis/transactions-unwatch.html" target="_blank" rel="external">UNWATCH</a> 取消 WATCH 命令对所有 key 的监视。</td>
</tr>
<tr>
<td>5</td>
<td><a href="http://www.runoob.com/redis/transactions-watch.html" target="_blank" rel="external">WATCH key [key …]</a> 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</td>
</tr>
</tbody>
</table>
<h3 id="Redis服务器"><a href="#Redis服务器" class="headerlink" title="Redis服务器"></a>Redis服务器</h3><p>输入<code>INFO</code>可以获取 Redis 服务器的各种信息和统计数值</p>
<h3 id="Redis数据备份与恢复"><a href="#Redis数据备份与恢复" class="headerlink" title="Redis数据备份与恢复"></a>Redis数据备份与恢复</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; save</div><div class="line">OK</div></pre></td></tr></table></figure>
<p>该命令将在 redis 安装目录中创建<code>dump.rdb</code>文件。</p>
<p>如果需要恢复数据，只需将备份文件 <code>dump.rdb</code> 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 <code>CONFIG</code> 命令</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; CONFIG GET dir</div><div class="line"><span class="number">1</span>) <span class="string">"dir"</span></div><div class="line"><span class="number">2</span>) <span class="string">"D:\\Redis"</span></div></pre></td></tr></table></figure>
<p>创建 redis 备份文件也可以使用命令 <code>BGSAVE</code>，该命令在后台执行。</p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p><code>FLUSHDB</code> 清除一个数据库，<code>FLUSHALL</code>清除整个redis数据</p>
<h3 id="Redis管道"><a href="#Redis管道" class="headerlink" title="Redis管道"></a>Redis管道</h3><p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：</p>
<ul>
<li>客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。</li>
<li>服务端处理命令，并将结果返回给客户端。</li>
</ul>
<p>Redis 管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。</p>
<h2 id="redis-py"><a href="#redis-py" class="headerlink" title="redis-py"></a>redis-py</h2><p><code>redis-py</code>是python实现的redis客户端，关于<code>redis-py</code>的使用参考:</p>
<ul>
<li><a href="https://github.com/andymccurdy/redis-py#scan-iterators" target="_blank" rel="external">https://github.com/andymccurdy/redis-py#scan-iterators</a></li>
<li><a href="https://redis-py.readthedocs.io/en/latest/" target="_blank" rel="external">https://redis-py.readthedocs.io/en/latest/</a></li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://github.com/MSOpenTech/redisredis-py[Memory" target="_blank" rel="external">https://github.com/MSOpenTech/redisredis-py[Memory</a> Configuration For Redis 3.0](<a href="https://github.com/MSOpenTech/redis/wiki/Memory-Configuration-For-Redis-3.0" target="_blank" rel="external">https://github.com/MSOpenTech/redis/wiki/Memory-Configuration-For-Redis-3.0</a>)</li>
<li><a href="http://www.jb51.net/article/84071.htm" target="_blank" rel="external">Windows下Redis的安装使用教程</a></li>
<li><a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="external">Redis 教程</a></li>
<li><a href="http://www.yiibai.com/redis/redis_quick_guide.html" target="_blank" rel="external">Redis快速入门</a></li>
<li><a href="http://redisdoc.com/" target="_blank" rel="external">Redis 命令参考</a></li>
<li><a href="http://redis.io/commands" target="_blank" rel="external">Command reference -Redis</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyMongo芒果库使用详解]]></title>
      <url>https://xin053.github.io/2016/11/09/PyMongo%E8%8A%92%E6%9E%9C%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="PyMongo简介"><a href="#PyMongo简介" class="headerlink" title="PyMongo简介"></a>PyMongo简介</h2><p>MongoDB官方出的针对python平台的库，相当于数据库的客户端，所以需要安装MongoDB的服务器端，按照<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/" target="_blank" rel="external">Install MongoDB Community Edition on Windows</a>说明可以在windows平台上安装MongoDB</p>
<p>并在管理员权限的cmd窗口运行:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"D:\MongoDB\Server\3.2\bin\mongod.exe"</span> --config <span class="string">"D:\MongoDB\Server\3.2\mongod.cfg"</span> --install --serviceName <span class="string">"MongoDB"</span></div></pre></td></tr></table></figure>
<p>将会产生系统服务，<code>mongod.cfg</code>文件内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">systemLog:</div><div class="line">    destination: file</div><div class="line">    path: F:\cookies\MongoDB\log\mongod.log</div><div class="line">storage:</div><div class="line">    dbPath: F:\cookies\MongoDB\database</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="PyMongo使用"><a href="#PyMongo使用" class="headerlink" title="PyMongo使用"></a>PyMongo使用</h2><p>针对PyMongo3.3.1</p>
<h3 id="创建客户端"><a href="#创建客户端" class="headerlink" title="创建客户端"></a>创建客户端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>client = MongoClient()</div></pre></td></tr></table></figure>
<p>不指定服务器地址和端口就是默认localhost下的27017端口,也就是:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>client = MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</div></pre></td></tr></table></figure>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>db = client.test_database</div></pre></td></tr></table></figure>
<p>底层检查是否有<code>test_database</code>这个属性，如果有，获取的就是<code>test_database</code>数据库，如果没有，则创建<code>test_database</code>数据库,也可以使用如下方式创建数据库:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>db = client[<span class="string">'test-database'</span>]</div></pre></td></tr></table></figure>
<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>collection = db.my_collection</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>collection = db[<span class="string">'my-collection'</span>]</div></pre></td></tr></table></figure>
<p>与创建数据库基本一样</p>
<h3 id="获取集合"><a href="#获取集合" class="headerlink" title="获取集合"></a>获取集合</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>db.collection_names()</div><div class="line">[<span class="string">'my_collection'</span>]</div></pre></td></tr></table></figure>
<h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><p>之前的各种操作都不会产生数据文件，只有在插入文档的时候，才连接服务器，产生相应的数据文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>db.my_collection.insert_one(&#123;<span class="string">"x"</span>: <span class="number">10</span>&#125;)</div><div class="line">&lt;pymongo.results.InsertOneResult at <span class="number">0x2248b7f3af8</span>&gt;</div></pre></td></tr></table></figure>
<p>也可以在插入文档的同时返回插入文档的<code>id</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_document_id = db.my_collection.insert_one(&#123;<span class="string">"x"</span>: <span class="number">10</span>&#125;).inserted_id</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>my_document_id</div><div class="line">ObjectId(<span class="string">'582404cff67a2f29f4cb8565'</span>)</div></pre></td></tr></table></figure>
<p><code>insert_many()</code>可以插入多个文档</p>
<h3 id="查找文档"><a href="#查找文档" class="headerlink" title="查找文档"></a>查找文档</h3><p><code>find_one()</code>查找的是符合条件的第一个文档</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>db.my_collection.find_one(&#123;<span class="string">"x"</span>:<span class="number">10</span>&#125;)</div><div class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'582404adf67a2f29f4cb8564'</span>), <span class="string">'x'</span>: <span class="number">10</span>&#125;</div></pre></td></tr></table></figure>
<p>根据<code>id</code>查找文档:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>db.my_collection.find_one(&#123;<span class="string">"_id"</span>:my_document_id&#125;)</div><div class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'582404cff67a2f29f4cb8565'</span>), <span class="string">'x'</span>: <span class="number">10</span>&#125;</div></pre></td></tr></table></figure>
<p>也可以如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>db.my_collection.find_one(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">'582404cff67a2f29f4cb8565'</span>)&#125;)</div></pre></td></tr></table></figure>
<p>输出所有符合条件的文档:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> collection <span class="keyword">in</span> db.my_collection.find(&#123;<span class="string">"x"</span>:<span class="number">10</span>&#125;).sort(<span class="string">"_id"</span>):</div><div class="line">    print(collection)</div><div class="line">    </div><div class="line">&#123;<span class="string">'x'</span>: <span class="number">10</span>, <span class="string">'_id'</span>: ObjectId(<span class="string">'582404adf67a2f29f4cb8564'</span>)&#125;</div><div class="line">&#123;<span class="string">'x'</span>: <span class="number">10</span>, <span class="string">'_id'</span>: ObjectId(<span class="string">'582404cff67a2f29f4cb8565'</span>)&#125;</div></pre></td></tr></table></figure>
<p><code>sort(&quot;_id&quot;)</code>表示按<code>id</code>列排序</p>
<h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>获取集合中文档数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>db.my_collection.count()</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>我们先将<code>ObjectId(&#39;582404adf67a2f29f4cb8564&#39;)</code>中的<code>x</code>值改为11</p>
<p>然后在<code>x</code>上创建索引</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>db.my_collection.create_index([(<span class="string">'x'</span>, pymongo.ASCENDING)],unique=<span class="keyword">True</span>)</div><div class="line"><span class="string">'x_1'</span></div></pre></td></tr></table></figure>
<p>列出所有的索引:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(db.my_collection.index_information())</div><div class="line">[<span class="string">'_id_'</span>, <span class="string">'x_1'</span>]</div></pre></td></tr></table></figure>
<p>索引<code>&#39;_id_&#39;</code>是根据<code>_id</code>自动创建的</p>
<p>其他基础操作比如更新，删除的语法与命令行Mongo类似，在此不赘述</p>
<p>以上便是PyMongo的基本操作，高级操作可参考:</p>
<p><a href="http://api.mongodb.com/python/3.3.1/examples/aggregation.html" target="_blank" rel="external">http://api.mongodb.com/python/3.3.1/examples/aggregation.html</a></p>
<p>API参考:</p>
<p><a href="http://api.mongodb.com/python/3.3.1/api/index.html" target="_blank" rel="external">http://api.mongodb.com/python/3.3.1/api/index.html</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://github.com/mongodb/mongo-python-driver" target="_blank" rel="external">PyMongo github README</a></li>
<li><a href="http://api.mongodb.com/python/3.3.1/tutorial.html" target="_blank" rel="external">PyMongo 3.3.1 doc</a></li>
<li><a href="https://docs.mongodb.com/getting-started/python/introduction/" target="_blank" rel="external">Introduction to MongoDB</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyMongo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB学习笔记]]></title>
      <url>https://xin053.github.io/2016/11/09/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h2><p><img src="https://avatars3.githubusercontent.com/u/45120?v=3&amp;s=200" alt=""></p>
<p>MongoDB是对象型数据库，mysql等关系型数据库的表格式固定，如果想增添带有更多信息的属性就需要重新建一张表，然后用外键进行关联，这样查询也会造成表之间的<code>join</code>，效率低，而且结构越复杂，表越多，表之间的关系就越紧密，会影响表之间的清晰度。而对象型数据库将每条记录看作是一个文档，以json格式存放在一个文件中，并且每个文档结构可以不同，一个文档中就包含了这条记录的所有相关信息，以面对对象的思维来看就是一个对象，文档的集合也就是关系型数据库记录的集合，也就是表</p>
<a id="more"></a>
<h2 id="MongoDB使用"><a href="#MongoDB使用" class="headerlink" title="MongoDB使用"></a>MongoDB使用</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use DATABASE_NAME</div></pre></td></tr></table></figure>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase()</div></pre></td></tr></table></figure>
<p><code>db</code>这个变量的值就是我们当前使用的数据库</p>
<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.createCollection(name, options)</div></pre></td></tr></table></figure>
<p>在该命令中，<code>name</code> 是所要创建的集合名称。<code>options</code> 是一个用来指定集合配置的文档。</p>
<h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.drop()</div></pre></td></tr></table></figure>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li><strong>String</strong>：字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</li>
<li><strong>Integer</strong>：整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</li>
<li><strong>Boolean</strong>：布尔值。用于存储布尔值（真/假）。</li>
<li><strong>Double</strong>：双精度浮点值。用于存储浮点值。</li>
<li><strong>Min/Max keys</strong>：将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</li>
<li><strong>Arrays</strong>：用于将数组或列表或多个值存储为一个键。</li>
<li><strong>Timestamp</strong>：时间戳。记录文档修改或添加的具体时间。</li>
<li><strong>Object</strong>：用于内嵌文档。</li>
<li><strong>Null</strong>：用于创建空值。</li>
<li><strong>Symbol</strong>：符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</li>
<li><strong>Date</strong>：日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</li>
<li><strong>Object ID</strong>：对象 ID。用于创建文档的 ID。</li>
<li><strong>Binary Data</strong>：二进制数据。用于存储二进制数据。</li>
<li><strong>Code</strong>：代码类型。用于在文档中存储 JavaScript 代码。</li>
<li><strong>Regular expression</strong>：正则表达式类型。用于存储正则表达式。</li>
</ul>
<h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.insert(document)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">db.mycol.insert(&#123;</div><div class="line">   _id: ObjectId(7df78ad8902c),</div><div class="line">   title: &apos;MongoDB Overview&apos;, </div><div class="line">   description: &apos;MongoDB is no sql database&apos;,</div><div class="line">   by: &apos;tutorials point&apos;,</div><div class="line">   url: &apos;http://www.tutorialspoint.com&apos;,</div><div class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">   likes: 100</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在插入的文档中，如果我们没有指定 <code>_id</code> 参数，那么 MongoDB 会自动为文档指定一个唯一的 ID</p>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.find()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">db.mycol.find().pretty()</div><div class="line">&#123;</div><div class="line">   &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">   &quot;title&quot;: &quot;MongoDB Overview&quot;, </div><div class="line">   &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">   &quot;by&quot;: &quot;tutorials point&quot;,</div><div class="line">   &quot;url&quot;: &quot;http://www.tutorialspoint.com&quot;,</div><div class="line">   &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">   &quot;likes&quot;: &quot;100&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用格式化方式显示结果，使用的是 <code>pretty()</code> 方法。除了 <code>find()</code> 方法之外，还有一个 <code>findOne()</code> 方法，它只返回一个文档。</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>格式</th>
<th>范例</th>
<th>RDBMS中的类似语句</th>
</tr>
</thead>
<tbody>
<tr>
<td>等于</td>
<td><code>{&lt;key&gt;:&lt;value&gt;}</code></td>
<td><code>db.mycol.find({&quot;by&quot;:&quot;tutorials point&quot;}).pretty()</code></td>
<td><code>where by = &#39;tutorials point&#39;</code></td>
</tr>
<tr>
<td>小于</td>
<td><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td>
<td><code>db.mycol.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td>
<td><code>where likes &lt; 50</code></td>
</tr>
<tr>
<td>小于或等于</td>
<td><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td>
<td><code>db.mycol.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td>
<td><code>where likes &lt;= 50</code></td>
</tr>
<tr>
<td>大于</td>
<td><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td>
<td><code>db.mycol.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td>
<td><code>where likes &gt; 50</code></td>
</tr>
<tr>
<td>大于或等于</td>
<td><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td>
<td><code>db.mycol.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td>
<td><code>where likes &gt;= 50</code></td>
</tr>
<tr>
<td>不等于</td>
<td><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td>
<td><code>db.mycol.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td>
<td><code>where likes != 50</code></td>
</tr>
</tbody>
</table>
<p><code>and</code>语法就用逗号表示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.mycol.find(&#123;key1:value1, key2:value2&#125;).pretty()</div></pre></td></tr></table></figure>
<p><code>or</code>语法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db.mycol.find(</div><div class="line">   &#123;</div><div class="line">      $or: [</div><div class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</div><div class="line">      ]</div><div class="line">   &#125;</div><div class="line">).pretty()</div></pre></td></tr></table></figure>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</div></pre></td></tr></table></figure>
<p>MongoDB 中的 <code>update()</code> 与 <code>save()</code> 方法都能用于更新集合中的文档。<code>update()</code> 方法更新已有文档中的值，而<code>save()</code> 方法则是用传入该方法的文档来替换已有文档。</p>
<p>MongoDB 默认只更新单个文档，要想更新多个文档，需要把参数 <code>multi</code> 设为 <code>true</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;,&#123;multi:true&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.mycol.update(&#123;title:&apos;Seven&apos;&#125;, &#123;$inc:&#123;likes:2&#125;&#125;)</div></pre></td></tr></table></figure>
<p><code>$inc</code>表示将<code>likes</code>值加2</p>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</div></pre></td></tr></table></figure>
<p>如果有多个记录，而你只想删除第一条记录，那么就设置 <code>remove()</code> 方法中的 <code>justOne</code> 参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</div></pre></td></tr></table></figure>
<p>如果没有指定删除标准，则 MongoDB 会将集合中所有文档都予以删除。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.remove()</div></pre></td></tr></table></figure>
<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>MongoDB 的查询文档曾介绍过 <code>find()</code> 方法，它可以利用 AND 或 OR 条件来获取想要的字段列表。在 MongoDB 中执行 <code>find()</code> 方法时，显示的是一个文档的所有字段。要想限制，可以利用 0 或 1 来设置字段列表。1 用于显示字段，0 用于隐藏字段。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.find(&#123;&#125;,&#123;KEY:1&#125;)</div></pre></td></tr></table></figure>
<p>假如 mycol 集合拥有下列数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.mycol.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;)</div><div class="line">&#123;&quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</div><div class="line">&#123;&quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123;&quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div></pre></td></tr></table></figure>
<p>注意：在执行 <code>find()</code> 方法时，<code>_id</code> 字段是一直显示的。如果不想显示该字段，则可以将其设为 0。</p>
<h3 id="限制记录"><a href="#限制记录" class="headerlink" title="限制记录"></a>限制记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.find().limit(NUMBER)</div></pre></td></tr></table></figure>
<h3 id="记录排序"><a href="#记录排序" class="headerlink" title="记录排序"></a>记录排序</h3><p>MongoDB 中的文档排序是通过 <code>sort()</code> 方法来实现的。<code>sort()</code> 方法可以通过一些参数来指定要进行排序的字段，并使用 1 和 -1 来指定排序方式，其中 1 表示升序，而 -1 表示降序。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;)</div></pre></td></tr></table></figure>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.ensureIndex(&#123;KEY:1&#125;)</div></pre></td></tr></table></figure>
<p>这里的 key 是想创建索引的字段名称，1 代表按升序排列字段值。-1 代表按降序排列。</p>
<p>获取索引信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.mycol.getIndexes()</div></pre></td></tr></table></figure>
<p>将返回所有索引，包括其名字。</p>
<p>删除索引:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.mycol.dropIndex(&apos;index_name&apos;)</div></pre></td></tr></table></figure>
<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>相当于关系型数据库中的<code>group by</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</div></pre></td></tr></table></figure>
<p>比如有集合:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   _id: ObjectId(7df78ad8902c)</div><div class="line">   title: &apos;MongoDB Overview&apos;, </div><div class="line">   description: &apos;MongoDB is no sql database&apos;,</div><div class="line">   by_user: &apos;tutorials point&apos;,</div><div class="line">   url: &apos;http://www.tutorialspoint.com&apos;,</div><div class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">   likes: 100</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">   _id: ObjectId(7df78ad8902d)</div><div class="line">   title: &apos;NoSQL Overview&apos;, </div><div class="line">   description: &apos;No sql database is very fast&apos;,</div><div class="line">   by_user: &apos;tutorials point&apos;,</div><div class="line">   url: &apos;http://www.tutorialspoint.com&apos;,</div><div class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">   likes: 10</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">   _id: ObjectId(7df78ad8902e)</div><div class="line">   title: &apos;Neo4j Overview&apos;, </div><div class="line">   description: &apos;Neo4j is no sql database&apos;,</div><div class="line">   by_user: &apos;Neo4j&apos;,</div><div class="line">   url: &apos;http://www.neo4j.com&apos;,</div><div class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">   likes: 750</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如想从上述集合中，归纳出一个列表，以显示每个用户写的教程数量，需要像下面这样使用 <code>aggregate()</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</div><div class="line">&#123;</div><div class="line">   &quot;result&quot; : [</div><div class="line">      &#123;</div><div class="line">         &quot;_id&quot; : &quot;tutorials point&quot;,</div><div class="line">         &quot;num_tutorial&quot; : 2</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</div><div class="line">         &quot;num_tutorial&quot; : 1</div><div class="line">      &#125;</div><div class="line">   ],</div><div class="line">   &quot;ok&quot; : 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
<th>范例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$sum</code></td>
<td>对集合中所有文档的定义值进行加和操作</td>
<td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$sum : &quot;$likes&quot;}}}])</code></td>
</tr>
<tr>
<td><code>$avg</code></td>
<td>对集合中所有文档的定义值进行平均值</td>
<td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$avg : &quot;$likes&quot;}}}])</code></td>
</tr>
<tr>
<td><code>$min</code></td>
<td>计算集合中所有文档的对应值中的最小值</td>
<td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$min : &quot;$likes&quot;}}}])</code></td>
</tr>
<tr>
<td><code>$max</code></td>
<td>计算集合中所有文档的对应值中的最大值</td>
<td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, num_tutorial : {$max : &quot;$likes&quot;}}}])</code></td>
</tr>
<tr>
<td><code>$push</code></td>
<td>将值插入到一个结果文档的数组中</td>
<td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$push: &quot;$url&quot;}}}])</code></td>
</tr>
<tr>
<td><code>$addToSet</code></td>
<td>将值插入到一个结果文档的数组中，但不进行复制</td>
<td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, url : {$addToSet : &quot;$url&quot;}}}])</code></td>
</tr>
<tr>
<td><code>$first</code></td>
<td>根据成组方式，从源文档中获取第一个文档。但只有对之前应用过 <code>$sort</code>管道操作符的结果才有意义。</td>
<td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, first_url : {$first : &quot;$url&quot;}}}])</code></td>
</tr>
<tr>
<td><code>$last</code></td>
<td>根据成组方式，从源文档中获取最后一个文档。但只有对之前进行过 <code>$sort</code>管道操作符的结果才有意义。</td>
<td><code>db.mycol.aggregate([{$group : {_id : &quot;$by_user&quot;, last_url : {$last : &quot;$url&quot;}}}])</code></td>
</tr>
</tbody>
</table>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.mycol.findAndModify(</div><div class="line">            &#123;</div><div class="line">            query:&#123;&apos;title&apos;:&apos;Forrest Gump&apos;&#125;,</div><div class="line">            update:&#123;$inc:&#123;likes:10&#125;&#125;</div><div class="line">            &#125;</div><div class="line">              )</div></pre></td></tr></table></figure>
<p><code>query</code>是查找出匹配的文档，和<code>find</code>是一样的，而<code>update</code>则是更新<code>likes</code>这个项目。注意由于MongoDB只支持单个文档的atomic operation，因此如果<code>query</code>出多于一个文档，则只会对第一个文档进行操作。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.mycol.find(&#123;title:/.*b$/&#125;).pretty()</div></pre></td></tr></table></figure>
<p>注意以上匹配都是区分大小写的，如果你要让其不区分大小写，则可以：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.mycol.find(&#123;title:&#123;$regex:&apos;fight.*b&apos;,$options:&apos;$i&apos;&#125;&#125;).pretty()</div></pre></td></tr></table></figure>
<p><code>$i</code>是insensitive的意思。这样的话，即使是小写的fight，也能搜到了。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md" target="_blank" rel="external">MongoDB 极简实践入门</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/mongodb/" target="_blank" rel="external">极客学院 Mongodb 教程</a></li>
<li><a href="https://university.mongodb.com/" target="_blank" rel="external">https://university.mongodb.com/</a></li>
<li><a href="http://docs.mongoing.com/manual-zh/" target="_blank" rel="external">MongoDB 3.2 中文文档</a></li>
<li><a href="https://docs.mongodb.com/manual/tutorial/" target="_blank" rel="external">MongoDB Tutorials</a></li>
<li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/" target="_blank" rel="external">Install MongoDB Community Edition on Windows</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> MongoDB </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dataset简易数据库包使用详解]]></title>
      <url>https://xin053.github.io/2016/11/08/dataset%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%85%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="dataset简介"><a href="#dataset简介" class="headerlink" title="dataset简介"></a>dataset简介</h2><p>dataset号称是为懒人所写的数据库,并说明了很多程序员存储数据都会使用不易查询和更新的CSV和JSON格式，而不是数据库，主要原因是数据库的相关代码比较复杂，而dataset正式解决这个问题，为程序员提供更方便的数据库操作</p>
<p><img src="https://dataset.readthedocs.io/en/latest/_static/dataset-logo.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dataset</div><div class="line"></div><div class="line">db = dataset.connect(<span class="string">'sqlite:///:memory:'</span>)</div><div class="line"></div><div class="line">table = db[<span class="string">'sometable'</span>]</div><div class="line">table.insert(dict(name=<span class="string">'John Doe'</span>, age=<span class="number">37</span>))</div><div class="line">table.insert(dict(name=<span class="string">'Jane Doe'</span>, age=<span class="number">34</span>, gender=<span class="string">'female'</span>))</div><div class="line"></div><div class="line">john = table.find_one(name=<span class="string">'John Doe'</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>Features:</strong></p>
<ul>
<li><strong>Automatic schema</strong>: If a table or column is written that does not exist in the database, it will be created automatically.</li>
<li><strong>Upserts</strong>: Records are either created or updated, depending on whether an existing version can be found.</li>
<li><strong>Query helpers</strong> for simple queries such as <a href="https://dataset.readthedocs.io/en/latest/api.html#dataset.Table.all" target="_blank" rel="external"><code>all</code></a> rows in a table or all <a href="https://dataset.readthedocs.io/en/latest/api.html#dataset.Table.distinct" target="_blank" rel="external"><code>distinct</code></a> values across a set of columns.</li>
<li><strong>Compatibility</strong>: Being built on top of <a href="http://www.sqlalchemy.org/" target="_blank" rel="external">SQLAlchemy</a>, <code>dataset</code> works with all major databases, such as SQLite, PostgreSQL and MySQL.</li>
<li><strong>Scripted exports</strong>: Data can be exported based on a scripted configuration, making the process easy and replicable.</li>
</ul>
<h2 id="dataset使用"><a href="#dataset使用" class="headerlink" title="dataset使用"></a>dataset使用</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> dataset</div><div class="line"></div><div class="line"><span class="comment"># connecting to a SQLite database</span></div><div class="line">db = dataset.connect(<span class="string">'sqlite:///mydatabase.db'</span>)</div><div class="line"><span class="comment"># connecting to a MySQL database with user and password</span></div><div class="line">db = dataset.connect(<span class="string">'mysql://user:password@localhost/mydatabase'</span>)</div><div class="line"><span class="comment"># connecting to a PostgreSQL database</span></div><div class="line">db = dataset.connect(<span class="string">'postgresql://scott:tiger@localhost:5432/mydatabase'</span>)</div></pre></td></tr></table></figure>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>dataset会根据输入自动创建表和字段名</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># get a reference to the table 'user'</span></div><div class="line">table = db[<span class="string">'user'</span>]</div><div class="line"><span class="comment"># table = db.get_table('user')</span></div><div class="line"></div><div class="line"><span class="comment"># Insert a new record.</span></div><div class="line">table.insert(dict(name=<span class="string">'John Doe'</span>, age=<span class="number">46</span>, country=<span class="string">'China'</span>))</div><div class="line"><span class="comment"># dataset will create "missing" columns any time you insert a dict with an unknown key</span></div><div class="line">table.insert(dict(name=<span class="string">'Jane Doe'</span>, age=<span class="number">37</span>, country=<span class="string">'France'</span>, gender=<span class="string">'female'</span>))</div></pre></td></tr></table></figure>
<p>将产生(主键<code>id</code>自动生成):</p>
<table>
<thead>
<tr>
<th>id</th>
<th>country</th>
<th>name</th>
<th>age</th>
<th>gender</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>China</td>
<td>John Doe</td>
<td>46</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>France</td>
<td>Jane Doe</td>
<td>37</td>
<td>female</td>
</tr>
</tbody>
</table>
<h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">table.update(dict(name=<span class="string">'John Doe'</span>, age=<span class="number">47</span>), [<span class="string">'name'</span>])</div></pre></td></tr></table></figure>
<p>第二个参数相当于sql update语句中的<code>where</code>，用来过滤出需要更新的记录</p>
<h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><p>事务操作可以简单的使用上下文管理器来实现,出现异常，将会回滚</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> dataset.connect() <span class="keyword">as</span> tx:</div><div class="line">    tx[<span class="string">'user'</span>].insert(dict(name=<span class="string">'John Doe'</span>, age=<span class="number">46</span>, country=<span class="string">'China'</span>))</div></pre></td></tr></table></figure>
<p>等同于:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db = dataset.connect()</div><div class="line">db.begin()</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    db[<span class="string">'user'</span>].insert(dict(name=<span class="string">'John Doe'</span>, age=<span class="number">46</span>, country=<span class="string">'China'</span>))</div><div class="line">    db.commit()</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    db.rollback()</div></pre></td></tr></table></figure>
<p>也可以嵌套使用:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db = dataset.connect()</div><div class="line"><span class="keyword">with</span> db <span class="keyword">as</span> tx1:</div><div class="line">    tx1[<span class="string">'user'</span>].insert(dict(name=<span class="string">'John Doe'</span>, age=<span class="number">46</span>, country=<span class="string">'China'</span>))</div><div class="line">    <span class="keyword">with</span> db <span class="keyword">as</span> tx2:</div><div class="line">        tx2[<span class="string">'user'</span>].insert(dict(name=<span class="string">'Jane Doe'</span>, age=<span class="number">37</span>, country=<span class="string">'France'</span>, gender=<span class="string">'female'</span>))</div></pre></td></tr></table></figure>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(db)</div><div class="line">&lt;Database(sqlite:///mydatabase.db)&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(db.tables)</div><div class="line">[<span class="string">'user'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(db[<span class="string">'user'</span>].columns)</div><div class="line">[<span class="string">'id'</span>, <span class="string">'country'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'gender'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(len(db[<span class="string">'user'</span>]))</div><div class="line"><span class="number">2</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>table = db[<span class="string">'user'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>table</div><div class="line">&lt;Table(user)&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>table.table</div><div class="line">Table(<span class="string">'user'</span>, MetaData(bind=Engine(sqlite:///mydatabase.db)), Column(<span class="string">'id'</span>, INTEGER(), table=&lt;user&gt;, primary_key=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>), Column(<span class="string">'country'</span>, TEXT(), table=&lt;user&gt;), Column(<span class="string">'name'</span>, TEXT(), table=&lt;user&gt;), Column(<span class="string">'age'</span>, INTEGER(), table=&lt;user&gt;), Column(<span class="string">'gender'</span>, TEXT(), table=&lt;user&gt;), schema=<span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<h3 id="从表获取数据"><a href="#从表获取数据" class="headerlink" title="从表获取数据"></a>从表获取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>users = db[<span class="string">'user'</span>].all()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>users</div><div class="line">&lt;dataset.persistence.util.ResultIter at <span class="number">0x157c27ef978</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> user <span class="keyword">in</span> db[<span class="string">'user'</span>]:</div><div class="line">        print(user[<span class="string">'age'</span>])</div><div class="line">OrderedDict([(<span class="string">'id'</span>, <span class="number">1</span>), (<span class="string">'country'</span>, <span class="string">'China'</span>), (<span class="string">'name'</span>, <span class="string">'John Doe'</span>), (<span class="string">'age'</span>, <span class="number">47</span>), (<span class="string">'gender'</span>, <span class="keyword">None</span>)])</div><div class="line">OrderedDict([(<span class="string">'id'</span>, <span class="number">2</span>), (<span class="string">'country'</span>, <span class="string">'France'</span>), (<span class="string">'name'</span>, <span class="string">'Jane Doe'</span>), (<span class="string">'age'</span>, <span class="number">37</span>), (<span class="string">'gender'</span>, <span class="string">'female'</span>)])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>chinese_users = table.find(country=<span class="string">'China'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>chinese_users</div><div class="line">&lt;dataset.persistence.util.ResultIter at <span class="number">0x157c2816978</span>&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>john = table.find_one(name=<span class="string">'John Doe'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>john</div><div class="line">OrderedDict([(<span class="string">'id'</span>, <span class="number">1</span>),</div><div class="line">             (<span class="string">'country'</span>, <span class="string">'China'</span>),</div><div class="line">             (<span class="string">'name'</span>, <span class="string">'John Doe'</span>),</div><div class="line">             (<span class="string">'age'</span>, <span class="number">47</span>),</div><div class="line">             (<span class="string">'gender'</span>, <span class="keyword">None</span>)])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>elderly_users = table.find(table.table.columns.age &gt;= <span class="number">70</span>)</div></pre></td></tr></table></figure>
<p>获取非重复数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Get one user per country</span></div><div class="line">db[<span class="string">'user'</span>].distinct(<span class="string">'country'</span>)</div></pre></td></tr></table></figure>
<h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">table.delete(place=<span class="string">'Berlin'</span>)</div></pre></td></tr></table></figure>
<h3 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">result = db.query(<span class="string">'SELECT country, COUNT(*) c FROM user GROUP BY country'</span>)</div><div class="line"><span class="keyword">for</span> row <span class="keyword">in</span> result:</div><div class="line">   print(row[<span class="string">'country'</span>], row[<span class="string">'c'</span>])</div></pre></td></tr></table></figure>
<h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># export all users into a single JSON</span></div><div class="line">result = db[<span class="string">'users'</span>].all()</div><div class="line">dataset.freeze(result, format=<span class="string">'json'</span>, filename=<span class="string">'users.json'</span>)</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://dataset.readthedocs.io/en/latest/" target="_blank" rel="external">dataset官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> dataset </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PyMySQL库使用详解]]></title>
      <url>https://xin053.github.io/2016/11/06/PyMySQL%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="PyMySQL简介"><a href="#PyMySQL简介" class="headerlink" title="PyMySQL简介"></a>PyMySQL简介</h2><p>一个比较方便的连接mysql使用的python库，官网给的例子很简单，但是看下源码发现内容还是很多的，很多函数都没有介绍，所以只有在使用的时候查看源代码了。从github上该项目所获得的星数来看，该库还是很出名的。</p>
<a id="more"></a>
<h2 id="PyMySQL使用"><a href="#PyMySQL使用" class="headerlink" title="PyMySQL使用"></a>PyMySQL使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql.cursors</div><div class="line"></div><div class="line"><span class="comment"># Connect to the database</span></div><div class="line">connection = pymysql.connect(host=<span class="string">'localhost'</span>,</div><div class="line">                             user=<span class="string">'user'</span>,</div><div class="line">                             password=<span class="string">'passwd'</span>,</div><div class="line">                             db=<span class="string">'db'</span>,</div><div class="line">                             charset=<span class="string">'utf8mb4'</span>,</div><div class="line">                             cursorclass=pymysql.cursors.DictCursor)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</div><div class="line">        <span class="comment"># Create a new record</span></div><div class="line">        sql = <span class="string">"INSERT INTO `users` (`email`, `password`) VALUES (%s, %s)"</span></div><div class="line">        cursor.execute(sql, (<span class="string">'webmaster@python.org'</span>, <span class="string">'very-secret'</span>))</div><div class="line"></div><div class="line">    <span class="comment"># connection is not autocommit by default. So you must commit to save</span></div><div class="line">    <span class="comment"># your changes.</span></div><div class="line">    connection.commit()</div><div class="line"></div><div class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</div><div class="line">        <span class="comment"># Read a single record</span></div><div class="line">        sql = <span class="string">"SELECT `id`, `password` FROM `users` WHERE `email`=%s"</span></div><div class="line">        cursor.execute(sql, (<span class="string">'webmaster@python.org'</span>,))</div><div class="line">        result = cursor.fetchone()</div><div class="line">        print(result)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    connection.close()</div></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'password'</span>: <span class="string">'very-secret'</span>, <span class="string">'id'</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://pymysql.readthedocs.io/" target="_blank" rel="external">PyMySQL官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyMySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[geopy地理查询库使用详解]]></title>
      <url>https://xin053.github.io/2016/11/06/geopy%E5%9C%B0%E7%90%86%E6%9F%A5%E8%AF%A2%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="geopy简介"><a href="#geopy简介" class="headerlink" title="geopy简介"></a>geopy简介</h2><p>可以使用geopy库来查询地址，国家，城市，地标，geopy使用的是第三方的geo解析器(包括谷歌地图，必应地图，Nominatim等)和一些数据源来获取地理信息</p>
<p>Each geolocation service you might use, such as Google Maps, Bing Maps, or Yahoo BOSS, has its own class in <code>geopy.geocoders</code> abstracting the service’s API. Geocoders each define at least a<code>geocode</code> method, for resolving a location from a string, and may define a <code>reverse</code> method, which resolves a pair of coordinates to an address.</p>
<a id="more"></a>
<h2 id="geopy使用"><a href="#geopy使用" class="headerlink" title="geopy使用"></a>geopy使用</h2><h3 id="从地址字符串获取Location对象"><a href="#从地址字符串获取Location对象" class="headerlink" title="从地址字符串获取Location对象"></a>从地址字符串获取<code>Location</code>对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> geopy.geocoders <span class="keyword">import</span> Nominatim</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>geolocator = Nominatim()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>location = geolocator.geocode(<span class="string">"175 5th Avenue NYC"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(location.address)</div><div class="line">Flatiron Building, <span class="number">175</span>, <span class="number">5</span>th Avenue, Flatiron, New York, NYC, New York, ...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print((location.latitude, location.longitude))</div><div class="line">(<span class="number">40.7410861</span>, <span class="number">-73.9896297241625</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(location.raw)</div><div class="line">&#123;<span class="string">'place_id'</span>: <span class="string">'9167009604'</span>, <span class="string">'type'</span>: <span class="string">'attraction'</span>, ...&#125;</div></pre></td></tr></table></figure>
<h3 id="从经纬度获取Location对象"><a href="#从经纬度获取Location对象" class="headerlink" title="从经纬度获取Location对象"></a>从经纬度获取<code>Location</code>对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> geopy.geocoders <span class="keyword">import</span> Nominatim</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>geolocator = Nominatim()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>location = geolocator.reverse(<span class="string">"52.509669, 13.376294"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(location.address)</div><div class="line">Potsdamer Platz, Mitte, Berlin, <span class="number">10117</span>, Deutschland, European Union</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print((location.latitude, location.longitude))</div><div class="line">(<span class="number">52.5094982</span>, <span class="number">13.3765983</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(location.raw)</div><div class="line">&#123;<span class="string">'place_id'</span>: <span class="string">'654513'</span>, <span class="string">'osm_type'</span>: <span class="string">'node'</span>, ...&#125;</div></pre></td></tr></table></figure>
<h3 id="计算两点间距离"><a href="#计算两点间距离" class="headerlink" title="计算两点间距离"></a>计算两点间距离</h3><p>可以使用  <a href="https://en.wikipedia.org/wiki/Vincenty&#39;s_formulae" target="_blank" rel="external">Vincenty distance</a> 或 <a href="https://en.wikipedia.org/wiki/Great-circle_distance" target="_blank" rel="external">great-circle distance</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> geopy.distance <span class="keyword">import</span> vincenty</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>newport_ri = (<span class="number">41.49008</span>, <span class="number">-71.312796</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cleveland_oh = (<span class="number">41.499498</span>, <span class="number">-81.695391</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(vincenty(newport_ri, cleveland_oh).miles)</div><div class="line"><span class="number">538.3904451566326</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> geopy.distance <span class="keyword">import</span> great_circle</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>newport_ri = (<span class="number">41.49008</span>, <span class="number">-71.312796</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cleveland_oh = (<span class="number">41.499498</span>, <span class="number">-81.695391</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(great_circle(newport_ri, cleveland_oh).miles)</div><div class="line"><span class="number">537.1485284062816</span></div></pre></td></tr></table></figure>
<h2 id="各三方地理服务API"><a href="#各三方地理服务API" class="headerlink" title="各三方地理服务API"></a>各三方地理服务API</h2><h3 id="ArcGIS"><a href="#ArcGIS" class="headerlink" title="ArcGIS"></a>ArcGIS</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.ArcGIS</code>(<em>username=None</em>, <em>password=None</em>, <em>referer=None</em>, <em>token_lifetime=60</em>,<em>scheme=’https’</em>, <em>timeout=1</em>, <em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.ArcGIS" target="_blank" rel="external">参数详解</a></p>
<h3 id="Baidu"><a href="#Baidu" class="headerlink" title="Baidu"></a>Baidu</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.Baidu</code>(<em>api_key</em>, <em>scheme=’http’</em>, <em>timeout=1</em>, <em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.Baidu" target="_blank" rel="external">参数详解</a></p>
<h3 id="Bing"><a href="#Bing" class="headerlink" title="Bing"></a>Bing</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.Bing</code>(<em>api_key</em>, <em>format_string=’%s’</em>, <em>scheme=’https’</em>, <em>timeout=1</em>, <em>proxies=None</em>,<em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.Bing" target="_blank" rel="external">参数详解</a></p>
<h3 id="DataBC"><a href="#DataBC" class="headerlink" title="DataBC"></a>DataBC</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.DataBC</code>(<em>scheme=’https’</em>, <em>timeout=1</em>, <em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.DataBC" target="_blank" rel="external">参数详解</a></p>
<h3 id="GeocodeFarm"><a href="#GeocodeFarm" class="headerlink" title="GeocodeFarm"></a>GeocodeFarm</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.GeocodeFarm</code>(<em>api_key=None</em>, <em>format_string=’%s’</em>, <em>timeout=1</em>, <em>proxies=None</em>,<em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.GeocodeFarm" target="_blank" rel="external">参数详解</a></p>
<h3 id="GeocoderDotUS"><a href="#GeocoderDotUS" class="headerlink" title="GeocoderDotUS"></a>GeocoderDotUS</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.GeocoderDotUS</code>(<em>username=None</em>, <em>password=None</em>, <em>format_string=’%s’</em>,<em>timeout=1</em>, <em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.GeocoderDotUS" target="_blank" rel="external">参数详解</a></p>
<h3 id="GeoNames"><a href="#GeoNames" class="headerlink" title="GeoNames"></a>GeoNames</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.GeoNames</code>(<em>country_bias=None</em>, <em>username=None</em>, <em>timeout=1</em>, <em>proxies=None</em>,<em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.GeoNames" target="_blank" rel="external">参数详解</a></p>
<h3 id="GoogleV3"><a href="#GoogleV3" class="headerlink" title="GoogleV3"></a>GoogleV3</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.GoogleV3</code>(<em>api_key=None</em>, <em>domain=’maps.googleapis.com’</em>, <em>scheme=’https’</em>,<em>client_id=None</em>, <em>secret_key=None</em>, <em>timeout=1</em>, <em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.GoogleV3" target="_blank" rel="external">参数详解</a></p>
<h3 id="IGNFrance"><a href="#IGNFrance" class="headerlink" title="IGNFrance"></a>IGNFrance</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.IGNFrance</code>(<em>api_key</em>, <em>username=None</em>, <em>password=None</em>, <em>referer=None</em>,<em>domain=’wxs.ign.fr’</em>, <em>scheme=’https’</em>, <em>timeout=1</em>, <em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.IGNFrance" target="_blank" rel="external">参数详解</a></p>
<h3 id="LiveAddress"><a href="#LiveAddress" class="headerlink" title="LiveAddress"></a>LiveAddress</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.LiveAddress</code>(<em>auth_id</em>, <em>auth_token</em>, <em>candidates=1</em>, <em>scheme=’https’</em>, <em>timeout=1</em>,<em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.LiveAddress" target="_blank" rel="external">参数详解</a></p>
<h3 id="NaviData"><a href="#NaviData" class="headerlink" title="NaviData"></a>NaviData</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.NaviData</code>(<em>api_key=None</em>, <em>domain=’api.navidata.pl’</em>, <em>timeout=1</em>, <em>proxies=None</em>,<em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.NaviData" target="_blank" rel="external">参数详解</a></p>
<h3 id="Nominatim"><a href="#Nominatim" class="headerlink" title="Nominatim"></a>Nominatim</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.Nominatim</code>(<em>format_string=’%s’</em>, <em>view_box=None</em>, <em>country_bias=None</em>, <em>timeout=1</em>,<em>proxies=None</em>, <em>domain=’nominatim.openstreetmap.org’</em>, <em>scheme=’https’</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.Nominatim" target="_blank" rel="external">参数详解</a></p>
<h3 id="OpenCage"><a href="#OpenCage" class="headerlink" title="OpenCage"></a>OpenCage</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.OpenCage</code>(<em>api_key</em>, <em>domain=’api.opencagedata.com’</em>, <em>scheme=’https’</em>, <em>timeout=1</em>,<em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.OpenCage" target="_blank" rel="external">参数详解</a></p>
<h3 id="OpenMapQuest"><a href="#OpenMapQuest" class="headerlink" title="OpenMapQuest"></a>OpenMapQuest</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.OpenMapQuest</code>(<em>api_key=None</em>, <em>format_string=’%s’</em>, <em>scheme=’https’</em>, <em>timeout=1</em>,<em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.OpenMapQuest" target="_blank" rel="external">参数详解</a></p>
<h3 id="Photon"><a href="#Photon" class="headerlink" title="Photon"></a>Photon</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.Photon</code>(<em>format_string=’%s’</em>, <em>scheme=’https’</em>, <em>timeout=1</em>, <em>proxies=None</em>,<em>domain=’photon.komoot.de’</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.Photon" target="_blank" rel="external">参数详解</a></p>
<h3 id="YahooPlaceFinder"><a href="#YahooPlaceFinder" class="headerlink" title="YahooPlaceFinder"></a>YahooPlaceFinder</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.YahooPlaceFinder</code>(<em>consumer_key</em>, <em>consumer_secret</em>, <em>timeout=1</em>, <em>proxies=None</em>,<em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.YahooPlaceFinder" target="_blank" rel="external">参数详解</a></p>
<h3 id="What3Words"><a href="#What3Words" class="headerlink" title="What3Words"></a>What3Words</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.What3Words</code>(<em>api_key</em>, <em>format_string=’%s’</em>, <em>scheme=’https’</em>, <em>timeout=1</em>,<em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.What3Words" target="_blank" rel="external">参数详解</a></p>
<h3 id="Yandex"><a href="#Yandex" class="headerlink" title="Yandex"></a>Yandex</h3><blockquote>
<p><em>class</em><code>geopy.geocoders.Yandex</code>(<em>api_key=None</em>, <em>lang=None</em>, <em>timeout=1</em>, <em>proxies=None</em>, <em>user_agent=None</em>)</p>
</blockquote>
<p><a href="https://geopy.readthedocs.io/en/latest/#geopy.geocoders.Yandex" target="_blank" rel="external">参数详解</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://geopy.readthedocs.io/en/latest/" target="_blank" rel="external">geogy官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> geopy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[moviepy视频处理库使用详解]]></title>
      <url>https://xin053.github.io/2016/11/05/moviepy%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="moviepy简介"><a href="#moviepy简介" class="headerlink" title="moviepy简介"></a>moviepy简介</h2><p>moviepy能够对音频，视频，以及git图片进行剪切，合并，标题插入等处理，并支持多种格式。</p>
<p><img src="https://zulko.github.io/moviepy/_images/logo.png" alt=""></p>
<p>moviepy也是基于ffmpeg，如果没有安装ffmpeg，moviepy会在第一次使用moviepy的时候自动下载安装ffmpeg，如果本机安装有ffmpeg，建议修改<code>config_defaults.py</code>文件中的配置为<code>FFMPEG_BINARY = &#39;auto-detect&#39;</code></p>
<p>至于其他工具，则是对应相应的工具自行决定要不要安装，比如增加文字需要<a href="http://www.imagemagick.org/script/index.php" target="_blank" rel="external">ImageMagick</a>，预览音频和视频需要<a href="http://www.pygame.org/download.shtml" target="_blank" rel="external">PyGame</a></p>
<a id="more"></a>
<h2 id="moviepy使用"><a href="#moviepy使用" class="headerlink" title="moviepy使用"></a>moviepy使用</h2><p>moviepy的核心对象是<code>clips</code>，可以是<code>AudioClips</code> 或 <code>VideoClips</code></p>
<h3 id="create-clips"><a href="#create-clips" class="headerlink" title="create clips"></a>create clips</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># VIDEO CLIPS</span></div><div class="line">clip = VideoClip(make_frame, duration=<span class="number">4</span>) <span class="comment"># for custom animations (see below)</span></div><div class="line">clip = VideoFileClip(<span class="string">"my_video_file.mp4"</span>) <span class="comment"># or .avi, .webm, .gif ...</span></div><div class="line">clip = ImageSequenceClip([<span class="string">'image_file1.jpeg'</span>, ...], fps=<span class="number">24</span>)</div><div class="line">clip = ImageClip(<span class="string">"my_picture.png"</span>) <span class="comment"># or .jpeg, .tiff, ...</span></div><div class="line">clip = TextClip(<span class="string">"Hello !"</span>, font=<span class="string">"Amiri-Bold"</span>, fontsize=<span class="number">70</span>, color=<span class="string">"black"</span>)</div><div class="line">clip = ColorClip(size=(<span class="number">460</span>,<span class="number">380</span>), color=[R,G,B])</div><div class="line"></div><div class="line"><span class="comment"># AUDIO CLIPS</span></div><div class="line">clip = AudioFileClip(<span class="string">"my_audiofile.mp3"</span>) <span class="comment"># or .ogg, .wav... or a video !</span></div><div class="line">clip = AudioArrayClip(numpy_array, fps=<span class="number">44100</span>) <span class="comment"># from a numerical array</span></div><div class="line">clip = AudioClip(make_frame, duration=<span class="number">3</span>) <span class="comment"># uses a function make_frame(t)</span></div></pre></td></tr></table></figure>
<h3 id="VideoClip"><a href="#VideoClip" class="headerlink" title="VideoClip"></a>VideoClip</h3><p><strong><code>VideoClip</code> is the base class for all the other video clips in MoviePy. If all you want is to edit video files, you will never need it. This class is practical when you want to make animations from frames that are generated by another library.</strong> All you need is to define a function <code>make_frame(t)</code> which returns a HxWx3 numpy array (of 8-bits integers) representing the frame at time t. Here is an example with the graphics library <code>Gizeh</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> gizeh</div><div class="line"><span class="keyword">import</span> moviepy.editor <span class="keyword">as</span> mpy</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_frame</span><span class="params">(t)</span>:</span></div><div class="line">    surface = gizeh.Surface(<span class="number">128</span>,<span class="number">128</span>) <span class="comment"># width, height</span></div><div class="line">    radius = W*(<span class="number">1</span>+ (t*(<span class="number">2</span>-t))**<span class="number">2</span> )/<span class="number">6</span> <span class="comment"># the radius varies over time</span></div><div class="line">    circle = gizeh.circle(radius, xy = (<span class="number">64</span>,<span class="number">64</span>), fill=(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>))</div><div class="line">    circle.draw(surface)</div><div class="line">    <span class="keyword">return</span> surface.get_npimage() <span class="comment"># returns a 8-bit RGB array</span></div><div class="line"></div><div class="line">clip = mpy.VideoClip(make_frame, duration=<span class="number">2</span>) <span class="comment"># 2 seconds</span></div><div class="line">clip.write_gif(<span class="string">"circle.gif"</span>,fps=<span class="number">15</span>)</div></pre></td></tr></table></figure>
<p><img src="https://zulko.github.io/moviepy/_images/circle.gif" alt=""></p>
<h3 id="ImageSequenceClip"><a href="#ImageSequenceClip" class="headerlink" title="ImageSequenceClip"></a>ImageSequenceClip</h3><p>This is a clip made from a series of images, you call it with:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clip = ImageSequenceClip(images_list, fps=<span class="number">25</span>)</div></pre></td></tr></table></figure>
<p>where <code>images_list</code> can be either a list of image names (that will be <em>played</em>) in that order, a folder name (at which case all the image files in the folder will be played in alphanumerical order), or a list of frames (Numpy arrays), obtained for instance from other clips.</p>
<h3 id="TextClip"><a href="#TextClip" class="headerlink" title="TextClip"></a>TextClip</h3><p>Generating a TextClip requires to have ImageMagick installed and (for windows users) linked to MoviePy</p>
<h3 id="Exporting-video-clips"><a href="#Exporting-video-clips" class="headerlink" title="Exporting video clips"></a>Exporting video clips</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">my_clip.write_videofile(<span class="string">"movie.mp4"</span>) <span class="comment"># default codec: 'libx264', 24 fps</span></div><div class="line">my_clip.write_videofile(<span class="string">"movie.mp4"</span>,fps=<span class="number">15</span>)</div><div class="line">my_clip.write_videofile(<span class="string">"movie.webm"</span>) <span class="comment"># webm format</span></div><div class="line">my_clip.write_videofile(<span class="string">"movie.webm"</span>,audio=<span class="keyword">False</span>) <span class="comment"># don't render audio.</span></div></pre></td></tr></table></figure>
<p>Sometimes it is impossible for MoviePy to guess the <code>duration</code> attribute of the clip (keep in mind that some clips, like ImageClips displaying a picture, have <em>a priori</em> an infinite duration). Then, the <code>duration</code>must be set manually with <code>clip.set_duration</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Make a video showing a flower for 5 seconds</span></div><div class="line">my_clip = Image(<span class="string">"flower.jpeg"</span>) <span class="comment"># has infinite duration</span></div><div class="line">my_clip.write_videofile(<span class="string">"flower.mp4"</span>) <span class="comment"># Will fail ! NO DURATION !</span></div><div class="line">my_clip.set_duration(<span class="number">5</span>).write_videofile(<span class="string">"flower.mp4"</span>) <span class="comment"># works !</span></div></pre></td></tr></table></figure>
<p>To write your video as an animated GIF, use</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">my_clip.write_gif(<span class="string">'test.gif'</span>, fps=<span class="number">12</span>)</div></pre></td></tr></table></figure>
<p>You can write a frame to an image file with</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">myclip.save_frame(<span class="string">"frame.png"</span>) <span class="comment"># by default the first frame is extracted</span></div><div class="line">myclip.save_frame(<span class="string">"frame.jpeg"</span>, t=<span class="string">'01:00:00'</span>) <span class="comment"># frame at time t=1h</span></div></pre></td></tr></table></figure>
<h3 id="concatenating-clips"><a href="#concatenating-clips" class="headerlink" title="concatenating clips"></a>concatenating clips</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip, concatenate_videoclips</div><div class="line">clip1 = VideoFileClip(<span class="string">"myvideo.mp4"</span>)</div><div class="line">clip2 = VideoFileClip(<span class="string">"myvideo2.mp4"</span>).subclip(<span class="number">50</span>,<span class="number">60</span>)</div><div class="line">clip3 = VideoFileClip(<span class="string">"myvideo3.mp4"</span>)</div><div class="line">final_clip = concatenate_videoclips([clip1,clip2,clip3])</div><div class="line">final_clip.write_videofile(<span class="string">"my_concatenation.mp4"</span>)</div></pre></td></tr></table></figure>
<p><code>CompositeVideoClips</code>也能合并<code>clips</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">video = CompositeVideoClip([clip1,clip2,clip3], size=(<span class="number">720</span>,<span class="number">460</span>))</div></pre></td></tr></table></figure>
<h3 id="Clips-transformations-and-effects"><a href="#Clips-transformations-and-effects" class="headerlink" title="Clips transformations and effects"></a>Clips transformations and effects</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> *</div><div class="line">clip = (VideoFileClip(<span class="string">"myvideo.avi"</span>)</div><div class="line">        .fx( vfx.resize, width=<span class="number">460</span>) <span class="comment"># resize (keep aspect ratio)</span></div><div class="line">        .fx( vfx.speedx, <span class="number">2</span>) <span class="comment"># double the speed</span></div><div class="line">        .fx( vfx.colorx, <span class="number">0.5</span>)) <span class="comment"># darken the picture</span></div></pre></td></tr></table></figure>
<h2 id="Example-Scripts"><a href="#Example-Scripts" class="headerlink" title="Example Scripts"></a>Example Scripts</h2><p><a href="https://zulko.github.io/moviepy/examples/examples.html" target="_blank" rel="external">https://zulko.github.io/moviepy/examples/examples.html</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://zulko.github.io/moviepy/index.html" target="_blank" rel="external">moviepy官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> moviepy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pydub音频处理库使用详解]]></title>
      <url>https://xin053.github.io/2016/11/05/pydub%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="pydub简介"><a href="#pydub简介" class="headerlink" title="pydub简介"></a>pydub简介</h2><p>pydub是基于<a href="https://ffmpeg.org/" target="_blank" rel="external">ffmpeg</a>,有关ffmpeg的介绍，可以看下<a href="http://baike.baidu.com/link?url=78zpGld0iPuvNeATHUpY1ug3h0RkskDgIkuwO1MR_jFBjy2ycV0C77uxcSeAhYJ2gINKNwrYZ5bBPfYW5D5-jK" target="_blank" rel="external">百度百科</a>,windows下安装完ffmpeg之后配置其<code>bin</code>目录到<code>PATH</code></p>
<h2 id="pydub使用"><a href="#pydub使用" class="headerlink" title="pydub使用"></a>pydub使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</div><div class="line"></div><div class="line">song = AudioSegment.from_wav(<span class="string">"never_gonna_give_you_up.wav"</span>)</div><div class="line">song = AudioSegment.from_mp3(<span class="string">"never_gonna_give_you_up.mp3"</span>)</div><div class="line">ogg_version = AudioSegment.from_ogg(<span class="string">"never_gonna_give_you_up.ogg"</span>)</div><div class="line">flv_version = AudioSegment.from_flv(<span class="string">"never_gonna_give_you_up.flv"</span>)</div><div class="line"></div><div class="line">mp4_version = AudioSegment.from_file(<span class="string">"never_gonna_give_you_up.mp4"</span>, <span class="string">"mp4"</span>)</div><div class="line">wma_version = AudioSegment.from_file(<span class="string">"never_gonna_give_you_up.wma"</span>, <span class="string">"wma"</span>)</div><div class="line">aac_version = AudioSegment.from_file(<span class="string">"never_gonna_give_you_up.aiff"</span>, <span class="string">"aac"</span>)</div></pre></td></tr></table></figure>
<p>通过以上方法可以从不同格式的音频和视频文件中获取<code>AudioSegment</code>对象,进而对其进行一系列处理</p>
<a id="more"></a>
<h3 id="Slice-audio"><a href="#Slice-audio" class="headerlink" title="Slice audio"></a>Slice audio</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pydub does things in milliseconds</span></div><div class="line">ten_seconds = <span class="number">10</span> * <span class="number">1000</span></div><div class="line"></div><div class="line">first_10_seconds = song[:ten_seconds]</div><div class="line"></div><div class="line">last_5_seconds = song[<span class="number">-5000</span>:]</div></pre></td></tr></table></figure>
<h3 id="Make-the-beginning-louder-and-the-end-quieter"><a href="#Make-the-beginning-louder-and-the-end-quieter" class="headerlink" title="Make the beginning louder and the end quieter"></a>Make the beginning louder and the end quieter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># boost volume by 6dB</span></div><div class="line">beginning = first_10_seconds + <span class="number">6</span></div><div class="line"></div><div class="line"><span class="comment"># reduce volume by 3dB</span></div><div class="line">end = last_5_seconds - <span class="number">3</span></div></pre></td></tr></table></figure>
<h3 id="Concatenate-audio-add-one-file-to-the-end-of-another"><a href="#Concatenate-audio-add-one-file-to-the-end-of-another" class="headerlink" title="Concatenate audio (add one file to the end of another)"></a>Concatenate audio (add one file to the end of another)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">without_the_middle = beginning + end</div></pre></td></tr></table></figure>
<h3 id="AudioSegments-are-immutable"><a href="#AudioSegments-are-immutable" class="headerlink" title="AudioSegments are immutable"></a>AudioSegments are immutable</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># song is not modified</span></div><div class="line">backwards = song.reverse()</div></pre></td></tr></table></figure>
<p>将获取一个新的<code>AudioSegment</code>对象</p>
<h3 id="Save-the-results-again-whatever-ffmpeg-supports"><a href="#Save-the-results-again-whatever-ffmpeg-supports" class="headerlink" title="Save the results (again whatever ffmpeg supports)"></a>Save the results (again whatever ffmpeg supports)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">awesome.export(<span class="string">"mashup.mp3"</span>, format=<span class="string">"mp3"</span>)</div><div class="line">awesome.export(<span class="string">"mashup.mp3"</span>, format=<span class="string">"mp3"</span>, tags=&#123;<span class="string">'artist'</span>: <span class="string">'Various artists'</span>, <span class="string">'album'</span>: <span class="string">'Best of 2011'</span>, <span class="string">'comments'</span>: <span class="string">'This album is awesome!'</span>&#125;)</div><div class="line">awesome.export(<span class="string">"mashup.mp3"</span>, format=<span class="string">"mp3"</span>, bitrate=<span class="string">"192k"</span>)</div></pre></td></tr></table></figure>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="将目录下的所有mp4文件和flv文件转换为mp3"><a href="#将目录下的所有mp4文件和flv文件转换为mp3" class="headerlink" title="将目录下的所有mp4文件和flv文件转换为mp3"></a>将目录下的所有mp4文件和flv文件转换为mp3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> glob</div><div class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</div><div class="line"></div><div class="line">video_dir = <span class="string">'/home/johndoe/downloaded_videos/'</span>  <span class="comment"># Path where the videos are located</span></div><div class="line">extension_list = (<span class="string">'*.mp4'</span>, <span class="string">'*.flv'</span>)</div><div class="line"></div><div class="line">os.chdir(video_dir) <span class="comment"># change the workplace</span></div><div class="line"><span class="keyword">for</span> extension <span class="keyword">in</span> extension_list:</div><div class="line">    <span class="keyword">for</span> video <span class="keyword">in</span> glob.glob(extension):</div><div class="line">        mp3_filename = os.path.splitext(os.path.basename(video))[<span class="number">0</span>] + <span class="string">'.mp3'</span></div><div class="line">        AudioSegment.from_file(video).export(mp3_filename, format=<span class="string">'mp3'</span>)</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://github.com/jiaaro/pydub" target="_blank" rel="external">pydub官方文档</a></li>
<li><a href="https://github.com/jiaaro/pydub/blob/master/API.markdown" target="_blank" rel="external">pydub API Documentation</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> pydub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scala学习笔记(一)]]></title>
      <url>https://xin053.github.io/2016/11/04/Scala%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="初识Scala"><a href="#初识Scala" class="headerlink" title="初识Scala"></a>初识Scala</h2><p>Scala是纯面对对象语言:<strong>every value is an object and every operation is a method call</strong><br>For example, when you say <code>1 + 2</code> in Scala, you are actually invoking a method named <code>+</code> defined in class Int.</p>
<p><img src="http://www.scala-lang.org/resources/img/smooth-spiral.png" alt=""></p>
<a id="more"></a>
<h2 id="交互式Scala"><a href="#交互式Scala" class="headerlink" title="交互式Scala"></a>交互式Scala</h2><h3 id="使用-var-定义变量"><a href="#使用-var-定义变量" class="headerlink" title="使用 var 定义变量"></a>使用 <code>var</code> 定义变量</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> msg1 = <span class="string">"Hello"</span></div><div class="line">msg1: <span class="type">String</span> = <span class="type">Hello</span></div></pre></td></tr></table></figure>
<h3 id="交互式环境下的回退"><a href="#交互式环境下的回退" class="headerlink" title="交互式环境下的回退"></a>交互式环境下的回退</h3><p>多行代码情况下，scala左边会有竖杠表示代码仍在继续，如果发现代码有问题，可以按下两次回车开始新的命令</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="keyword">var</span> msg1 =</div><div class="line">     |</div><div class="line">     |</div><div class="line"><span class="type">You</span> typed two blank lines.  <span class="type">Starting</span> a <span class="keyword">new</span> command.</div></pre></td></tr></table></figure>
<h3 id="使用def定义函数"><a href="#使用def定义函数" class="headerlink" title="使用def定义函数"></a>使用<code>def</code>定义函数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">		 <span class="keyword">if</span> (x &gt; y) x</div><div class="line">		 <span class="keyword">else</span> y</div><div class="line">       &#125;</div><div class="line">max: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></div></pre></td></tr></table></figure>
<p>如果函数没有返回值，并且函数体可以简写为一行，那么可以如下简写:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = <span class="keyword">if</span> (x &gt; y) x <span class="keyword">else</span> y</div><div class="line">max: (x: <span class="type">Int</span>, y: <span class="type">Int</span>)<span class="type">Int</span></div></pre></td></tr></table></figure>
<p>没有返回值的函数,也就是函数返回<code>void</code>，在Scala中会被成为<code>Unit</code>类型</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="function"><span class="keyword">def</span> <span class="title">greet</span></span>() = println(<span class="string">"Hello, world!"</span>)</div><div class="line">greet: ()<span class="type">Unit</span></div></pre></td></tr></table></figure>
<p>使用<code>:q</code>或者<code>:quit</code>退出交互式环境</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scala&gt; :q</div><div class="line"></div><div class="line"><span class="type">C</span>:\<span class="type">WINDOWS</span>\system32&gt;</div></pre></td></tr></table></figure>
<h2 id="初识循环"><a href="#初识循环" class="headerlink" title="初识循环"></a>初识循环</h2><p>Scala不仅可以在交互环境运行，也可以以脚本运行,我们创建<code>test.scala</code>文件，并写入:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach(arg =&gt; println(arg))</div></pre></td></tr></table></figure>
<p><code>args</code>为用户输入的参数列表,<code>foreach</code>语法的使用也很好理解</p>
<p>当我们执行:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scala test.scala Concise is nice</div></pre></td></tr></table></figure>
<p>将会看到一下输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Concise</div><div class="line">is</div><div class="line">nice</div></pre></td></tr></table></figure>
<p>上述方式中,Scala解释器能够根据<code>args</code>的元素基础类型猜出<code>arg</code>的类型，更明确表示类型的方式如下:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach((arg: <span class="type">String</span>) =&gt; println(arg))</div></pre></td></tr></table></figure>
<p>当然也有更简单的写法:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">args.foreach(println)</div></pre></td></tr></table></figure>
<p>也可以使用<code>for</code>循环:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (arg &lt;- args)</div><div class="line">  println(arg)</div></pre></td></tr></table></figure>
<h2 id="初识Array"><a href="#初识Array" class="headerlink" title="初识Array"></a>初识<code>Array</code></h2><p><code>Array</code>是可变的,使用<code>update</code>方法对元素进行修改</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> numNames = <span class="type">Array</span>(<span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>)</div><div class="line">numNames.update(<span class="number">0</span>, <span class="string">"Hello"</span>)</div></pre></td></tr></table></figure>
<h2 id="初识List"><a href="#初识List" class="headerlink" title="初识List"></a>初识<code>List</code></h2><p>与java中的<code>List</code>不同，Scala中的<code>List</code>是不可改变的</p>
<p>Scala使用<code>:::</code>进行<code>List</code>连接</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> oneTwo = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">val</span> threeFour = <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">val</span> oneTwoThreeFour = oneTwo ::: threeFour</div><div class="line">println(oneTwo + <span class="string">" and "</span> + threeFour + <span class="string">" were not mutated."</span>)</div><div class="line">println(<span class="string">"Thus, "</span> + oneTwoThreeFour + <span class="string">" is a new list."</span>)</div></pre></td></tr></table></figure>
<p>将会输出:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>) and <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>) were not mutated.</div><div class="line"><span class="type">Thus</span>, <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) is a <span class="keyword">new</span> list.</div></pre></td></tr></table></figure>
<p><code>::</code>操作符在<code>List</code>前插入元素:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> twoThree = <span class="type">List</span>(<span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="keyword">val</span> oneTwoThree = <span class="number">1</span> :: twoThree</div><div class="line">println(oneTwoThree)</div></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<p><strong>If a method is used in operator notation, such as <code>a * b</code>, the method is invoked on the left operand, as in <code>a.*(b)</code>—unless the method name ends in a colon. If the method name ends in a colon, the method is invoked on the right operand. Therefore, in <code>1 :: twoThree</code>, the <code>::</code> method is invoked on <code>twoThree</code>, passing in <code>1</code>, like this: <code>twoThree.::(1)</code>.  </strong></p>
<p>空<code>List</code>用<code>Nil</code>表示</p>
<h2 id="初识元组"><a href="#初识元组" class="headerlink" title="初识元组"></a>初识元组</h2><p>虽然元组和<code>List</code>一样，都是不可改变的，但是元组可以包含不同类型的元素:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> pair = (<span class="number">99</span>, <span class="string">"Luftballons"</span>)</div><div class="line">println(pair._1)</div><div class="line">println(pair._2)</div></pre></td></tr></table></figure>
<p>The actual type of a tuple depends on the number of elements it contains and the types of those elements. Thus, the type of <code>(99, &quot;Luftballons&quot;)</code> is <code>Tuple2[Int, String]</code>. The type of<code>(&#39;u&#39;, &#39;r&#39;, &quot;the&quot;, 1, 4, &quot;me&quot;)</code> is <code>Tuple6[Char, Char, String, Int, Int, String]</code> </p>
<p><strong>注意元组中元素的索引方式</strong></p>
<h2 id="初识Set"><a href="#初识Set" class="headerlink" title="初识Set"></a>初识<code>Set</code></h2><p><code>Set</code>有不可变的也有可变的，不导入包时，默认是不可变的<code>Set</code></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">scala&gt; <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div><div class="line">res0: scala.collection.immutable.<span class="type">Set</span>[<span class="type">Int</span>] = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>To add a new element to a set, you call <code>+</code> on the set, passing in the new element. On both mutable and immutable sets, the <code>+</code> method will create and return a new set with the element added. Although mutable sets offer an actual <code>+=</code> method, immutable sets do not. </p>
<p><img src="http://i.imgur.com/hKFF7H4.png" alt=""></p>
<p>可变<code>Set</code>和不可变<code>Set</code>虽然叫同一个名字，但是属于不同的包</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.collection.mutable</div><div class="line"></div><div class="line"><span class="keyword">val</span> movieSet = mutable.<span class="type">Set</span>(<span class="string">"Hitch"</span>, <span class="string">"Poltergeist"</span>)</div><div class="line">movieSet += <span class="string">"Shrek"</span></div><div class="line">println(movieSet)</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.collection.immutable.<span class="type">HashSet</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> hashSet = <span class="type">HashSet</span>(<span class="string">"Tomatoes"</span>, <span class="string">"Chilies"</span>)</div><div class="line">println(hashSet + <span class="string">"Coriander"</span>)</div></pre></td></tr></table></figure>
<h2 id="初识Map"><a href="#初识Map" class="headerlink" title="初识Map"></a>初识<code>Map</code></h2><p><code>Map</code>与<code>Set</code>类似,有可变和不可变的,不导入包时，默认是不可变的<code>Map</code></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.collection.mutable</div><div class="line"></div><div class="line"><span class="keyword">val</span> treasureMap = mutable.<span class="type">Map</span>[<span class="type">Int</span>, <span class="type">String</span>]()</div><div class="line">treasureMap += (<span class="number">1</span> -&gt; <span class="string">"Go to island."</span>)</div><div class="line">treasureMap += (<span class="number">2</span> -&gt; <span class="string">"Find big X on ground."</span>)</div><div class="line">treasureMap += (<span class="number">3</span> -&gt; <span class="string">"Dig."</span>)</div><div class="line"><span class="comment">// val romanNumeral = Map(</span></div><div class="line"><span class="comment">//	 1 -&gt; "I", 2 -&gt; "II", 3 -&gt; "III", 4 -&gt; "IV", 5 -&gt; "V"</span></div><div class="line"><span class="comment">// )</span></div><div class="line">println(treasureMap(<span class="number">2</span>))</div></pre></td></tr></table></figure>
<h2 id="初识文件读取"><a href="#初识文件读取" class="headerlink" title="初识文件读取"></a>初识文件读取</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</div><div class="line">	<span class="keyword">for</span> (line &lt;- <span class="type">Source</span>.fromFile(args(<span class="number">0</span>)).getLines())</div><div class="line">		println(line.length + <span class="string">" "</span> + line)</div><div class="line">	&#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="type">Console</span>.err.println(<span class="string">"Please enter filename"</span>)</div></pre></td></tr></table></figure>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul>
<li>Traits in Scala are like interfaces in Java, but they can also have method implementations and even fields.</li>
<li>Scala中的数组使用<code>()</code>索引，而不是<code>[]</code></li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li>《Programming in Scala, 3rd Edition》</li>
</ul>]]></content>
      
        <categories>
            
            <category> Scala </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python学习重点摘记]]></title>
      <url>https://xin053.github.io/2016/10/30/Python%E5%AD%A6%E4%B9%A0%E9%87%8D%E7%82%B9%E6%91%98%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>该文档为学习python过程中觉得非常重要的内容(利于理解某些实现原理)，也就是作为一名pythoner，必须知道的内容，但是好记性不如烂笔头，还是记下来，定时复习还是比较好的。</p>
<p><strong>持续更新</strong></p>
<a id="more"></a>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><h3 id="Python模块搜索机制"><a href="#Python模块搜索机制" class="headerlink" title="Python模块搜索机制"></a>Python模块搜索机制</h3><ol>
<li>程序当前目录</li>
<li>PYTHONPATH(环境变量)目录</li>
<li>标准库目录</li>
</ol>
<h3 id="CPython-PyPy-Jython"><a href="#CPython-PyPy-Jython" class="headerlink" title="CPython,PyPy,Jython"></a>CPython,PyPy,Jython</h3><ol>
<li>CPython即底层用c/c++语言实现的Python,也是我们通常所用的python解释器</li>
<li>PyPy是使用Python实现的python解释器，速度比CPython快</li>
<li>Jython可以让python code跑在JVM上,并可以调用java code的解释器</li>
</ol>
<h3 id="一个项目标准文件层次结构"><a href="#一个项目标准文件层次结构" class="headerlink" title="一个项目标准文件层次结构"></a>一个项目标准文件层次结构</h3><p><img src="http://i.imgur.com/jwwhOiY.png" alt=""></p>
<h3 id="import导入模块顺序"><a href="#import导入模块顺序" class="headerlink" title="import导入模块顺序"></a>import导入模块顺序</h3><ol>
<li>标准库</li>
<li>第三方库</li>
<li>本地库</li>
</ol>
<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ol>
<li>类命名采用驼峰命名法</li>
<li>异常定义使用Error前缀</li>
<li>函数命名使用小写,并用下划线连接每个word</li>
<li>模块命名使用小写，word直接连接(较多)或者用下划线</li>
</ol>
<h3 id="库API"><a href="#库API" class="headerlink" title="库API"></a>库API</h3><ol>
<li>公共API：库暴露给用户使用的API</li>
<li>私有API：为实现功能，库内部使用的API，函数名前面有下划线</li>
</ol>
<h3 id="库更新时应该注意的问题"><a href="#库更新时应该注意的问题" class="headerlink" title="库更新时应该注意的问题"></a>库更新时应该注意的问题</h3><ol>
<li>废弃的接口不要立即删除</li>
<li>可以在新版本中使用<code>warnings</code>对使用废弃API的程序员显示警告信息</li>
</ol>
<h3 id="pip安装包"><a href="#pip安装包" class="headerlink" title="pip安装包"></a>pip安装包</h3><ol>
<li>如果在linux系统，可以使用<code>pip install --user 包名</code>来将包安装在<code>home</code>目录以避免在系统层面安装而造成操作系统目录的污染</li>
</ol>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ol>
<li>当使用for循环的时候，for语句就会自动的通过<code>__iter__()</code>方法来获得迭代器对象，并且通过<code>__next__()</code>方法来获取下一个元素</li>
</ol>
<h3 id="可迭代与迭代器"><a href="#可迭代与迭代器" class="headerlink" title="可迭代与迭代器"></a>可迭代与迭代器</h3><ol>
<li>如果一个对象具有<code>__iter__()</code>方法，那么它便是一个可迭代对象(iterable)</li>
<li>如果一个可迭代对象具有<code>next()</code>(python 2)或者<code>__next__()</code>(python 3)方法,并且函数返回是<code>return</code>而不是<code>yield</code>,那么它就是一个迭代器(iterator)</li>
</ol>
<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ol>
<li>生成器是特殊的迭代器,关键字<code>yield</code>就表示该方法返回一个生成器对象,其<code>__next__()</code>方法就是执行到下一次<code>yield</code>,其<code>__iter__()</code>方法就是返回自身，可以用for循环执行生成器中的代码。当循环结束，或不满足<code>if/else</code>条件时，导致函数运行但不命中<code>yield</code>关键字，此时生成器触发<code>StopIteration</code>异常。</li>
<li>调用生成器时<code>__next__()</code>方法时，实际上是将函数状态挂起，也就是保存了栈帧的状态</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">        index = i</div><div class="line">        <span class="keyword">yield</span> i</div><div class="line">    print(<span class="string">'hello'</span>)    </div><div class="line">    <span class="keyword">if</span> index &gt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">yield</span> <span class="string">'1:'</span>+str(index)</div><div class="line">    print(<span class="string">'world'</span>)</div><div class="line">    </div><div class="line">a = test()</div><div class="line">a.__next__()</div><div class="line"><span class="comment"># 0</span></div><div class="line">a.__next__()</div><div class="line"><span class="comment"># 1</span></div><div class="line">a.__next__()</div><div class="line"><span class="comment"># 2</span></div><div class="line">a.__next__()</div><div class="line"><span class="comment"># hello</span></div><div class="line"><span class="comment"># world</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># StopIteration                             Traceback (most recent call last)</span></div><div class="line"><span class="comment"># &lt;ipython-input-41-73aa2c76d676&gt; in &lt;module&gt;()</span></div><div class="line"><span class="comment"># ----&gt; 1 a.__next__()</span></div><div class="line"></div><div class="line"><span class="comment"># StopIteration:</span></div><div class="line"><span class="comment"># 最后一次__next__()到代码末尾，所以触发异常</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">        index = i</div><div class="line">        <span class="keyword">yield</span> i</div><div class="line">    print(<span class="string">'hello'</span>)    </div><div class="line">    <span class="keyword">if</span> index &gt; <span class="number">1</span>:</div><div class="line">        <span class="keyword">yield</span> <span class="string">'1:'</span>+str(index)</div><div class="line">    print(<span class="string">'world'</span>)</div><div class="line">    </div><div class="line">a = test()</div><div class="line">a.__next__()</div><div class="line"><span class="comment"># 0</span></div><div class="line">a.__next__()</div><div class="line"><span class="comment"># 1</span></div><div class="line">a.__next__()</div><div class="line"><span class="comment"># 2</span></div><div class="line">a.__next__()</div><div class="line"><span class="comment"># hello</span></div><div class="line"><span class="comment"># '1:2'</span></div><div class="line">a.__next__()</div><div class="line"><span class="comment"># world</span></div><div class="line"><span class="comment"># ---------------------------------------------------------------------------</span></div><div class="line"><span class="comment"># StopIteration                             Traceback (most recent call last)</span></div><div class="line"><span class="comment"># &lt;ipython-input-48-73aa2c76d676&gt; in &lt;module&gt;()</span></div><div class="line"><span class="comment"># ----&gt; 1 a.__next__()</span></div><div class="line"></div><div class="line"><span class="comment"># StopIteration: </span></div><div class="line"></div><div class="line">list(test())</div><div class="line"><span class="comment"># hello</span></div><div class="line"><span class="comment"># world</span></div><div class="line"><span class="comment"># [0, 1, 2, '1:2']</span></div><div class="line"><span class="comment"># list内部循环执行__next__(),然后append到列表中返回，所以后输出列表</span></div></pre></td></tr></table></figure>
<h3 id="yield表达式"><a href="#yield表达式" class="headerlink" title="yield表达式"></a><code>yield</code>表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(maximum)</span>:</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i &lt; maximum:</div><div class="line">        val = (<span class="keyword">yield</span> i)</div><div class="line">        <span class="comment"># If value provided, change counter</span></div><div class="line">        <span class="keyword">if</span> val <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            i = val</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            i += <span class="number">1</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; it = counter(10)  </div><div class="line">&gt;&gt;&gt; next(it)  </div><div class="line">0</div><div class="line">&gt;&gt;&gt; next(it)  </div><div class="line">1</div><div class="line">&gt;&gt;&gt; it.send(8)  </div><div class="line">8</div><div class="line">&gt;&gt;&gt; next(it)  </div><div class="line">9</div><div class="line">&gt;&gt;&gt; next(it)  </div><div class="line">Traceback (most recent call last):</div><div class="line">  File "t.py", line 15, in ?</div><div class="line">    it.next()</div><div class="line">StopIteration</div></pre></td></tr></table></figure>
<p>可以通过<code>send()</code>方法向生成器发送数据，<code>(yield i)</code>表达式的值就是<code>send(value)</code>中的<code>value</code>,而默认情况，<code>(yield i)</code>表达式的值为<code>None</code></p>
<h3 id="列表解析与生成器表达式"><a href="#列表解析与生成器表达式" class="headerlink" title="列表解析与生成器表达式"></a>列表解析与生成器表达式</h3><ol>
<li><code>[]</code>返回列表</li>
<li><code>()</code>返回生成器</li>
</ol>
<h3 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h3><ol>
<li>两者都比list节省内存，也就是运行的时候才生成数据，而不是像list一次性存储全部数据</li>
<li>生成器的编写比自定义一个迭代器简单很多,使用<code>yield</code>关键字或者<code>()</code>表达式就可以返回一个生成器,而不用自己写<code>__iter__()</code>与<code>__next__()</code>方法，并且生成器可以做更多的事情</li>
<li>生成器在进行迭代的时候只是暂停,并不是结束，而<code>finally</code>语句中的内容是在结束的时候才执行的</li>
<li><code>list()</code> <code>tuple()</code> <code>max()</code> <code>min()</code>等函数以及<code>in</code>,<code>not in</code>操作符都支持迭代器或者生成器作为参数,但是要注意如果迭代器或者生成器是无限的，那么很明显会一直循环，所以使用前要搞清楚迭代器或生成器是否是有限的</li>
<li>对字典进行<code>for</code>操作，默认是获取的<code>key</code>的迭代器，并且注意普通字典是无序的，要想获取<code>value</code>的迭代器或者是<code>key/value</code>的迭代器，就调用字典的<code>values()</code>和<code>items()</code>方法</li>
</ol>
<h3 id="迭代器与内置函数"><a href="#迭代器与内置函数" class="headerlink" title="迭代器与内置函数"></a>迭代器与内置函数</h3><ol>
<li><code>map(f, iterA, iterB, ...)</code> returns an iterator over the sequence<br><code>f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ....</code></li>
<li><code>filter(predicate, iter)</code> returns an iterator over all the sequence elements that meet a certain condition</li>
<li><code>enumerate(iter)</code> counts off the elements in the iterable, returning 2-tuples containing the count and each element</li>
<li><code>sorted(iterable, key=None, reverse=False)</code> collects all the elements of the iterable into a list, sorts the list, and returns the sorted result</li>
<li><code>any(iter)</code> and <code>all(iter)</code> built-ins look at the <strong>truth values of an iterable’s contents</strong>. <code>any()</code> returns <code>True</code> if any element in the iterable is a true value, and <code>all()</code> returns <code>True</code> if all of the elements are true values</li>
<li><code>zip(iterA, iterB, ...)</code> takes one element from each iterable and returns them in a tuple.It doesn’t construct an in-memory list and exhaust all the input iterators before returning; instead tuples are constructed and returned only if they’re requested. (The technical term for this behaviour is lazy evaluation.)</li>
<li><code>functools.reduce(func, iter, [initial_value])</code> cumulatively performs an operation on all the iterable’s elements and, therefore, can’t be applied to infinite iterables. <code>func</code> must be a function that takes two elements and returns a single value. <code>functools.reduce()</code> takes the first two elements <code>A</code> and <code>B</code> returned by the iterator and calculates <code>func(A, B)</code>. It then requests the third element, <code>C</code>, calculates <code>func(func(A, B), C)</code>, combines this result with the fourth element returned, and continues until the iterable is exhausted. If the iterable returns no values at all, a <code>TypeError</code> exception is raised. If the initial value is supplied, it’s used as a starting point and <code>func(initial_value, A)</code> is the first calculation.参考 <a href="https://www.cnblogs.com/XXCXY/p/5180245.html" target="_blank" rel="external">python的reduce()函数</a> <code>reduce</code>常与<code>operator</code>模块中的函数搭配使用</li>
</ol>
<h3 id="列表与元组"><a href="#列表与元组" class="headerlink" title="列表与元组"></a>列表与元组</h3><ol>
<li>列表与远足最大的区别就是前者可变，后者不可变，所以元组较安全</li>
</ol>
<h3 id="绑定与非绑定方法"><a href="#绑定与非绑定方法" class="headerlink" title="绑定与非绑定方法"></a>绑定与非绑定方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, x)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> x</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = D()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>D.__dict__[<span class="string">'f'</span>]  <span class="comment"># Stored internally as a function</span></div><div class="line">&lt;function f at <span class="number">0x00C45070</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>D.f              <span class="comment"># Get from a class becomes an unbound method</span></div><div class="line">&lt;unbound method D.f&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.f              <span class="comment"># Get from an instance becomes a bound method</span></div><div class="line">&lt;bound method D.f of &lt;__main__.D object at <span class="number">0x00B18C90</span>&gt;&gt;</div></pre></td></tr></table></figure>
<h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><ol>
<li>级别从低到高为<code>DEBUG</code> <code>INFO</code> <code>WARNING</code> <code>ERROR</code> <code>CRITICAL</code></li>
<li>默认级别为<code>WARNING</code>，只有<code>WARNING</code>和之上的级别的log控制台才会被输出</li>
<li><a href="http://www.jianshu.com/p/feb86c06c4f4" target="_blank" rel="external">python logging模块使用教程</a> <a href="http://blog.csdn.net/zyz511919766/article/details/25136485" target="_blank" rel="external">Python logging模块详解</a></li>
</ol>
<h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><ol>
<li>可处理简单列表排序和针对对象中某一属性进行排序，并且与<code>sort()</code>不同，前者不改变原列表，后者直接修改原列表</li>
<li>使用方法参考<a href="https://docs.python.org/3/howto/sorting.html" target="_blank" rel="external">Sorting HOW TO</a></li>
</ol>
<h3 id="ipaddress"><a href="#ipaddress" class="headerlink" title="ipaddress"></a>ipaddress</h3><ol>
<li>该模块能提供一些方法对ipv4和ipv6进行识别和处理</li>
</ol>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>当一个<strong>类定义</strong>被执行，发生了这些事:</p>
<ol>
<li>一个合适的元类被确定</li>
<li>类命名空间被准备好</li>
<li>类主体被执行</li>
<li>类对象被创建</li>
</ol>
<p><strong>类是元类的实例</strong>，在python中，一切都是对象，类也是对象</p>
<h3 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h3><ol>
<li><code>__new__()</code>是特殊的不用声明的静态方法</li>
<li><code>__mro__()</code>返回类所有的父类</li>
</ol>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><ol>
<li><code>os.listdir()</code>获取的只是指定路径下所有文件名组成的字符串列表，<code>os.scandir()</code>这可以返回一个生成器，每个元素是<code>DirEntry</code>对象，保留了文件相关的信息</li>
<li><code>os.remove()</code>只能删除文件，<code>os.rmdir()</code>只能删除空目录，<code>shutil.rmtree()</code>可以递归删除目录</li>
</ol>
<h3 id="subprocess替代"><a href="#subprocess替代" class="headerlink" title="subprocess替代"></a>subprocess替代</h3><ol>
<li><a href="https://github.com/kennethreitz/delegator.py" target="_blank" rel="external"><code>delegator</code> — <code>requests</code>作者最新作品</a></li>
<li><a href="https://github.com/kennethreitz/envoy" target="_blank" rel="external"><code>envoy</code> — 对标准库subprocess的封装，比较好用</a></li>
<li><a href="https://github.com/amoffat/sh" target="_blank" rel="external"><code>sh</code> — linux平台下subprocess的替代</a></li>
</ol>
<h3 id="keyring"><a href="#keyring" class="headerlink" title="keyring"></a>keyring</h3><ol>
<li>该模块能够将密码保存在系统keyring服务中</li>
</ol>
<h3 id="random-与urandom"><a href="#random-与urandom" class="headerlink" title="random 与urandom"></a>random 与urandom</h3><ol>
<li>random是标准库中的一个模块，产生的随机数不安全</li>
<li>urandom()是os模块中的方法，使用基于系统的随机数生成器，是安全的</li>
</ol>
<h3 id="python2与3的编码问题"><a href="#python2与3的编码问题" class="headerlink" title="python2与3的编码问题"></a>python2与3的编码问题</h3><ol>
<li><p>Python2有两种表示字符序列的类型，分别叫做<code>str</code>和<code>Unicode</code>，<code>str</code>实例包含原始的8位值；而<code>Unicode</code>的实例，则包含<code>Unicode</code>字符。</p>
<ol>
<li><code>str</code>格式本质含义是“某种编码格式”，绝大多数情况下，被引号框起来的字符串，就是<code>str</code>，这时的字符串编码类型，其实就是你Python文件的编码类型，比如在Windows里，默认用的是GBK编码。</li>
<li><code>Unicode</code>格式的含义就是“用unicode编码的字符串”。Python在进入2.0版后正式定义了了Unicode字符串这个奇怪的特性，目的就是为了处理太多种语言编码的文本。从那时开始，Python语言中的字符串类型就分为两种：一种是传统的Python字符串（各种花样编码），另一种则是新出现的<code>Unicode</code></li>
</ol>
<p><img src="https://ooo.0o0.ooo/2016/11/16/582c111e3fa73.png" alt=""></p>
</li>
<li><p>Python3也有两种表示字符序列的类型：<code>bytes</code>和<code>str</code>。前者的实例包含原始的8位值，后者的实例包含<code>Unicode</code>字符,可以说python3的<code>str</code>，就是python2的<code>Unicode</code></p>
<ol>
<li><code>str</code>格式的定义变更为”Unicode类型的字符串“，也就是说在默认情况下，被引号框起来的字符串，是使用<code>Unicode</code>编码的。</li>
<li>而“不是Unicode的某种编码格式”，比如UTF-8、GBK，这些编码方式被定义为了<code>bytes</code>，这里的<code>bytes</code>和py2中的<code>str</code>有很多相似的地方</li>
</ol>
</li>
<li><p>我们需要编写两个辅助（helper）函数，以便在这两种情况之间转换，使得转换后的输入数据能够符合开发者的预期</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#在Python3中，我们需要编写接受str或bytes，并总是返回str的方法：</div><div class="line">def to_str(bytes_or_str):</div><div class="line">  if isinstance(bytes_or_str, bytes):</div><div class="line">    value = bytes_or_str.decode('utf-8')</div><div class="line">  else:</div><div class="line">    value = bytes_or_str</div><div class="line">  return value # Instance of str</div><div class="line">  </div><div class="line">#另外，还需要编写接受str或bytes，并总是返回bytes的方法：</div><div class="line">def to_bytes(bytes_or_str):</div><div class="line">  if isinstance(bytes_or_str, str):</div><div class="line">    value = bytes_or_str.encode('utf-8)</div><div class="line">  else:</div><div class="line">    value = bytes_or_str</div><div class="line">  return value # Instance of bytes</div><div class="line">  </div><div class="line">#在Python2中，需要编写接受str或unicode，并总是返回unicode的方法：</div><div class="line">#python2</div><div class="line">def to_unicode(unicode_or_str):</div><div class="line">  if isinstance(unicode_or_str, str):</div><div class="line">    value = unicode_or_str.decode('utf-8')</div><div class="line">  else:</div><div class="line">    value = unicode_or_str</div><div class="line">  return value # Instance of unicode</div><div class="line">  </div><div class="line">#另外，还需要编写接受str或unicode，并总是返回str的方法：</div><div class="line">#Python2</div><div class="line">def to_str(unicode_or_str):</div><div class="line">  if isinstance(unicode_or_str, unicode):</div><div class="line">    value = unicode_or_str.encode('utf-8')</div><div class="line">  else:</div><div class="line">    value = unicode_or_str</div><div class="line">  reutrn vlaue # Instance of str</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h3><ol>
<li>使用<code>contextlib</code>标准库可以快速构造上下文管理器</li>
<li>使用<code>contextlib</code>库中的<code>contextmanager</code>装饰器装饰一个返回生成器的函数，就构造了一个上下文管理器，其中<code>yield</code>前面的内容是<code>with</code>表达式执行之前的操作，<code>yield</code>之后的内容是<code>with</code>表达式执行之后的操作，<code>yield</code>如果有返回的内容，则会返回给<code>with</code>表达式中<code>as</code>之后的变量</li>
</ol>
<h3 id="打包python包到pypi"><a href="#打包python包到pypi" class="headerlink" title="打包python包到pypi"></a>打包python包到pypi</h3><ol>
<li><a href="https://github.com/takluyver/flit" target="_blank" rel="external"><code>flit</code> — 很方便</a></li>
</ol>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="keyword">return</span> f</div><div class="line"></div><div class="line"><span class="meta">@identity</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'bar'</span></div></pre></td></tr></table></figure>
<p>上述就是一个最简单的装饰器的实现，实际上，装饰器就是实现了下面的操作:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'bar'</span></div><div class="line"></div><div class="line">foo = identity(foo)</div></pre></td></tr></table></figure>
<p>注册装饰器的实现:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">_functions = &#123;&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="keyword">global</span> _functions</div><div class="line">    _functions[f.__name__] = f</div><div class="line">    <span class="keyword">return</span> f</div><div class="line">    </div><div class="line"><span class="meta">@register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'bar'</span></div></pre></td></tr></table></figure>
<p>上述装饰器没有使用被装饰函数的参数，返回的还是原来的函数，只是在返回之前做了一些事情</p>
<p>而大多数装饰器都会用到被装饰函数的参数，这时候就不能返回函数本身了，因为最后返回函数本身，就没有渠道获取被装饰函数的参数，所以这时候就需要返回一个对被装饰函数进行包装的函数，例如:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_is_admin</span><span class="params">(f)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> kwargs.get(<span class="string">'username'</span>) != <span class="string">'admin'</span>:</div><div class="line">            <span class="keyword">raise</span> Exception(<span class="string">"This user is not allowd to get food"</span>)</div><div class="line">        <span class="keyword">return</span> f(*args,**kwargs)</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @check_is_admin</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_food</span><span class="params">(self, username, food)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.storage.get(food)</div><div class="line">    </div><div class="line"><span class="meta">    @check_is_admin</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put_food</span><span class="params">(self, username, food)</span>:</span></div><div class="line">        self.storage.put(food)</div></pre></td></tr></table></figure>
<p><code>get_food</code>被装饰后，实际上我们在调用<code>get_food</code>时，调用的是<code>wrapper</code>函数，也就是说<code>get_food</code>被包装了，所以<code>wrapper</code>可以获取到输入的参数，并对参数进行一些操作,并且注意上述代码要传入一个名为<code>username</code>的关键字参数，例如:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">get_food(username=<span class="string">'admin'</span>, food=<span class="string">'apple'</span>)</div></pre></td></tr></table></figure>
<p>为此，我们需要一个更加智能的装饰器，它能够查看被装饰函数的参数，并从中提取需要的参数，<code>inspect</code>模块能实现这样的需求</p>
<p>并且由于实际上我们调用的是包装函数<code>wrapper</code>,那么像<code>__name__</code>等返回的就是<code>wrapper</code>函数的信息，而不是<code>get_food</code>函数的信息,为此，<code>functools</code>提供<code>wraps</code>装饰器用来将被装饰函数一些特有属性赋值给包装函数，这样我们使用<code>wrapper</code>函数时，就像真的在使用原<code>get_food</code>函数一样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> inspect</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_is_admin</span><span class="params">(f)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(f)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        func_args = inspect.getcallargs(f, *args, **kwargs)</div><div class="line">        <span class="keyword">if</span> func_args.get(<span class="string">'username'</span>) != <span class="string">'admin'</span>:</div><div class="line">            <span class="keyword">raise</span> Exception(<span class="string">"This user is not allowd to get food"</span>)</div><div class="line">        <span class="keyword">return</span> f(*args,**kwargs)</div><div class="line">    <span class="keyword">return</span> wrapper</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tesseract光学识别]]></title>
      <url>https://xin053.github.io/2016/10/28/Tesseract%E5%85%89%E5%AD%A6%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="OCR简介"><a href="#OCR简介" class="headerlink" title="OCR简介"></a>OCR简介</h2><p>本post探讨的光学识别工具是google开发的<code>tesseract</code>，项目主页：<br><a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="external">tesseract-ocr/tesseract</a></p>
<p>该项目用C语言所写，官方提供了生成好的windows平台下的二进制文件，但是是老版本的，然后又说了可以从这里面<a href="https://github.com/UB-Mannheim/tesseract/wiki" target="_blank" rel="external">Tesseract at UB Mannheim</a>下到最新版的win平台打包</p>
<p>确实第三方维护的最新版的<code>tesseract</code>，但是我想说<strong>安装的时候注意不要选择<code>PATH</code>那一项，作者打包时估计没注意，直接把你的<code>PATH</code>覆盖了，还好之前有备份<code>PATH</code>环境变量，要不然痛不欲生</strong></p>
<p>今天主要讲<code>tesseract</code>在win平台下的使用，以及基于<code>tesseract</code>打包的，用python写的两个库:</p>
<ul>
<li><a href="https://github.com/madmaze/pytesseract" target="_blank" rel="external">pytesseract</a></li>
<li><a href="https://github.com/jflesch/pyocr" target="_blank" rel="external">pyocr</a></li>
</ul>
<a id="more"></a>
<h2 id="tesseract使用"><a href="#tesseract使用" class="headerlink" title="tesseract使用"></a>tesseract使用</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tesseract -h</div></pre></td></tr></table></figure>
<p>获取使用帮助，比较详细吧</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tesseract imagename outputbase [-l lang] [-psm pagesegmode] [configfiles...]</div></pre></td></tr></table></figure>
<p> 基本就是这种用法，举个例子:</p>
<p>桌面有个图片，叫<code>1.jpg</code></p>
<p>我们先把cmd的路径切到桌面，然后输入:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tesseract <span class="number">1</span>.jpg test -l chi_sim</div></pre></td></tr></table></figure>
<p><code>-l chi_sim</code>表示用训练的中文数据库识别图片中的文字，不带<code>-l</code>默认使用英文，多个语言之间使用<code>+</code>连接，以下是其他语言的简写:</p>
<p><a href="https://github.com/tesseract-ocr/tesseract/blob/master/doc/tesseract.1.asc#languages" target="_blank" rel="external">LANGUAGES</a></p>
<p>下载其他训练好的语言数据包:</p>
<p><a href="tesseract-ocr/tessdata">tesseract-ocr/tessdata</a></p>
<p>执行上面的命令以后，会在桌面生成一个<code>test.txt</code>文件，文件内容就是识别的文字</p>
<p><strong>评价:识别效果一般</strong></p>
<h2 id="pytesseract使用"><a href="#pytesseract使用" class="headerlink" title="pytesseract使用"></a>pytesseract使用</h2><p>之所以说是<code>tesseract</code>的封装，是因为底层就是调用上述<code>tesseract</code>命令，这个python库的使用比较简单，看下例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> pytesseract</div><div class="line"></div><div class="line">print(pytesseract.image_to_string(Image.open(<span class="string">r"C:\Users\zzx\Desktop\1.jpg"</span>)))</div><div class="line">print(pytesseract.image_to_string(Image.open(<span class="string">r"C:\Users\zzx\Desktop\1.jpg"</span>), lang=<span class="string">'fra'</span>))</div></pre></td></tr></table></figure>
<p>直接用<code>print</code>输出到控制台可能出现乱码问题，因为<code>image_to_string</code>函数内部返回的:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">f = open(output_file_name)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">return</span> f.read().strip()</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div></pre></td></tr></table></figure>
<p><code>open</code>没有指定编码，而生成的存放结果的临时文件是通过官方<code>tempfile</code>模块生成的，之后将结果写入文件是通过<code>subprocess.Popen</code>，所以临时文件中的结果与cmd的编码有关。可能会出现乱码。</p>
<h2 id="PyOCR使用"><a href="#PyOCR使用" class="headerlink" title="PyOCR使用"></a>PyOCR使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="keyword">import</span> pyocr</div><div class="line"><span class="keyword">import</span> pyocr.builders</div><div class="line"></div><div class="line">tools = pyocr.get_available_tools()</div><div class="line"><span class="keyword">if</span> len(tools) == <span class="number">0</span>:</div><div class="line">    print(<span class="string">"No OCR tool found"</span>)</div><div class="line">    sys.exit(<span class="number">1</span>)</div><div class="line"><span class="comment"># The tools are returned in the recommended order of usage</span></div><div class="line">tool = tools[<span class="number">0</span>]</div><div class="line">print(<span class="string">"Will use tool '%s'"</span> % (tool.get_name()))</div><div class="line"><span class="comment"># Ex: Will use tool 'libtesseract'</span></div><div class="line"></div><div class="line">langs = tool.get_available_languages()</div><div class="line">print(<span class="string">"Available languages: %s"</span> % <span class="string">", "</span>.join(langs))</div><div class="line">lang = langs[<span class="number">0</span>]</div><div class="line">print(<span class="string">"Will use lang '%s'"</span> % (lang))</div><div class="line"><span class="comment"># Ex: Will use lang 'fra'</span></div><div class="line"><span class="comment"># Note that languages are NOT sorted in any way. Please refer</span></div><div class="line"><span class="comment"># to the system locale settings for the default language</span></div><div class="line"><span class="comment"># to use.</span></div><div class="line"></div><div class="line">txt = tool.image_to_string(</div><div class="line">    Image.open(<span class="string">'test.png'</span>),</div><div class="line">    lang=lang,</div><div class="line">    builder=pyocr.builders.TextBuilder()</div><div class="line">)</div><div class="line"></div><div class="line">word_boxes = tool.image_to_string(</div><div class="line">    Image.open(<span class="string">'test.png'</span>),</div><div class="line">    lang=<span class="string">"eng"</span>,</div><div class="line">    builder=pyocr.builders.WordBoxBuilder()</div><div class="line">)</div><div class="line"></div><div class="line">line_and_word_boxes = tool.image_to_string(</div><div class="line">    Image.open(<span class="string">'test.png'</span>), lang=<span class="string">"fra"</span>,</div><div class="line">    builder=pyocr.builders.LineBoxBuilder()</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># Digits - Only Tesseract (not 'libtesseract' yet !)</span></div><div class="line">digits = tool.image_to_string(</div><div class="line">    Image.open(<span class="string">'test-digits.png'</span>),</div><div class="line">    lang=lang,</div><div class="line">    builder=pyocr.tesseract.DigitBuilder()</div><div class="line">)</div></pre></td></tr></table></figure>
<p>这是官网的例子，也很容易看懂</p>
<p>还能检测方向:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> tool.can_detect_orientation():</div><div class="line">    orientation = tool.detect_orientation(</div><div class="line">        Image.open(<span class="string">'test.png'</span>),</div><div class="line">        lang=<span class="string">'fra'</span></div><div class="line">    )</div><div class="line">    pprint(<span class="string">"Orientation: &#123;&#125;"</span>.format(orientation))</div><div class="line"><span class="comment"># Ex: Orientation: &#123;</span></div><div class="line"><span class="comment">#   'angle': 90,</span></div><div class="line"><span class="comment">#   'confidence': 123.4,</span></div><div class="line"><span class="comment"># &#125;</span></div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="tesseract-ocr/tesseract">tesseract-ocr/tesseract</a></li>
<li><a href="madmaze/pytesseract">madmaze/pytesseract</a></li>
<li><a href="jflesch/pyocr">jflesch/pyocr</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Tesseract </tag>
            
            <tag> 光学识别 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[qrcode二维码生成库使用详解]]></title>
      <url>https://xin053.github.io/2016/10/28/qrcode%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="二维码简介"><a href="#二维码简介" class="headerlink" title="二维码简介"></a>二维码简介</h2><ul>
<li><a href="http://baike.baidu.com/link?url=UPraZykylcByHbMsH9RjuAWh79bgc44HkWQp9NOlrc-us7IFmpkgbQUQNmuo-T96fx9oIyp9583aKcLl_s_ZNztJKGJM1Oy3rg7vG7lJ_NDLbNAiQYH-mDyhBaZeG-dT" target="_blank" rel="external">二维码(百度百科)</a></li>
<li><a href="http://baike.baidu.com/link?url=5UKM4Ms1KH7ptZdU1P4KA_PLHDebNyXUo3nNUin_XAGOZhumuH3PuX_QMQZ5wGtEkUtHmnSkUsge1L9bRhBEdey30ZCC6qkcbbbphTj3ULTnAGhCgz9z-GiRvyUrgxc1CJcjKE09qowLuh8FISxPIa" target="_blank" rel="external">QR Code</a></li>
</ul>
<p>qrcode是二维码的一种，可以包含几千个字符。</p>
<p><img src="https://xin053.github.io/images/wechat.png" alt=""></p>
<a id="more"></a>
<h2 id="qrcode使用"><a href="#qrcode使用" class="headerlink" title="qrcode使用"></a>qrcode使用</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install qrcode</div></pre></td></tr></table></figure>
<p>安装完之后，可以使用命令行工具:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">qr <span class="string">"Some text"</span> &gt; test.png</div></pre></td></tr></table></figure>
<p>也可以在python中使用<code>qrcode</code>模块:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> qrcode</div><div class="line"></div><div class="line">img = qrcode.make(<span class="string">'Some data here'</span>)</div><div class="line">img.save(<span class="string">r"C:\Users\zzx\Desktop\test.jpg"</span>)</div></pre></td></tr></table></figure>
<h2 id="使用-QRCode类"><a href="#使用-QRCode类" class="headerlink" title="使用 QRCode类"></a>使用 QRCode类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> qrcode</div><div class="line">qr = qrcode.QRCode(</div><div class="line">    version=<span class="number">1</span>,</div><div class="line">    error_correction=qrcode.constants.ERROR_CORRECT_L,</div><div class="line">    box_size=<span class="number">10</span>,</div><div class="line">    border=<span class="number">4</span>,</div><div class="line">)</div><div class="line">qr.add_data(<span class="string">'Some data'</span>)</div><div class="line">qr.make(fit=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">img = qr.make_image()</div></pre></td></tr></table></figure>
<p><code>version</code>数值从1到40，表示生成二维码的大小</p>
<p><code>error_correction</code> parameter controls the error correction used for the QR Code. The following four constants are made available on the <code>qrcode</code> package:</p>
<ul>
<li><code>ERROR_CORRECT_L</code>    About 7% or less errors can be corrected.</li>
</ul>
<ul>
<li><code>ERROR_CORRECT_M</code> (default)    About 15% or less errors can be corrected.</li>
</ul>
<ul>
<li><code>ERROR_CORRECT_Q</code>    About 25% or less errors can be corrected.</li>
<li><code>ERROR_CORRECT_H</code>    About 30% or less errors can be corrected.</li>
</ul>
<p><code>box_size</code> parameter controls how many pixels each “box” of the QR code is.</p>
<p><code>border</code> parameter controls how many boxes thick the border should be (the default is 4, which is the minimum according to the specs).</p>
<p><strong>This module uses image libraries, Python Imaging Library (PIL) by default, to generate QR Codes.</strong></p>
<p><strong>It is recommended to use the pillow fork rather than PIL itself.</strong></p>
<p><strong>Pilow和PIL不兼容,默认是PIL，当你安装Pillow之后就会卸载PIL</strong></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://github.com/lincolnloop/python-qrcode" target="_blank" rel="external">qrcode github README</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> qrcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pillow图片处理库使用详解]]></title>
      <url>https://xin053.github.io/2016/10/26/Pillow%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="Pillow-简介"><a href="#Pillow-简介" class="headerlink" title="Pillow 简介"></a>Pillow 简介</h2><p>是PIL的一个fork，所以不能与PIL共存</p>
<p>能对图片进行处理，例如转换格式，显示图片，查看图片相关信息以及resize，旋转等处理</p>
<h2 id="使用-Image-类"><a href="#使用-Image-类" class="headerlink" title="使用 Image 类"></a>使用 Image 类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">im = Image.open(<span class="string">r"C:\Users\zzx\Desktop\日语50音图.jpg"</span>)</div><div class="line">print(im.format, im.size, im.mode)</div><div class="line"></div><div class="line">im.show()</div></pre></td></tr></table></figure>
<p>第二行获取了一个<code>Image</code>对象，第三行输出图片的格式，大小和模式</p>
<p>输出结果：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JPEG (<span class="number">650</span>, <span class="number">352</span>) RGB</div></pre></td></tr></table></figure>
<p>最后一行显示图片，官方也说明了，该<code>show</code>方法，将复制原图片为一个临时图片，然后再打开临时图片</p>
<a id="more"></a>
<p><strong>当使用<code>open</code>来获取一个<code>Image</code>对象时，只解析了图片的头信息以及必要的信息，而文件后面代表图片信息的数据没有解析，只有需要的时候才会去解析</strong></p>
<h2 id="转换图片格式"><a href="#转换图片格式" class="headerlink" title="转换图片格式"></a>转换图片格式</h2><p>使用<code>Image</code>对象的<code>save</code>方法对图片进行保存，文件后缀说明了文件的格式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">im.save(<span class="string">r'C:\Users\zzx\Desktop\test.png'</span>)</div></pre></td></tr></table></figure>
<h2 id="图片剪切"><a href="#图片剪切" class="headerlink" title="图片剪切"></a>图片剪切</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">box = (<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>)</div><div class="line">region = im.crop(box)</div></pre></td></tr></table></figure>
<p>The region is defined by a 4-tuple, where coordinates are (left, upper, right, lower). The Python Imaging Library uses a coordinate system with (0, 0) in the upper left corner. Also note that coordinates refer to positions between the pixels, so the region in the above example is exactly 300x300 pixels.</p>
<p>另外paste方法可以粘贴图片</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">region = region.transpose(Image.ROTATE_180)</div><div class="line">im.paste(region, box)</div></pre></td></tr></table></figure>
<h2 id="split与merge"><a href="#split与merge" class="headerlink" title="split与merge"></a>split与merge</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r, g, b = im.split()</div><div class="line">im = Image.merge(<span class="string">"RGB"</span>, (b, g, r))</div></pre></td></tr></table></figure>
<h2 id="resize与rotate"><a href="#resize与rotate" class="headerlink" title="resize与rotate"></a>resize与rotate</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">out = im.resize((<span class="number">128</span>, <span class="number">128</span>))</div><div class="line">out = im.rotate(<span class="number">45</span>) <span class="comment"># degrees counter-clockwise</span></div></pre></td></tr></table></figure>
<p>增强图像对比度</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageEnhance</div><div class="line"></div><div class="line">enh = ImageEnhance.Contrast(im)</div><div class="line">enh.enhance(<span class="number">1.3</span>).show(<span class="string">"30% more contrast"</span>)</div></pre></td></tr></table></figure>
<h2 id="动图处理"><a href="#动图处理" class="headerlink" title="动图处理"></a>动图处理</h2><p>动图就是一帧一帧的图片</p>
<p><strong>Note that most drivers in the current version of the library only allow you to seek to the next frame (as in the above example). To rewind the file, you may have to reopen it.</strong></p>
<p>The following class lets you use the for-statement to loop over the sequence:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageSequence</div><div class="line"><span class="keyword">for</span> frame <span class="keyword">in</span> ImageSequence.Iterator(im):</div><div class="line">    <span class="comment"># ...do something to frame...</span></div></pre></td></tr></table></figure>
<h2 id="图像上写字-绘图"><a href="#图像上写字-绘图" class="headerlink" title="图像上写字 绘图"></a>图像上写字 绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> PSDraw</div><div class="line"></div><div class="line">im = Image.open(<span class="string">"lena.ppm"</span>)</div><div class="line">title = <span class="string">"lena"</span></div><div class="line">box = (<span class="number">1</span>*<span class="number">72</span>, <span class="number">2</span>*<span class="number">72</span>, <span class="number">7</span>*<span class="number">72</span>, <span class="number">10</span>*<span class="number">72</span>) <span class="comment"># in points</span></div><div class="line"></div><div class="line">ps = PSDraw.PSDraw() <span class="comment"># default is sys.stdout</span></div><div class="line">ps.begin_document(title)</div><div class="line"></div><div class="line"><span class="comment"># draw the image (75 dpi)</span></div><div class="line">ps.image(box, im, <span class="number">75</span>)</div><div class="line">ps.rectangle(box)</div><div class="line"></div><div class="line"><span class="comment"># draw title</span></div><div class="line">ps.setfont(<span class="string">"HelveticaNarrow-Bold"</span>, <span class="number">36</span>)</div><div class="line">ps.text((<span class="number">3</span>*<span class="number">72</span>, <span class="number">4</span>*<span class="number">72</span>), title)</div><div class="line"></div><div class="line">ps.end_document()</div></pre></td></tr></table></figure>
<h2 id="从字符串获取Image对象"><a href="#从字符串获取Image对象" class="headerlink" title="从字符串获取Image对象"></a>从字符串获取<code>Image</code>对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> StringIO</div><div class="line"></div><div class="line">im = Image.open(StringIO.StringIO(buffer))</div></pre></td></tr></table></figure>
<h2 id="从压缩文件内获取Image对象"><a href="#从压缩文件内获取Image对象" class="headerlink" title="从压缩文件内获取Image对象"></a>从压缩文件内获取<code>Image</code>对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> TarIO</div><div class="line"></div><div class="line">fp = TarIO.TarIO(<span class="string">"Imaging.tar"</span>, <span class="string">"Imaging/test/lena.ppm"</span>)</div><div class="line">im = Image.open(fp)</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://pillow.readthedocs.io/en/3.4.x/index.html" target="_blank" rel="external">Pillow官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pillow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker学习笔记(四)]]></title>
      <url>https://xin053.github.io/2016/10/09/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="使用docker-nginx"><a href="#使用docker-nginx" class="headerlink" title="使用docker nginx"></a>使用docker nginx</h2><p>首先参考官方docker nginx</p>
<p><a href="https://hub.docker.com/r/_/nginx/" target="_blank" rel="external">nginx</a></p>
<p>可以看到有很多不同标签的镜像，有基于debian的，也有基于alpine的，这里我们选择alpine，我们首先pull选择的镜像</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull nginx:<span class="number">1.11</span>.<span class="number">4</span>-alpine</div></pre></td></tr></table></figure>
<p>最好还是看下该镜像的<a href="https://github.com/nginxinc/docker-nginx/blob/0dd9ef6a337474293b5e36c95a85da99b11e1a0a/mainline/alpine/Dockerfile" target="_blank" rel="external">Dockerfile</a>文件，对镜像的内容有些了解还是很有用的</p>
<p>下载完镜像之后我们继续查看文档，第一个例子就是利用nginx托管简单的静态文件</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name nginx-test -v /some/content:/usr/share/nginx/html:ro -d nginx:<span class="number">1.11</span>.<span class="number">4</span>-alpine</div></pre></td></tr></table></figure>
<p><code>--name</code>设置容器的名称，<code>-v</code>挂载宿主主机目录到nginx容器指定的web目录，<code>ro</code>表示只读，<code>rw</code>表示可读可写，<code>-d</code>表示在宿主主机的后台运行，之后就是利用的镜像，下面是一片文章来回答docker容器在后台运行和前台运行的区别：</p>
<p><a href="http://zhidao.baidu.com/link?url=os7Z3_MlRjE4TLqKutNp_CoRv2C2-fAEllErdGlIm1txwIa_nnBdbig9t9KKJwQRNLN1brBM9gACaHfwOrww_eAVN8cDZKViYF3By_R0sLW" target="_blank" rel="external">Docker 容器后台运行和前台运行的区别</a></p>
<p>那么到目前为止一个简单的web应用就搭建好了，现在来说明一下windows环境下的各种问题</p>
<a id="more"></a>
<h2 id="windows环境说明"><a href="#windows环境说明" class="headerlink" title="windows环境说明"></a>windows环境说明</h2><ul>
<li>物理机win10 x64企业版</li>
<li>本人安装的是docker toolbox(在virtual box中创建一个名字为<code>default</code>的虚拟机来作为docker容器的宿主机)</li>
</ul>
<p>而每个容器其实也就相当于是一个linux，所以这样其实在我电脑上有三层:</p>
<blockquote>
<p>win10物理机 -&gt; default(linux)虚拟机(宿主机) -&gt; 容器</p>
</blockquote>
<p>这所以强调这一点是因为如果是正常的生产环境的话，应该是直接在一台linux服务器中安装docker，然后运行容器，也就是只有两层:</p>
<blockquote>
<p>linux(宿主机) -&gt; 容器</p>
</blockquote>
<p>那么三层会带来什么影响呢?</p>
<h3 id="挂载卷"><a href="#挂载卷" class="headerlink" title="挂载卷"></a>挂载卷</h3><p>在选择挂载目录时，Kitematic提示只能挂载物理机上本用户的目录到<code>/usr/share/nginx/html</code>，也就是只能挂载<code>C:\Users\zzx</code>(zzx为我windows当前用户)目录下的文件夹到<code>/usr/share/nginx/html</code>，又看到<code>default</code>虚拟机设置中与windows物理机的共享文件夹是<code>C:\Users</code>，以为是只设置了c盘的原因，于是添加了一个f盘，发现还是只能挂载<code>C:\Users\zzx</code>下的目录，无奈，创建了<code>C:\Users\zzx\.docker\docker\static_web</code>,并将<code>spring</code>帮助文档中的<code>index.html</code>放在了该目录下，可以通过Kitematic修改挂载目录，挺方便的:</p>
<p><img src="http://i.imgur.com/Fw45l7l.png" alt=""></p>
<p>那我我们如何访问到该<code>index.html</code>文件呢?由此引发第二个问题</p>
<h3 id="如何访问"><a href="#如何访问" class="headerlink" title="如何访问"></a>如何访问</h3><p>首先查看该容器<code>Ports</code>信息:</p>
<p><img src="http://i.imgur.com/OdTEMPg.png" alt=""></p>
<p>可以看到容器暴露了80和443端口，而容器的80和443端口分别映射到宿主机的32769和32768端口，而192.168.99.100则是宿主机的ip，也可以通过以下命令查看端口映射:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker port docker-name/id 需要查询的端口</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/0cpGsii.png" alt=""></p>
<p>那么在物理机windows中，就需要用<code>http://192.168.99.100:32769/</code>来访问该<code>index.html</code>文件了。因为windows只能和宿主机通信，只能看到32769和32768这两个端口，而宿主机才能和容器通信，宿主机才能看到容器暴露的80和443端口</p>
<p><img src="http://i.imgur.com/QmYHUFM.png" alt=""></p>
<h3 id="容器的ip"><a href="#容器的ip" class="headerlink" title="容器的ip"></a>容器的ip</h3><p>每个容器的ip都是docker设置的，并且使用的是<code>172.17.x.x</code>这个网段，所以容器间能够实现共享，因为都在同一个子网下，而宿主机和容器是通过网桥连接的，网桥的一端是宿主机中的适配器，另一端则是容器中代表<code>172.17.x.x</code>这个ip的适配器</p>
<p>在我此次实验中，容器<code>nginx-test</code>的ip是<code>172.17.0.2</code></p>
<p>所以在宿主机中能够通过<code>http://localhost/</code>访问到<code>index.html</code>文件</p>
<h2 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p <span class="number">4567</span> --name webapp --link redis:db -t -i -v <span class="variable">$PWD</span>/webapp:/opt/webapp alpine sh</div></pre></td></tr></table></figure>
<p>以上命令基于alpine镜像创建了一个名为<code>webapp</code>的容器，并暴露了该容器的4567端口，同时挂载了一个目录，最主要的是<code>--linke</code>选项</p>
<p><code>--link</code>标志创建了两个容器间的父子连接，该标识需要两个参数，一个是要连接的容器的名称，第二个是连接后容器的别名。以上操作，我们把新容器连接到redis容器，并使用db作为别名。</p>
<p>通过把容器连接在一起，可以让父容器直接访问任何子容器的公开端口。更好的是，只有使用<code>--link</code>标志连接到这个容器的容器才能连接到这个端口，容器的端口不需要对本地宿主机公开。通过这个安全模型，可以限制容器化应用程序的被攻击面，减少应用暴露的网络。</p>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker学习笔记(三)]]></title>
      <url>https://xin053.github.io/2016/10/07/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="深入docker镜像"><a href="#深入docker镜像" class="headerlink" title="深入docker镜像"></a>深入docker镜像</h2><p>docker镜像是由文件系统叠加而成，最底端是一个引导文件系统，即bootfs，这很像典型的linux的引导文件系统。docker用户几乎永远不会和引导系统有什么交互。实际上，当一个容器启动后，它会被移到内存中，而引导文件系统则会被卸载，以留出更多的内存共initrd磁盘镜像使用。</p>
<p>到目前为止，docker看起来还很像一个典型的linux虚拟化栈。实际上，docker镜像的第二层是root文件系统rootfs，它位于引导文件系统之上。</p>
<p>在传统的linux引导过程中，root文件系统会最先以只读的方式加载，当引导结束并完成了完整性检查之后，它才会被切换为读写模式，但是在docker里，root文件系统永远只能是只读状态，而且docker利用联合加载技术又会在root文件系统层上加载更多的只读文件系统。联合加载指的是一次同时加载多个文件系统，但是在外面看起来只能看到一个文件系统，联合加载会将各文件系统叠加在一起，这样最终的文件系统会包含所有底层的文件和目录。</p>
<a id="more"></a>
<p>docker将这样的文件系统成为镜像，一个镜像可以放在另一个镜像的顶部。位于下面的镜像成为父镜像。最底层的镜像称为基础镜像。最后，当从一个镜像启动容器时，docker会在该镜像的最顶层加载一个读写文件系统。我们想在docker中运行的程序就是在这个读写层中执行的</p>
<p><img src="http://i.imgur.com/0NK2H01.png" alt=""></p>
<p>当docker第一次启动一个容器时，初始的读写层是空的，当文件系统发生变化时，这些变化都会应用到这一层上。比如，如果想修改一个文件，这个文件首先会从该读写层下面的只读层复制到该读写层。该文件的只读版本依然存在，但是已经被读写层中的该文件副本所隐藏</p>
<p>通常这种机制被称为写时复制。每个只读镜像层都是只读的，并且以后永远不会变化。当创建一个新容器时，docker会构建一个镜像栈，并在栈的最顶端添加一个读写层。这个读写层再加上其下面的镜像层以及一些配置数据，就构成了一个容器。容器是可以修改的，并且是可以启动和停止的。容器的这种特点加上镜像分层框架，使我们可以快速构建镜像并运行包含我们自己的应用程序和服务的容器。</p>
<h2 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>docker hub中有两种仓库</p>
<ul>
<li>用户仓库    镜像都是有docker用户创建的</li>
<li>顶层仓库    镜像是由docker内部人员管理的</li>
</ul>
<p>用户仓库的命名由用户名和仓库名两部分组成，如jamtur01/puppet</p>
<p>顶层仓库只包含库名部分，如ubuntu仓库</p>
<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>一般来说，我们不是真正创建新镜像，而是基于一个已有的基础镜像，构建新镜像而已。</p>
<p>创建static_web文件夹并在其中创建Dockerfile文件:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># version:0.0.1</span></div><div class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">14.04</span></div><div class="line"><span class="keyword">MAINTAINER</span> James Turnbull <span class="string">"james@example.com"</span></div><div class="line"><span class="keyword">RUN</span> apt-get update</div><div class="line"><span class="keyword">RUN</span> apt-get install -y nginx</div><div class="line"><span class="keyword">RUN</span> echo 'Hi,I am in your container' &gt; /usr/share/nginx/html/index.index</div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></div></pre></td></tr></table></figure>
<p>每条指令都会创建一个新的镜像层并对镜像进行提交。docker大体上按照如下流程执行dockerfile中的指令</p>
<ul>
<li>docker从基础镜像运行一个容器</li>
<li>执行一条指令，对容器做出修改</li>
<li>执行类似docker commit的操作，提交一个新的镜像层</li>
<li>docker再基于刚提交的镜像运行一个新容器</li>
<li>执行dockefile中的下一条指令，直到所有指令都执行完毕</li>
</ul>
<p>接着输入以下命令来创建我们的镜像：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd static_web</div><div class="line">docker build -t=<span class="string">"jamtur01/static_web"</span></div></pre></td></tr></table></figure>
<p><code>-t</code>选项指定仓库名和镜像名称</p>
<p>也可以通过下面命令来为镜像设置一个标签</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t=<span class="string">"jamtur01/static_web:v1"</span></div></pre></td></tr></table></figure>
<p>如果没有指定任何标签，docker会自动为镜像设置一个<code>latest</code>标签</p>
<p>以上的例子告诉docker在当前目录寻找Dockerfile文件，也可以指定一个git仓库的源地址来指定Dockerfile的位置，如：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t=<span class="string">"jamtur01/static_web:v1"</span> git@github.com:jamtur01/docker-static_web</div></pre></td></tr></table></figure>
<p>该git仓库的根目录下存在Dockerfile文件</p>
<p>而根目录下的<code>.dockerignore</code>文件的功能与<code>.gitignore</code>文件作用一样</p>
<h2 id="构建缓存"><a href="#构建缓存" class="headerlink" title="构建缓存"></a>构建缓存</h2><p>默认构建镜像时，会使用缓存技术，所以如果Dockerfile文件内容没有变化，再次构建镜像时，产生的镜像与之前一样，如果有<code>apt-get update</code>等命令，这样docker将不会再次更新apt包，所以如果想要docker构建镜像时再一次的执行Dockerfile里面的命令时，需要明确指定不使用缓存功能</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build --no-cache -t=<span class="string">"jamtur01/static_web"</span></div></pre></td></tr></table></figure>
<h2 id="构建历史"><a href="#构建历史" class="headerlink" title="构建历史"></a>构建历史</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker history docker-name/id</div></pre></td></tr></table></figure>
<p>可以查看镜像是如何构建出来的</p>
<h2 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h2><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>CMD指令用于指定一个容器启动时要运行的命令。这有点类似与RUN命令，只是RUN指令是指定镜像被构建时要运行的指令，而CMD是指定容器被启动时要运行的命令。这和使用<code>docker run</code>命令启动容器时执行要运行的命令非常类似</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -i -t jamtur01/static_web /bin/true</div></pre></td></tr></table></figure>
<p>与在Dockerfile中使用如下代码是等效的</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CMD</span> ["/bin/true"]</div></pre></td></tr></table></figure>
<p>也可以指定运行使用的参数</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CMD</span> ["/bin/bash", "-l"]</div></pre></td></tr></table></figure>
<p>这里我们将<code>-l</code>参数传递给了<code>/bin/bash</code></p>
<p>最后，需要注意的是，<code>docker run</code>命令可以覆盖<code>CMD</code>指令</p>
<h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p><code>ENTRYPOINT</code>指令不容易在启动容器时被覆盖，<code>docker run</code>命令行中指定的任何参数都会被当作参数再次传递给<code>ENTYRPOINT</code>指定的命令</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENTRYPOINT</span> ["/usr/sbin/nginx"]</div><div class="line"><span class="keyword">CMD</span> ["-h"]</div></pre></td></tr></table></figure>
<p>此时当我们启动一个容器，任何在命令行中指定的参数都会被传递给Nginx守护进程。如果在启动容器时不指定任何参数，则在CMD指令中指定的<code>-h</code>参数会被传递给Nginx守护进程。</p>
<p>这使得我们可以构建一个镜像，该镜像既可以运行一个默认的命令，同时它也支持通过<code>docker run</code>命令行为该命令指定可覆盖的选项或者标志。</p>
<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>用于切换工作目录</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">WORKDIR</span> /opt/webapp/db</div><div class="line"><span class="keyword">RUN</span> bundle install</div><div class="line"><span class="keyword">WORKDIR</span> /opt/webapp</div><div class="line"><span class="keyword">ENTRYPOINT</span> ["rackup"]</div></pre></td></tr></table></figure>
<h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>在镜像构建过程中设置环境变量</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENV</span> RVM_PATH /home/rvm</div></pre></td></tr></table></figure>
<p>这个新的环境变量可以在后续的任何<code>RUN</code>等指令中使用</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ENV</span> TARGET_DIR /opt/app</div><div class="line"><span class="keyword">WORKDIR</span> $TARGET_DIR</div></pre></td></tr></table></figure>
<h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>用来指定该镜像会以什么样的用户去运行</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">USER</span> nginx</div></pre></td></tr></table></figure>
<p>指定该镜像启动的容器会以nginx用户的身份来运行</p>
<p>如果没有使用<code>USER</code>指令指定用户，默认用户为root</p>
<h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>用来向基于镜像创建的容器添加卷，一盒卷是可以存在于一个或多个容器内的特定目录，这个目录可以绕过联合文件系统，并提供如下共享数据或者对数据进行持久化的功能</p>
<ul>
<li>卷可以在容器间共享和重用</li>
<li>一个容器可以不是必须和其他容器共享卷</li>
<li>对卷的修改是立刻生效的</li>
<li>对卷的修改不会对更新镜像产生影响</li>
<li>卷会一直存在直到没有任何容器再使用它</li>
</ul>
<p>卷的功能让我们可以将数据(如源代码),数据库或者其他内容添加到镜像中而不是将这写内容提交到镜像中，并且允许我们在多个容器间共享这些内容，我们可以利用此功能来测试容器和内部的应用程序代码，管理日志，或者处理容器内部的数据库。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">VOLUME</span> ["/opt/project"]</div></pre></td></tr></table></figure>
<p>该指令会为基于此镜像创建的任何容器创建一个名为<code>/opt/project</code>的挂载点</p>
<h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>用来将构建环境下的文件和目录复制到镜像中</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ADD</span> software.lic /opt/applition/software.lic</div></pre></td></tr></table></figure>
<p>该指令将会将构建目录下的<code>software.lic</code>文件复制到镜像中的<code>/opt/applition/software.lic</code>,如果目标地址或目的地址以<code>/</code>结尾，那么docker将会认为是一个目录，否则是文件。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ADD</span> latest.tar.gz /var/www/wordpress</div></pre></td></tr></table></figure>
<p>该命令会将归档文件<code>latest.tar.gz</code>解开到<code>/var/www/wordpress</code>目录下</p>
<h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>非常类似与<code>ADD</code>，它们的根本不同是<code>COPY</code>只关心在构建上下文中复制本地文件，而不会去做文件提取和解压</p>
<p>如果目的地址不存在，docker会自动创建所有需要的目录结构</p>
<h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p>为镜像添加触发器，当一个镜像被用作其他镜像的基础镜像时，该镜像中的触发器将会被执行，并且只会在子镜像中执行，不会在孙子镜像中执行</p>
<h2 id="将镜像推送到Docker-Hub"><a href="#将镜像推送到Docker-Hub" class="headerlink" title="将镜像推送到Docker Hub"></a>将镜像推送到Docker Hub</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker push username/imagename</div></pre></td></tr></table></figure>
<p>将会将镜像推送到到docker hub</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.linuxidc.com/Linux/2015-01/112548.htm" target="_blank" rel="external">Docker 中 latest 标签引发的困惑</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python第三方库索引]]></title>
      <url>https://xin053.github.io/2016/10/06/Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%B4%A2%E5%BC%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>该post记录该blog下的python第三方库学习笔记，易于将来查找。虽然hexo提供的分类也可以找到，不过还不是特别方便，对于博主这种懒人，能方便点就更方便点，所以毫无疑问该post置顶。</p>
<p><strong>持续更新</strong></p>
<a id="more"></a>
<ul>
<li><a href="https://xin053.github.io/2016/06/30/venv%E5%88%9B%E5%BB%BAPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/">venv创建Python虚拟环境</a></li>
<li><a href="https://xin053.github.io/2016/07/02/pip%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">pip包管理器使用详解</a></li>
<li><a href="https://xin053.github.io/2016/07/03/pathlib%E8%B7%AF%E5%BE%84%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">pathlib路径库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/07/04/arrow%E6%97%B6%E9%97%B4%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">arrow时间库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/07/05/ftfy%E6%9B%B4%E6%AD%A3Unicode%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">ftfy更正Unicode库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/07/06/pyfiglet%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">pyfiglet库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/07/07/shortuuid%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">shortuuid库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/07/10/tablib%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">tablib库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/07/18/configparser%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">configparser配置文件解析器使用详解</a></li>
<li><a href="https://xin053.github.io/2016/07/19/asciimatics%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">asciimatics库简介</a></li>
<li><a href="https://xin053.github.io/2016/07/31/click%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">click命令行工具使用详解</a></li>
<li><a href="https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">httpie人性化curl工具使用详解</a></li>
<li><a href="https://xin053.github.io/2016/10/26/Pillow%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/#more">Pillow图片处理库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/10/28/qrcode%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/#more">qrcode二维码生成库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/10/28/Tesseract%E5%85%89%E5%AD%A6%E8%AF%86%E5%88%AB/">Tesseract光学识别</a></li>
<li><a href="https://xin053.github.io/2016/11/05/pydub%E9%9F%B3%E9%A2%91%E5%A4%84%E7%90%86%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/#more">pydub音频处理库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/11/05/moviepy%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/#more">moviepy视频处理库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/11/06/geopy%E5%9C%B0%E7%90%86%E6%9F%A5%E8%AF%A2%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/#more">geopy地理查询库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/11/06/PyMySQL%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">PyMySQL库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/11/08/dataset%E7%AE%80%E6%98%93%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%85%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/#more">dataset简易数据库包使用详解</a></li>
<li><a href="https://xin053.github.io/2016/11/09/PyMongo%E8%8A%92%E6%9E%9C%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">PyMongo芒果库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/11/13/furl%E9%93%BE%E6%8E%A5%E8%A7%A3%E6%9E%90%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">furl链接解析库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/11/14/BeautifulSoup%20html%E4%B8%8Exml%E8%A7%A3%E6%9E%90%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">BeautifulSoup html与xml解析库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/12/10/Scrapy%E7%88%AC%E8%99%AB%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">Scrapy爬虫库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/12/17/yagmail%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">yagmail邮件发送库使用详解</a></li>
<li><a href="https://xin053.github.io/2016/12/20/cryptography%E5%8A%A0%E5%AF%86%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/#more">cryptography加密库使用详解</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python官方文档摘记]]></title>
      <url>https://xin053.github.io/2016/10/06/Python%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E6%91%98%E8%AE%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>python官方文档无疑是每个学习python的pythoner必看的，除了<a href="https://docs.python.org/3/tutorial/index.html" target="_blank" rel="external">The Python Tutorial</a>新手必看之外，最重要莫过于<a href="https://docs.python.org/3/reference/index.html" target="_blank" rel="external">The Python Language Reference</a>和<a href="https://docs.python.org/3/library/index.html" target="_blank" rel="external">The Python Standard Library</a><br>前者简单介绍了有关python的实现，后者则是python的标准库的详解，无疑是很好的学习资源，在此记下对于我日常而言使用比较多的库，当作索引，以便将来查阅。</p>
<p><strong>python官方文档版本：3.5.2</strong><br><strong>持续更新</strong></p>
<a id="more"></a>
<p>The Python Language Reference：</p>
<ul>
<li><a href="https://docs.python.org/3/reference/lexical_analysis.html" target="_blank" rel="external">Lexical analysis 词法分析 简单介绍了python一些功能的实现原理</a></li>
<li><a href="https://docs.python.org/3/reference/datamodel.html" target="_blank" rel="external">Data model 介绍了很多双下划线的私有属性 值得反复看</a></li>
<li><a href="https://docs.python.org/3/reference/import.html" target="_blank" rel="external">The import system 导入系统介绍</a></li>
</ul>
<p>The Python Standard Library：</p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html" target="_blank" rel="external">Built-in Functions 必须熟练掌握</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html" target="_blank" rel="external">Built-in Types 基础内容 要熟悉</a></li>
<li><a href="https://docs.python.org/3.5/library/text.html" target="_blank" rel="external">Text Processing Services 文本处理服务</a><ul>
<li><a href="https://docs.python.org/3.5/library/string.html" target="_blank" rel="external"><code>format</code> — 字符串格式化</a></li>
<li><a href="https://docs.python.org/3.5/library/re.html" target="_blank" rel="external"><code>re</code> — 正则表达式操作</a> <a href="https://xin053.github.io/2016/12/01/re%E6%AD%A3%E5%88%99%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/#more">re正则库使用详解</a></li>
</ul>
</li>
<li><p><a href="https://docs.python.org/3/library/datatypes.html" target="_blank" rel="external">Data Types</a></p>
<ul>
<li><a href="https://docs.python.org/3/library/datetime.html" target="_blank" rel="external"><code>datetime</code> — 基础时间和日期模块</a></li>
<li><a href="https://docs.python.org/3/library/calendar.html" target="_blank" rel="external"><code>calendar</code> — General calendar-related functions</a></li>
<li><a href="https://docs.python.org/3/library/collections.html#module-collections" target="_blank" rel="external"><code>collections</code> — 提供代替内置列表元组字典的多种数据结构</a><ul>
<li><a href="https://docs.python.org/3/library/collections.html#collections.ChainMap" target="_blank" rel="external"><code>ChainMap</code> — 通过链表将多个map链在一起 查找时优先查找前面的</a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.Counter" target="_blank" rel="external"><code>Counter</code> — Dict subclass for counting hashable items</a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.deque" target="_blank" rel="external"><code>deque</code> — 双端队列</a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" target="_blank" rel="external"><code>defaultdict</code> — 给字典的value添加默认数据类型</a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.namedtuple" target="_blank" rel="external"><code>namedtuple</code> — 命名元组</a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" target="_blank" rel="external"><code>OrderedDict</code> — 有序字典 Dictionary that remembers insertion order</a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.UserDict" target="_blank" rel="external"><code>UserDict</code> — dict 的一个封装类 主要用来拷贝一个字典的数据</a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.UserList" target="_blank" rel="external"><code>UserList</code></a></li>
<li><a href="https://docs.python.org/3/library/collections.html#collections.UserString" target="_blank" rel="external"><code>UserString</code></a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/heapq.html" target="_blank" rel="external"><code>heapq</code> — 利用堆排序算法排序模块</a></li>
<li><a href="https://docs.python.org/3/library/bisect.html" target="_blank" rel="external"><code>bisect</code> — 利用二分法将元素插入到已排序列表后依然保持已排序</a></li>
<li><a href="https://docs.python.org/3/library/weakref.html" target="_blank" rel="external"><code>weakref</code> — 弱引用 用来避免循环引用导致对象没有被GC回收</a></li>
<li><a href="https://docs.python.org/3/library/types.html" target="_blank" rel="external"><code>types</code> — Define names for built-in types that aren’t directly accessible as a builtin</a></li>
<li><a href="https://docs.python.org/3/library/copy.html" target="_blank" rel="external"><code>copy</code> — 分浅拷贝(不拷贝子对象)与深拷贝(拷贝子对象)</a></li>
<li><a href="https://docs.python.org/3/library/pprint.html" target="_blank" rel="external"><code>pprint</code> — Data pretty printer</a></li>
<li><a href="https://docs.python.org/3/library/reprlib.html" target="_blank" rel="external"><code>reprlib</code> — 可以限制字符串长度的repr</a></li>
<li><a href="https://docs.python.org/3/library/enum.html" target="_blank" rel="external"><code>enum</code> — 3.4出现的</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/numeric.html" target="_blank" rel="external">Numeric and Mathematical Modules</a><ul>
<li><a href="https://docs.python.org/3/library/math.html" target="_blank" rel="external"><code>math</code> — 常用数学操作 例如绝对值 阶乘 sin(x) cos(x)等</a></li>
<li><a href="https://docs.python.org/3/library/decimal.html" target="_blank" rel="external"><code>decimal</code> — 更精确的数据类型 注意对于float数据要先转成字符串</a></li>
<li><a href="https://docs.python.org/3/library/fractions.html" target="_blank" rel="external"><code>fractions</code> — 分数  如果需要准确精度也需要导入decimal包</a></li>
<li><a href="https://docs.python.org/3/library/random.html" target="_blank" rel="external"><code>random</code> — 产生随机数 可指定产生哪个范围的随机数也能指定返回整数 但是不能用在安全方面</a></li>
<li><a href="https://docs.python.org/3/library/statistics.html" target="_blank" rel="external"><code>statistics</code> — 统计学函数 例如求均值 中值 众数 标准差和方差</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/functional.html" target="_blank" rel="external">Functional Programming Modules</a><ul>
<li><a href="https://docs.python.org/3/library/itertools.html" target="_blank" rel="external"><code>itertools</code> — 提供多种常用便利操作 组合等等 返回值为生成器或者迭代器</a></li>
<li><a href="https://docs.python.org/3/library/functools.html" target="_blank" rel="external"><code>functools</code> — 提供一些方法对函数进行封装 以及reduce()</a></li>
<li><a href="https://docs.python.org/3/library/operator.html" target="_blank" rel="external"><code>operator</code> — 各种常用的操作符都封装到了该模块中 例如加减乘除 大小比较等等</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/filesys.html" target="_blank" rel="external">File and Directory Access</a><ul>
<li><a href="https://docs.python.org/3/library/pathlib.html" target="_blank" rel="external"><code>pathlib</code> — 路径库</a>  <a href="https://xin053.github.io/2016/07/03/pathlib%E8%B7%AF%E5%BE%84%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">pathlib路径库使用详解</a></li>
<li><a href="https://docs.python.org/3/library/os.path.html" target="_blank" rel="external"><code>os.path</code> — 同样是路径库 与pathlib不同的是后者上升到了对象级别</a></li>
<li><a href="https://docs.python.org/3/library/stat.html" target="_blank" rel="external"><code>stat</code> — 显示文件mode等信息 也就是linux中 <code>ls -al</code> 显示的那些内容</a></li>
<li><a href="https://docs.python.org/3/library/tempfile.html" target="_blank" rel="external"><code>tempfile</code> — 创建临时文件或临时目录 使用特定的函数可以使得创建的临时文件在关闭的时候自动删除</a></li>
<li><a href="https://docs.python.org/3/library/glob.html" target="_blank" rel="external"><code>glob</code> — 匹配文件后缀名  可以包含路径</a></li>
<li><a href="https://docs.python.org/3/library/fnmatch.html" target="_blank" rel="external"><code>fnmatch</code> — 匹配文件名  不能包含路径</a></li>
<li><a href="https://docs.python.org/3/library/linecache.html" target="_blank" rel="external"><code>linecache</code> — 获取文件指定行内容并缓存</a></li>
<li><a href="https://docs.python.org/3/library/shutil.html" target="_blank" rel="external"><code>shutil</code> — 提供高层次的文件操作 包括文件复制删除修改权限等 也有linux下<code>which</code>命令的功能 也提供简单的文件打包和解包 shell util 的简称</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/persistence.html" target="_blank" rel="external">Data Persistence</a><ul>
<li><a href="https://docs.python.org/3/library/pickle.html" target="_blank" rel="external"><code>pickle</code> — 序列化 可序列化到文件 网络流或数据库 注意序列化安全漏洞</a></li>
<li><a href="https://docs.python.org/3/library/copyreg.html" target="_blank" rel="external"><code>copyreg</code> — 设置使用<code>pickle</code>和<code>copy</code>模块序列化或拷贝对象时将执行的函数</a></li>
<li><a href="https://docs.python.org/3/library/sqlite3.html" target="_blank" rel="external"><code>sqlite3</code> — sqlite数据库</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/archiving.html" target="_blank" rel="external">Data Compression and Archiving</a><ul>
<li><a href="https://docs.python.org/3/library/zlib.html" target="_blank" rel="external"><code>zlib</code> — gzip压缩</a></li>
<li><a href="https://docs.python.org/3/library/gzip.html" target="_blank" rel="external"><code>gzip</code> — gzip压缩</a></li>
<li><a href="https://docs.python.org/3/library/bz2.html" target="_blank" rel="external"><code>bz2</code> — bz2压缩</a></li>
<li><a href="https://docs.python.org/3/library/zipfile.html" target="_blank" rel="external"><code>zipfile</code> — zip压缩</a></li>
<li><a href="https://docs.python.org/3/library/tarfile.html" target="_blank" rel="external"><code>tarfile</code> — tar打包</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/fileformats.html" target="_blank" rel="external">File Formats</a><ul>
<li><a href="https://docs.python.org/3/library/csv.html" target="_blank" rel="external"><code>csv</code> — csv格式相关</a></li>
<li><a href="https://docs.python.org/3/library/configparser.html" target="_blank" rel="external"><code>configparser</code> — ini配置文件读取</a> <a href="https://xin053.github.io/2016/07/18/configparser%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">configparser配置文件解析器使用详解</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/crypto.html" target="_blank" rel="external">Cryptographic Services</a><ul>
<li><a href="https://docs.python.org/3/library/hashlib.html" target="_blank" rel="external"><code>hashlib</code> — 各种加密算法</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/allos.html" target="_blank" rel="external">Generic Operating System Services</a><ul>
<li><a href="https://docs.python.org/3/library/os.html" target="_blank" rel="external"><code>os</code> — 与系统相关的</a> <a href="https://xin053.github.io/2016/11/29/os%E5%BA%93%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/">os库常用方法使用介绍</a></li>
<li><a href="https://docs.python.org/3/library/io.html" target="_blank" rel="external"><code>io</code> — 输入输出流</a></li>
<li><a href="https://docs.python.org/3/library/argparse.html" target="_blank" rel="external"><code>argparse</code> — 命令行工具</a> <a href="https://xin053.github.io/2016/07/31/click%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/">click命令行工具使用详解</a></li>
<li><a href="https://docs.python.org/3/library/logging.html" target="_blank" rel="external"><code>logging</code> — 日志</a> <a href="http://www.jianshu.com/p/feb86c06c4f4" target="_blank" rel="external">python logging模块使用教程</a> <a href="http://blog.csdn.net/zyz511919766/article/details/25136485" target="_blank" rel="external">Python logging模块详解</a></li>
<li><a href="https://docs.python.org/3/library/getpass.html" target="_blank" rel="external"><code>getpass</code> — 像linux中输入密码一样不显示输入的密码</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/concurrency.html" target="_blank" rel="external">Concurrent Execution</a><ul>
<li>线程</li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/ipc.html" target="_blank" rel="external">Interprocess Communication and Networking</a><ul>
<li><a href="https://docs.python.org/3/library/socket.html" target="_blank" rel="external"><code>socket</code> — 底层socket</a></li>
<li><a href="https://docs.python.org/3/library/ssl.html" target="_blank" rel="external"><code>ssl</code></a></li>
<li>asyncio</li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/netdata.html" target="_blank" rel="external">Internet Data Handling</a><ul>
<li><a href="https://docs.python.org/3/library/json.html" target="_blank" rel="external"><code>json</code></a></li>
<li><a href="https://docs.python.org/3/library/mimetypes.html" target="_blank" rel="external"><code>mimetypes</code> — Map filenames to MIME types</a></li>
<li><a href="https://docs.python.org/3/library/base64.html" target="_blank" rel="external"><code>base64</code> — Base16, Base32, Base64, Base85 Data Encodings</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/markup.html" target="_blank" rel="external">Structured Markup Processing Tools</a><ul>
<li>html和xml解析 掌握BeautifulSoup即可  <a href="https://xin053.github.io/categories/Python%E6%A8%A1%E5%9D%97%E5%AD%A6%E4%B9%A0/">BeautifulSoup html与xml解析库使用详解</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/internet.html" target="_blank" rel="external">Internet Protocols and Support 常用网络协议</a> </li>
<li><a href="https://docs.python.org/3/library/i18n.html" target="_blank" rel="external">Internationalization 国际化</a></li>
<li><a href="https://docs.python.org/3/library/debug.html" target="_blank" rel="external">Debugging and Profiling</a><ul>
<li><a href="https://docs.python.org/3/library/timeit.html" target="_blank" rel="external"><code>timeit</code> — Measure execution time of small code snippets</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/python.html" target="_blank" rel="external">Python Runtime Services</a><ul>
<li><a href="https://docs.python.org/3/library/sys.html" target="_blank" rel="external"><code>sys</code> — System-specific parameters and functions</a></li>
<li><a href="https://docs.python.org/3/library/warnings.html" target="_blank" rel="external"><code>warnings</code> — Warning control</a></li>
<li><a href="https://docs.python.org/3/library/contextlib.html" target="_blank" rel="external"><code>contextlib</code> — Utilities for <code>with</code>-statement contexts</a></li>
<li><a href="https://docs.python.org/3/library/atexit.html" target="_blank" rel="external"><code>atexit</code> — Exit handlers</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/modules.html" target="_blank" rel="external">Importing Modules</a><ul>
<li><a href="https://docs.python.org/3/library/zipimport.html" target="_blank" rel="external"><code>zipimport</code> — Import modules from Zip archives</a></li>
<li><a href="https://docs.python.org/3/library/modulefinder.html" target="_blank" rel="external"><code>modulefinder</code> — Find modules used by a script</a></li>
<li><a href="https://docs.python.org/3/library/importlib.html" target="_blank" rel="external"><code>importlib</code> – The implementation of import</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/language.html" target="_blank" rel="external">Python Language Services</a><ul>
<li><a href="https://docs.python.org/3/library/py_compile.html" target="_blank" rel="external"><code>py_compile</code> — Compile Python source files</a></li>
<li><a href="https://docs.python.org/3/library/compileall.html" target="_blank" rel="external"><code>compileall</code> — Byte-compile Python libraries</a></li>
<li><a href="https://docs.python.org/3/library/dis.html" target="_blank" rel="external"><code>dis</code> — Disassembler for Python bytecode</a></li>
</ul>
</li>
<li><a href="https://docs.python.org/3/library/windows.html" target="_blank" rel="external">MS Windows Specific Services</a><ul>
<li><a href="https://docs.python.org/3/library/winreg.html" target="_blank" rel="external"><code>winreg</code> – Windows registry access</a></li>
</ul>
</li>
</ul>
<p><a href="https://docs.python.org/3.6/index.html" target="_blank" rel="external">python3.6新增</a></p>
<ul>
<li><a href="https://docs.python.org/3.6/library/crypto.html" target="_blank" rel="external">Cryptographic Services</a><ul>
<li><a href="https://docs.python.org/3.6/library/secrets.html#module-secrets" target="_blank" rel="external"><code>secrets</code> — 生成安全的随机数，功能同<code>os.urandom()</code></a></li>
</ul>
</li>
</ul>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python风格指南]]></title>
      <url>https://xin053.github.io/2016/10/03/Python%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><blockquote>
<p>仅对包和模块使用导入</p>
</blockquote>
<p>虽然也可以导入某个函数，但这样做明显使得结构不清晰，所以应该仅仅对包和模块使用导入</p>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><blockquote>
<p>使用模块的全路径名来导入每个模块</p>
</blockquote>
<p>避免模块名冲突. 查找包更容易.</p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><blockquote>
<p>允许使用异常, 但必须小心</p>
</blockquote>
<p>模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的<code>Exception</code>类继承. 模块的异常基类应该叫做<code>Error</code>.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span><span class="params">(Exception)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>永远不要使用 <code>except:</code> 语句来捕获所有异常, 也不要捕获<code>Exception</code> 或者 <code>StandardError</code>,因为这样容易隐藏真正的bug</p>
<p>当捕获异常时, 使用 <code>as</code> 而不要用逗号. 例如:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">raise</span> Error</div><div class="line"><span class="keyword">except</span> Error <span class="keyword">as</span> error:</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><blockquote>
<p>避免全局变量</p>
</blockquote>
<p>避免使用全局变量, 用类变量来代替. 但也有一些例外:</p>
<ul>
<li>脚本的默认选项.</li>
<li>模块级常量. 例如:　PI = 3.14159. 常量应该全大写, 用下划线连接.</li>
<li>有时候用全局变量来缓存值或者作为函数返回值很有用.</li>
<li>如果需要, 全局变量应该仅在模块内部可用, 并通过模块级的公共函数来访问.</li>
</ul>
<h2 id="嵌套-局部-内部类或函数"><a href="#嵌套-局部-内部类或函数" class="headerlink" title="嵌套/局部/内部类或函数"></a>嵌套/局部/内部类或函数</h2><blockquote>
<p>鼓励使用嵌套/本地/内部类或函数</p>
</blockquote>
<h2 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h2><blockquote>
<p>可以在简单情况下使用</p>
</blockquote>
<p>简单的列表推导可以比其它的列表创建方法更加清晰简单. 生成器表达式可以十分高效, 因为它们避免了创建整个列表.</p>
<p>适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.</p>
<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><blockquote>
<p>按需使用生成器.</p>
</blockquote>
<h2 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h2><blockquote>
<p>适用于单行函数</p>
</blockquote>
<p>适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.</p>
<h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><blockquote>
<p>适用于单行函数</p>
</blockquote>
<p>条件表达式是对于if语句的一种更为简短的句法规则. 例如:<code>x = 1 if cond else 2</code>.</p>
<p>适用于单行函数. 在其他情况下，推荐使用完整的if语句.</p>
<h2 id="True-False的求值"><a href="#True-False的求值" class="headerlink" title="True/False的求值"></a>True/False的求值</h2><blockquote>
<p>尽可能使用隐式false</p>
</blockquote>
<p>Python在布尔上下文中会将某些值求值为false. 按简单的直觉来讲, 就是所有的”空”值都被认为是false. 因此<code>0</code>， <code>None</code>, <code>[]</code>, <code>{}</code>, <code>“”</code> 都被认为是<code>false</code>.</p>
<p>尽可能使用隐式的false, 例如: 使用 <code>if foo:</code> 而不是<code>if foo != []:</code> 不过还是有一些注意事项需要你铭记在心:</p>
<ul>
<li>永远不要用<code>==</code>或者<code>!=</code>来比较单件, 比如<code>None</code>. 使用<code>is</code>或者<code>is not</code>.</li>
<li>对于序列(字符串, 列表, 元组), 要注意空序列是false. </li>
</ul>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><blockquote>
<p>不要依赖内建类型的原子性.</p>
</blockquote>
<p>虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的</p>
<p>优先使用<code>Queue</code>模块的 <code>Queue</code> 数据类型作为线程间的数据通信方式. 另外, 使用<code>threading</code>模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用 <code>threading.Condition</code> 来取代低级别的锁了.</p>
<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><blockquote>
<p>不要在行尾加分号, 也不要用分号将两条命令放在同一行.</p>
</blockquote>
<h2 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h2><blockquote>
<p>每行不超过80个字符</p>
</blockquote>
<p>例外:</p>
<ul>
<li>长的导入模块语句</li>
<li>注释里的URL</li>
</ul>
<p>不要使用反斜杠连接行.</p>
<p>Python会将 圆括号, 中括号和花括号中的行隐式的连接起来 , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Yes: foo_bar(self, width, height, color=<span class="string">'black'</span>, design=<span class="keyword">None</span>, x=<span class="string">'foo'</span>,</div><div class="line">             emphasis=<span class="keyword">None</span>, highlight=<span class="number">0</span>)</div><div class="line"></div><div class="line">     <span class="keyword">if</span> (width == <span class="number">0</span> <span class="keyword">and</span> height == <span class="number">0</span> <span class="keyword">and</span></div><div class="line">         color == <span class="string">'red'</span> <span class="keyword">and</span> emphasis == <span class="string">'strong'</span>):</div></pre></td></tr></table></figure>
<h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><blockquote>
<p>顶级定义之间空两行, 方法定义之间空一行</p>
</blockquote>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><blockquote>
<p>按照标准的排版规范来使用标点两边的空格</p>
</blockquote>
<p>括号内不要有空格.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Yes: spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;, [])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">No:  spam( ham[ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125;, [ ] )</div></pre></td></tr></table></figure>
<h2 id="Shebang"><a href="#Shebang" class="headerlink" title="Shebang"></a>Shebang</h2><blockquote>
<p>大部分.py文件不必以#!作为文件的开始. 根据 <a href="http://www.python.org/dev/peps/pep-0394/" target="_blank" rel="external">PEP-394</a> , 程序的main文件应该以 <code>#!/usr/bin/python2</code>或者 <code>#!/usr/bin/python3</code>开始.</p>
</blockquote>
<p>#!先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略. 因此只有被直接执行的文件中才有必要加入#!.</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote>
<p>确保对模块, 函数, 方法和行内注释使用正确的风格</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_bigtable_rows</span><span class="params">(big_table, keys, other_silly_variable=None)</span>:</span></div><div class="line">    <span class="string">"""Fetches rows from a Bigtable.</span></div><div class="line"></div><div class="line">    Retrieves rows pertaining to the given keys from the Table instance</div><div class="line">    represented by big_table.  Silly things may happen if</div><div class="line">    other_silly_variable is not None.</div><div class="line"></div><div class="line">    Args:</div><div class="line">        big_table: An open Bigtable Table instance.</div><div class="line">        keys: A sequence of strings representing the key of each table row</div><div class="line">            to fetch.</div><div class="line">        other_silly_variable: Another optional variable, that has a much</div><div class="line">            longer name than the other args, and which does nothing.</div><div class="line"></div><div class="line">    Returns:</div><div class="line">        A dict mapping keys to the corresponding table row data</div><div class="line">        fetched. Each row is represented as a tuple of strings. For</div><div class="line">        example:</div><div class="line"></div><div class="line">        &#123;'Serak': ('Rigel VII', 'Preparer'),</div><div class="line">         'Zim': ('Irk', 'Invader'),</div><div class="line">         'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</div><div class="line"></div><div class="line">        If a key from the keys argument is missing from the dictionary,</div><div class="line">        then that row was not found in the table.</div><div class="line"></div><div class="line">    Raises:</div><div class="line">        IOError: An error occurred accessing the bigtable.Table object.</div><div class="line">    """</div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote>
<p>类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""Summary of class here.</span></div><div class="line"></div><div class="line">    Longer class information....</div><div class="line">    Longer class information....</div><div class="line"></div><div class="line">    Attributes:</div><div class="line">        likes_spam: A boolean indicating if we like SPAM or not.</div><div class="line">        eggs: An integer count of the eggs we have laid.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, likes_spam=False)</span>:</span></div><div class="line">        <span class="string">"""Inits SampleClass with blah."""</span></div><div class="line">        self.likes_spam = likes_spam</div><div class="line">        self.eggs = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""Performs operation blah."""</span></div></pre></td></tr></table></figure>
<h2 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h2><blockquote>
<p>如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Yes: <span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span><span class="params">(object)</span>:</span></div><div class="line">         <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line">     <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">         <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span><span class="params">(object)</span>:</span></div><div class="line">             <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line">     <span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span><span class="params">(ParentClass)</span>:</span></div><div class="line">         <span class="string">"""Explicitly inherits from another class already."""</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">No: <span class="class"><span class="keyword">class</span> <span class="title">SampleClass</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span>:</span></div><div class="line"></div><div class="line">        <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span>:</span></div><div class="line">            <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<p>继承自 <code>object</code> 是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受 <a href="http://www.python.org/dev/peps/pep-3000/" target="_blank" rel="external">PEP-3000</a> 的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括:</p>
<p><code>__new__, __init__, __delattr__, __getattribute__, __setattr__, __hash__, __repr__, and __str__</code></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote>
<p>即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.</p>
</blockquote>
<p>避免在循环中用<code>+</code>和<code>+=</code>操作符来累加字符串.作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用 <code>.join</code> 连接列表. </p>
<h2 id="文件和sockets"><a href="#文件和sockets" class="headerlink" title="文件和sockets"></a>文件和sockets</h2><blockquote>
<p>在文件和sockets结束时, 显式的关闭它.</p>
</blockquote>
<p>推荐使用 <code>with</code>语句 以管理文件:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"hello.txt"</span>) <span class="keyword">as</span> hello_file:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> hello_file:</div><div class="line">        <span class="keyword">print</span> line</div></pre></td></tr></table></figure>
<p>对于不支持使用<code>with</code>语句的类似文件的对象,使用 <code>contextlib.closing()</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> contextlib</div><div class="line"></div><div class="line"><span class="keyword">with</span> contextlib.closing(urllib.urlopen(<span class="string">"http://www.python.org/"</span>)) <span class="keyword">as</span> front_page:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> front_page:</div><div class="line">        <span class="keyword">print</span> line</div></pre></td></tr></table></figure>
<h2 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h2><blockquote>
<p>为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.</p>
</blockquote>
<p>当你写了一个TODO, 请注上你的名字.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># TODO(kl@gmail.com): Use a "*" here for string repetition.</span></div><div class="line"><span class="comment"># TODO(Zeke) Change this to use relations.</span></div></pre></td></tr></table></figure>
<h2 id="导入格式"><a href="#导入格式" class="headerlink" title="导入格式"></a>导入格式</h2><blockquote>
<p>每个导入应该独占一行</p>
</blockquote>
<p>导入应该按照从最通用到最不通用的顺序分组:</p>
<ul>
<li>标准库导入</li>
<li>第三方库导入</li>
<li>应用程序指定导入</li>
</ul>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><blockquote>
<p>module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.</p>
</blockquote>
<p>命名约定:</p>
<ul>
<li>所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.</li>
<li>用单下划线(_)开头表示模块变量或函数是protected的(使用import * from时不会包含).</li>
<li>用双下划线(__)开头的实例变量或方法表示类内私有.</li>
<li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.</li>
<li>对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.</li>
</ul>
<p>Python之父Guido推荐的规范:</p>
<table>
<thead>
<tr>
<th style="text-align:center">Type</th>
<th style="text-align:center">Public</th>
<th style="text-align:center">Internal</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Modules</td>
<td style="text-align:center">lower_with_under</td>
<td style="text-align:center">_lower_with_under</td>
</tr>
<tr>
<td style="text-align:center">Packages</td>
<td style="text-align:center">lower_with_under</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Classes</td>
<td style="text-align:center">CapWords</td>
<td style="text-align:center">_CapWords</td>
</tr>
<tr>
<td style="text-align:center">Exceptions</td>
<td style="text-align:center">CapWords</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Functions</td>
<td style="text-align:center">lower_with_under()</td>
<td style="text-align:center">_lower_with_under()</td>
</tr>
<tr>
<td style="text-align:center">Global/Class Constants</td>
<td style="text-align:center">CAPS_WITH_UNDER</td>
<td style="text-align:center">_CAPS_WITH_UNDER</td>
</tr>
<tr>
<td style="text-align:center">Global/Class Variables</td>
<td style="text-align:center">lower_with_under</td>
<td style="text-align:center">_lower_with_under</td>
</tr>
<tr>
<td style="text-align:center">Instance Variables</td>
<td style="text-align:center">lower_with_under</td>
<td style="text-align:center">_lower_with_under (protected) or __lower_with_under (private)</td>
</tr>
<tr>
<td style="text-align:center">Method Names</td>
<td style="text-align:center">lower_with_under()</td>
<td style="text-align:center">_lower_with_under() (protected) or __lower_with_under() (private)</td>
</tr>
<tr>
<td style="text-align:center">Function/Method Parameters</td>
<td style="text-align:center">lower_with_under</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Local Variables</td>
<td style="text-align:center">lower_with_under</td>
</tr>
</tbody>
</table>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><blockquote>
<p>即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.</p>
</blockquote>
<p>在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查 <code>if __name__ == &#39;__main__&#39;</code> , 这样当模块被导入时主程序就不会被执行.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">      ...</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p><strong>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.</strong></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/" target="_blank" rel="external">Python风格指南</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker学习笔记(二)]]></title>
      <url>https://xin053.github.io/2016/09/20/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>日常升级完VirtualBox后，发现打开docker虚拟机出差，报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed to open/create the internal network &apos;HostInterfaceNetworking-VirtualBox Host-Only Ethernet Adapter&apos;</div></pre></td></tr></table></figure>
<p>解决方法：</p>
<ul>
<li>打开网络和共享中心</li>
<li>更多适配器设置</li>
<li>选择 对应的网络适配器 adapter （如： VirtualBox Host-Only Ethernet Adapter）</li>
<li>右键“属性”</li>
<li>然后勾选 VirtualBox NDIS6 Bridged Networking Driver 选项，确定</li>
</ul>
<a id="more"></a>
<h2 id="使用docker"><a href="#使用docker" class="headerlink" title="使用docker"></a>使用docker</h2><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</div></pre></td></tr></table></figure>
<p>注意区分容器和镜像，我们可以基于同一个镜像创建多个容器，但是每个容器的id和名称都是不同的，如果我们创建容器时不指定容器的名字，docker会帮我们自动随机生成一个名称，也可以通过<code>--name</code>来指定名称。如果创建容器使用的镜像在本地不存在，docker会自动去docker hub下载相应的镜像，这里强烈推荐alpine镜像</p>
<h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p>首先通过Kitematic 下载alpine镜像,然后启动容易，输入</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure>
<p>查看所有的容器，包括正在运行和已经停止的</p>
<p><img src="http://i.imgur.com/cBXdSTK.png" alt=""></p>
<p>输入：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps</div></pre></td></tr></table></figure>
<p>则是查看正在运行的容器</p>
<h3 id="重启和停止容器"><a href="#重启和停止容器" class="headerlink" title="重启和停止容器"></a>重启和停止容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start/stop/restart docker-name/id</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/2PQcNnG.png" alt=""></p>
<p>docker容器在重新启动的时候，会沿用<code>docker run</code>命令指定的参数来运行。</p>
<p>容器没有stop时，这时候可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker attach docker-name/id</div></pre></td></tr></table></figure>
<p>附着到正在运行的容器上</p>
<p>如果退出容器的shell，容器也会随之停止运行</p>
<h2 id="创建守护式容器"><a href="#创建守护式容器" class="headerlink" title="创建守护式容器"></a>创建守护式容器</h2><p>以上创建的都是交互式运行的容器，我们也可以创建长期运行的守护式容器，非常适合运行应用程序和服务</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name alpine-test -d alpine sh -c <span class="string">"while true;do echo hello world;sleep 1;done"</span></div></pre></td></tr></table></figure>
<p>该命令基于alpine镜像创建一个一个名称为alpine-test的容器，<code>-d</code>表示是守护式容器，执行该命令只会返回容器的id，该容器运行时每过1秒会输出一个<code>hello world</code>，通过<code>docker logs -f docker-name/id</code>可以查看容器运行日志</p>
<h2 id="其他常用docker命令"><a href="#其他常用docker命令" class="headerlink" title="其他常用docker命令"></a>其他常用docker命令</h2><h3 id="查看容器内的进程"><a href="#查看容器内的进程" class="headerlink" title="查看容器内的进程"></a>查看容器内的进程</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker top docker-name/id</div></pre></td></tr></table></figure>
<h3 id="在容器内部运行进程"><a href="#在容器内部运行进程" class="headerlink" title="在容器内部运行进程"></a>在容器内部运行进程</h3><p>例子：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -d docker-name/id touch /etc/config_file</div></pre></td></tr></table></figure>
<p>创建了一个后台运行的进程</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -t -i docker-name/id /bin/bash</div></pre></td></tr></table></figure>
<p>创建了一个前台运行的进程,也就是创建了一个bash会话</p>
<h3 id="自动重启容器"><a href="#自动重启容器" class="headerlink" title="自动重启容器"></a>自动重启容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --restart=always --name alpine-test -d alpine sh</div></pre></td></tr></table></figure>
<p>创建的容器会在出现错误停止运行后自动重启容器</p>
<h3 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect docker-name/id</div></pre></td></tr></table></figure>
<p>可以查看创建的容器的相关信息</p>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm docker-name/id</div></pre></td></tr></table></figure>
<p>删除容器之后要先停止容器</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><p><a href="http://blog.csdn.net/zdy0_2004/article/details/50785506" target="_blank" rel="external">Docker微容器Alpine Linux</a></p>
</li>
<li><p><a href="https://hub.docker.com/r/_/alpine/" target="_blank" rel="external">alpine</a></p>
</li>
<li><p><a href="https://hub.docker.com/u/1science/" target="_blank" rel="external">1science</a>/<a href="https://hub.docker.com/r/1science/alpine/" target="_blank" rel="external">alpine</a></p>
<p>​</p>
<p>​</p>
</li>
</ul>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Go学习笔记(三)]]></title>
      <url>https://xin053.github.io/2016/09/20/Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">name</span><span class="params">(parameter-list)</span> <span class="params">(result-list)</span></span> &#123;</div><div class="line">	body</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果函数声明没有返回值列表，则函数返回空。</p>
<h3 id="函数值"><a href="#函数值" class="headerlink" title="函数值"></a>函数值</h3><p>函数像其他值一样，拥有类型，可以被赋值给其他变量:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">square</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> n * n &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">negative</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> -n &#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">product</span><span class="params">(m, n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> m * n &#125;</div><div class="line"></div><div class="line">f := square</div><div class="line">fmt.Println(f(<span class="number">3</span>)) <span class="comment">// "9"</span></div><div class="line"></div><div class="line">f = negative</div><div class="line">fmt.Println(f(<span class="number">3</span>)) <span class="comment">// "-3"</span></div><div class="line">fmt.Printf(<span class="string">"%T\n"</span>, f) <span class="comment">// "func(int) int"</span></div><div class="line"></div><div class="line">f = product <span class="comment">// compile error: can't assign func(int, int) int to func(int) int</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p><strong>拥有函数名的函数只能在包级语法中被声明</strong>，而通过函数字面量，可以绕过这一限制：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// squares返回一个匿名函数。</span></div><div class="line"><span class="comment">// 该匿名函数每次被调用时都会返回下一个数的平方。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">squares</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> x <span class="keyword">int</span></div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">		x++</div><div class="line">		<span class="keyword">return</span> x * x</div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	f := squares()</div><div class="line">	fmt.Println(f()) <span class="comment">// "1"</span></div><div class="line">	fmt.Println(f()) <span class="comment">// "4"</span></div><div class="line">	fmt.Println(f()) <span class="comment">// "9"</span></div><div class="line">	fmt.Println(f()) <span class="comment">// "16"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>在参数列表的最后一个参数类型之前加上省略符号<code>...</code>， 这表示该函数会接收任意数量的该类型参数。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(vals...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">	total := <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> _, val := <span class="keyword">range</span> vals &#123;</div><div class="line">		total += val</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> total</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在函数体中,<code>vals</code>被看作是类型为<code>[] int</code>的切片。如果原始参数已经是切片类型， 我们该如何传递给<code>sum</code>？只需在最后一个参数后加上省略符。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">values := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">fmt.Println(sum(values...)) <span class="comment">// "10"</span></div></pre></td></tr></table></figure>
<h2 id="defer语法"><a href="#defer语法" class="headerlink" title="defer语法"></a>defer语法</h2><p>在调用普通函数或方法前加上关键字defer， 就完成了defer所需要的语法。 当defer语句被执行时， 跟在defer后面的函数会被延迟执行。 <strong>直到包含该defer语句的函数执行完毕时，defer后的函数才会被执行</strong>， 不论包含defer语句的函数是通过return正常结束， 还是由于panic导致的异常结束。 <strong>你可以在一个函数中执行多条defer语句， 它们的执行顺序与声明顺序相反</strong>。</p>
<p><strong>defer语句经常被用于处理成对的操作， 如打开、 关闭、 连接、 断开连接、 加锁、 释放锁。 通过defer机制， 不论函数逻辑多复杂， 都能保证在任何执行路径下， 资源被释放。 释放资源的defer应该直接跟在请求资源的语句后。</strong></p>
<h2 id="panic机制"><a href="#panic机制" class="headerlink" title="panic机制"></a>panic机制</h2><p>虽然Go的panic机制类似于其他语言的异常：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> s := suit(drawCard()); s &#123;</div><div class="line">	<span class="keyword">case</span> <span class="string">"Spades"</span>: <span class="comment">// ...</span></div><div class="line">	<span class="keyword">case</span> <span class="string">"Hearts"</span>: <span class="comment">// ...</span></div><div class="line">	<span class="keyword">case</span> <span class="string">"Diamonds"</span>: <span class="comment">// ...</span></div><div class="line">	<span class="keyword">case</span> <span class="string">"Clubs"</span>: <span class="comment">// ...</span></div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"invalid suit %q"</span>, s)) <span class="comment">// Joker?</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但panic的适用场景有一些不同。 由于panic会引起程序的崩溃， 因此panic一般用于严重错误， 如程序内部的逻辑不一致。 勤奋的程序员认为任何崩溃都表明代码中存在漏洞， 所以对于大部分漏洞， 我们应该使用Go提供的错误机制，而不是panic， 尽量避免程序的崩溃。 在健壮的程序中， 任何可以预料到的错误， 如不正确的输入、 错误的配置或是失败的I/O操作都应该被优雅的处理， 最好的处理方式， 就是使用Go的错误机制。</p>
<h2 id="Recover捕获异常"><a href="#Recover捕获异常" class="headerlink" title="Recover捕获异常"></a>Recover捕获异常</h2><p>如果在deferred函数中调用了内置函数recover， 并且定义该defer语句的函数发生了panic异常， recover会使程序从panic中恢复， 并返回panic value。 导致panic异常的函数不会继续运行， 但能正常返回。 在未发生panic时调用recover， recover会返回nil。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">(input <span class="keyword">string</span>)</span> <span class="params">(s *Syntax, err error)</span></span> &#123;</div><div class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">		<span class="keyword">if</span> p := <span class="built_in">recover</span>(); p != <span class="literal">nil</span> &#123;</div><div class="line">			err = fmt.Errorf(<span class="string">"internal error: %v"</span>, p)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	<span class="comment">// ...parser...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="雷区"><a href="#雷区" class="headerlink" title="雷区"></a>雷区</h2><h3 id="循环中变量的作用域"><a href="#循环中变量的作用域" class="headerlink" title="循环中变量的作用域"></a>循环中变量的作用域</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rmdirs []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></div><div class="line">	<span class="title">for</span> _, <span class="title">d</span> := <span class="title">range</span> <span class="title">tempDirs</span><span class="params">()</span> &#123;</div><div class="line">	dir := d <span class="comment">// <span class="doctag">NOTE:</span> necessary!</span></div><div class="line">	os.MkdirAll(dir, <span class="number">0755</span>) <span class="comment">// creates parent directories too</span></div><div class="line">	rmdirs = <span class="built_in">append</span>(rmdirs, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">	os.RemoveAll(dir)</div><div class="line">	&#125;)</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">// ...do some work…</span></div><div class="line"><span class="keyword">for</span> _, rmdir := <span class="keyword">range</span> rmdirs &#123;</div><div class="line">	rmdir() <span class="comment">// clean up</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可能会感到困惑， 为什么要在循环体中用循环变量<code>d</code>赋值一个新的局部变量， 而不是像下面的代码一样直接使用循环变量<code>dir</code>。 需要注意， 下面的代码是错误的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rmdirs []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></div><div class="line"><span class="title">for</span> _, <span class="title">dir</span> := <span class="title">range</span> <span class="title">tempDirs</span><span class="params">()</span> &#123;</div><div class="line">	os.MkdirAll(dir, <span class="number">0755</span>) <span class="comment">// ok</span></div><div class="line">	rmdirs = <span class="built_in">append</span>(rmdirs, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">	os.RemoveAll(dir) <span class="comment">// <span class="doctag">NOTE:</span> incorrect!</span></div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问题的原因在于循环变量的作用域。 在上面的程序中， for循环语句引入了新的词法块， 循环变量<code>dir</code>在这个词法块中被声明。<br>需要注意， <strong>函数值中记录的是循环变量的内存地址， 而不是循环变量某一时刻的值</strong>。 以<code>dir</code>为例，后续的迭代会不断更新<code>dir</code>的值， 当删除操作执行时， for循环已完成， <code>dir</code>中存储的值等于最后一次迭代的值。 这意味着， 每次对<code>os.RemoveAll</code>的调用删除的都是相同的目录。</p>
<p><strong>最主要原因是匿名函数和defer，go语句都会等待循环结束后，再执行函数值</strong></p>
<p>通常， 为了解决这个问题， 我们会引入一个与循环变量同名的局部变量， 作为循环变量的副本。 比如下面的变量<code>dir</code>， 虽然这看起来很奇怪， 但却很有用。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> _, dir := <span class="keyword">range</span> tempDirs() &#123;</div><div class="line">	dir := dir <span class="comment">// declares inner dir, initialized to outer dir</span></div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul>
<li>将切片或者数组传递给可变参数函数，需要在后面加<code>...</code></li>
<li>虽然在可变参数函数内部， <code>...int</code> 型参数的行为看起来很像切片类型， 但实际上， 可变参数函数和以切片作为参数的函数是不同的。</li>
</ul>]]></content>
      
        <categories>
            
            <category> Go </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Go学习笔记(二)]]></title>
      <url>https://xin053.github.io/2016/09/08/Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h2><p>主要有四种复合数据类型：数组、slice、map和结构体。数组和结构体是具有固定大小的数据结构，slice和map是动态的数据结构，它们将根据需要动态增长。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组默认会生成<code>0~数组长度-1</code>的索引，于是便可以通过下标索引到数组对应元素值，也可以指定一个索引和对应值列表的方式初始化:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Currency <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	USD Currency = <span class="literal">iota</span> 	<span class="comment">// 美元</span></div><div class="line">	EUR 			<span class="comment">// 欧元</span></div><div class="line">	GBP 			<span class="comment">// 英镑</span></div><div class="line">	RMB 			<span class="comment">// 人民币</span></div><div class="line">)</div><div class="line"></div><div class="line">symbol := [...]<span class="keyword">string</span>&#123;USD: <span class="string">"$"</span>, EUR: <span class="string">"€"</span>, GBP: <span class="string">"£"</span>, RMB: <span class="string">"¥"</span>&#125;</div><div class="line"></div><div class="line">fmt.Println(RMB, symbol[RMB]) <span class="comment">// "3 ¥"</span></div></pre></td></tr></table></figure>
<p>在这种形式的数组字面值形式中， 初始化索引的顺序是无关紧要的， 而且没用到的索引可以省略， 和前面提到的规则一样， 未指定初始值的元素将用零值初始化。</p>
<p><strong>数组在实际编程中其实用的很少.</strong></p>
<a id="more"></a>
<h3 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a>Slice</h3><p>Slice代表变成的序列,序列中每个元素具有相同的类型。slice的语法与数组很像，只是没有固定长度。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">letters := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>&#125;</div></pre></td></tr></table></figure>
<p>如果是数组的话：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">letters := [...]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>&#125;</div></pre></td></tr></table></figure>
<p><strong>Slice底层是靠数组实现的。</strong>一个slice是一个轻量级的数据结构，包括三个部分：指针、长度、容量。</p>
<p>指针指向第一个slice元素对应的底层数组元素的地址， 要注意的是slice的第一个元素并不一定就是数组的第一个元素。 长度对应slice中元素的数目；长度不能超过容量， 容量一般是从slice的开始位置到底层数据的结尾位置。 内置的<code>len</code>和<code>cap</code>函数分别返回slice的长度和容量。</p>
<p>多个slice之间可以共享底层的数据， 并且引用的数组部分区间可能重叠。</p>
<p>我们首先定义一个数组：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">months := [...]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">"January"</span>, <span class="comment">/* ... */</span>, <span class="number">12</span>: <span class="string">"December"</span>&#125;</div></pre></td></tr></table></figure>
<p>我们声明数组时直接跳过第0个元素， 第0个元素会被自动初始化为空字符串。</p>
<p><img src="http://i.imgur.com/IQKcgEU.png" alt=""></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Q2 := months[<span class="number">4</span>:<span class="number">7</span>]</div><div class="line">summer := months[<span class="number">6</span>:<span class="number">9</span>]</div><div class="line">fmt.Println(Q2) 	<span class="comment">// ["April" "May" "June"]</span></div><div class="line">fmt.Println(summer) 	<span class="comment">// ["June" "July" "August"]</span></div></pre></td></tr></table></figure>
<p>如果切片操作超出<code>cap(s)</code>的上限将导致一个<code>panic</code>异常， 但是超出<code>len(s)</code>则是意味着扩展slice， 因为新slice的长度会变大：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fmt.Println(summer[:<span class="number">20</span>]) 	<span class="comment">// panic: out of range</span></div><div class="line"></div><div class="line">endlessSummer := summer[:<span class="number">5</span>] 	<span class="comment">// extend a slice (within capacity)</span></div><div class="line">fmt.Println(endlessSummer) 	<span class="comment">// "[June July August September October]"</span></div></pre></td></tr></table></figure>
<p>内置的<code>make</code>函数创建一个指定元素类型、 长度和容量的slice。 容量部分可以省略， 在这种情况下， 容量将等于长度。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">make</span>([]T, <span class="built_in">len</span>)</div><div class="line"><span class="built_in">make</span>([]T, <span class="built_in">len</span>, <span class="built_in">cap</span>) <span class="comment">// same as make([]T, cap)[:len]</span></div></pre></td></tr></table></figure>
<p>内置的<code>append</code>函数用于向slice追加元素：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> runes []<span class="keyword">rune</span></div><div class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> <span class="string">"Hello, 世界"</span> &#123;</div><div class="line">	runes = <span class="built_in">append</span>(runes, r)</div><div class="line">&#125; </div><div class="line">fmt.Printf(<span class="string">"%q\n"</span>, runes) <span class="comment">// "['H' 'e' 'l' 'l' 'o' ',' ' ' '世' '界']"</span></div></pre></td></tr></table></figure>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>map类型可以写为<code>map[K]V</code>， 其中<code>K</code>和<code>V</code>分别对应key和value。 map中所有的key都有相同的类型， 所有的value也有着相同的类型， 但是key和value之间可以是不同的数据类型。 <strong>其中<code>K</code>对应的key必须是支持<code>==</code>比较运算符的数据类型，</strong> 所以map可以通过测试key是否相等来判断是否已经存在。 </p>
<p>内置的<code>make</code>函数可以创建一个map：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>) <span class="comment">// mapping from strings to ints</span></div></pre></td></tr></table></figure>
<p>我们也可以用<code>map</code>字面值的语法创建map， 同时还可以指定一些最初的key/value：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ages := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</div><div class="line">	<span class="string">"alice"</span>:   <span class="number">31</span>,</div><div class="line">	<span class="string">"charlie"</span>: <span class="number">34</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这相当于；</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</div><div class="line">ages[<span class="string">"alice"</span>] = <span class="number">31</span></div><div class="line">ages[<span class="string">"charlie"</span>] = <span class="number">34</span></div></pre></td></tr></table></figure>
<p>因此， 另一种创建空的map的表达式是 <code>map[string]int{}</code> 。</p>
<p>要想遍历map中全部的key/value对的话， 可以使用<code>range</code>风格的for循环实现:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> name, age := <span class="keyword">range</span> ages &#123;</div><div class="line">	fmt.Printf(<span class="string">"%s\t%d\n"</span>, name, age)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>map下标语法也可以返回两个值:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> age, ok := ages[<span class="string">"bob"</span>]; !ok &#123; <span class="comment">/* ... */</span> &#125;</div></pre></td></tr></table></figure>
<p>在这种场景下， map的下标语法将产生两个值；第二个是一个布尔值， 用于报告元素是否真的存在。 布尔变量一般命名为ok， 特别适合马上用于if条件判断部分。</p>
<h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>例子:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</div><div class="line">	ID 		<span class="keyword">int</span></div><div class="line">	Name 		<span class="keyword">string</span></div><div class="line">	Address 	<span class="keyword">string</span></div><div class="line">	DoB 		time.Time</div><div class="line">	Position 	<span class="keyword">string</span></div><div class="line">	Salary 		<span class="keyword">int</span></div><div class="line">	ManagerID 	<span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dilbert Employee</div></pre></td></tr></table></figure>
<p>通常一行对应一个结构体成员， 成员的名字在前类型在后， 不过如果相邻的成员类型如果相同的话可以被合并到一行， 就像下面的<code>Name</code>和<code>Address</code>成员那样：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</div><div class="line">	ID 		<span class="keyword">int</span></div><div class="line">	Name, Address 	<span class="keyword">string</span></div><div class="line">	DoB 		time.Time</div><div class="line">	Position 	<span class="keyword">string</span></div><div class="line">	Salary 		<span class="keyword">int</span></div><div class="line">	ManagerID 	<span class="keyword">int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结构体值也可以用结构体面值表示， 结构体面值可以指定每个成员的值。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span>&#123; X, Y <span class="keyword">int</span> &#125;</div><div class="line"></div><div class="line">p := Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</div></pre></td></tr></table></figure>
<p>上面是初始化结构体的一种方式，但是这要求按顺序初始化结构体中的全部字段，另外一种方法是，<strong>以成员名字和相应的值来初始化， 这样可以包含部分或全部的成员,这也是常用的方式.</strong></p>
<p>Go语言的结构体支持匿名成员，匿名成员的数据类型必须是命名的类型或指向一个命名的类型的指针。 </p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</div><div class="line">	Radius <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">type</span> Wheel <span class="keyword">struct</span> &#123;</div><div class="line">	Circle</div><div class="line">	Spokes <span class="keyword">int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>得意于匿名嵌入的特性， 我们可以直接访问叶子属性而不需要给出完整的路径：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> w Wheel</div><div class="line">w.Radius = <span class="number">5</span> <span class="comment">// equivalent to w.Circle.Radius = 5</span></div></pre></td></tr></table></figure>
<h2 id="编组"><a href="#编组" class="headerlink" title="编组"></a>编组</h2><p>将结构体slice转为JSON的过程叫编组(marshaling)</p>
<p>我们首先定义一个<code>Movie</code>结构体，然后创建数组：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Movie <span class="keyword">struct</span> &#123;</div><div class="line">	Title 	<span class="keyword">string</span></div><div class="line">	Year 	<span class="keyword">int</span> <span class="string">`json:"released"`</span></div><div class="line">	Color 	<span class="keyword">bool</span> <span class="string">`json:"color,omitempty"`</span></div><div class="line">	Actors 	[]<span class="keyword">string</span></div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="keyword">var</span> movies = []Movie&#123;</div><div class="line">	&#123;Title: <span class="string">"Casablanca"</span>, Year: <span class="number">1942</span>, Color: <span class="literal">false</span>,</div><div class="line">		Actors: []<span class="keyword">string</span>&#123;<span class="string">"Humphrey Bogart"</span>, <span class="string">"Ingrid Bergman"</span>&#125;&#125;,</div><div class="line">	&#123;Title: <span class="string">"Cool Hand Luke"</span>, Year: <span class="number">1967</span>, Color: <span class="literal">true</span>,</div><div class="line">		Actors: []<span class="keyword">string</span>&#123;<span class="string">"Paul Newman"</span>&#125;&#125;,</div><div class="line">	&#123;Title: <span class="string">"Bullitt"</span>, Year: <span class="number">1968</span>, Color: <span class="literal">true</span>,</div><div class="line">		Actors: []<span class="keyword">string</span>&#123;<span class="string">"Steve McQueen"</span>, <span class="string">"Jacqueline Bisset"</span>&#125;&#125;,</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data, err := json.MarshalIndent(movies, <span class="string">""</span>, <span class="string">" "</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	log.Fatalf(<span class="string">"JSON marshaling failed: %s"</span>, err)</div><div class="line">&#125; </div><div class="line">fmt.Printf(<span class="string">"%s\n"</span>, data)</div></pre></td></tr></table></figure>
<p>将会产生以下输出:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">	&#123;</div><div class="line">		<span class="string">"Title"</span>: <span class="string">"Casablanca"</span>,</div><div class="line">		<span class="string">"released"</span>: <span class="number">1942</span>,</div><div class="line">		<span class="string">"Actors"</span>: [</div><div class="line">			<span class="string">"Humphrey Bogart"</span>,</div><div class="line">			<span class="string">"Ingrid Bergman"</span></div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="string">"Title"</span>: <span class="string">"Cool Hand Luke"</span>,</div><div class="line">		<span class="string">"released"</span>: <span class="number">1967</span>,</div><div class="line">		<span class="string">"color"</span>: <span class="literal">true</span>,</div><div class="line">		<span class="string">"Actors"</span>: [</div><div class="line">			<span class="string">"Paul Newman"</span></div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	&#123;</div><div class="line">		<span class="string">"Title"</span>: <span class="string">"Bullitt"</span>,</div><div class="line">		<span class="string">"released"</span>: <span class="number">1968</span>,</div><div class="line">		<span class="string">"color"</span>: <span class="literal">true</span>,</div><div class="line">		<span class="string">"Actors"</span>: [</div><div class="line">			<span class="string">"Steve McQueen"</span>,</div><div class="line">			<span class="string">"Jacqueline Bisset"</span></div><div class="line">		]</div><div class="line">	&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p><strong>只有导出的结构体成员才会被编码， 这也就是我们为什么选择用大写字母开头的成员名称。</strong></p>
<p>可以看到， 其中<code>Year</code>名字的成员在编码后变成了<code>released</code>， 还有<code>Color</code>成员编码后变成了小写字母开头的<code>color</code>。 这是因为构体成员Tag所导致的。 一个构体成员Tag是和在编译阶段关联到该成员的元信息字符串：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Year 	<span class="keyword">int</span> 	<span class="string">`json:"released"`</span></div><div class="line">Color 	<span class="keyword">bool</span> 	<span class="string">`json:"color,omitempty"`</span></div></pre></td></tr></table></figure>
<p>成员Tag中json对应值的第一部分用于指定JSON对象的名字.<code>Color</code>成员的Tag还带了一个额外的<code>omitempty</code>选项， 表示当Go语言结构体成员为空或零值时不生成JSON对象(这里false为零值)。</p>
<h2 id="解组"><a href="#解组" class="headerlink" title="解组"></a>解组</h2><p>编组的逆操作，需要先定义合适的结构体，然后使用<code>json.Unmarshal()</code>函数对json数据进行解组，具体就不介绍了。</p>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul>
<li><code>x[m:n]</code>切片操作对于字符串则生成一个新字符串</li>
<li>一个零值的slice等于<code>nil</code>。 一个<code>nil</code>值的slice并没有底层数组。 一个<code>nil</code>值的slice的长度和容量都是0， 但是也有非<code>nil</code>值的slice的长度和容量也是0的， 例如<code>[]int{}</code>或<code>make([]int, 3)[3:]</code>。</li>
<li>如果你需要测试一个slice是否是空的， 使用<code>len(s) == 0</code>来判断， 而不应该用<code>s == nil</code>来判断。</li>
</ul>]]></content>
      
        <categories>
            
            <category> Go </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UTF-8编码]]></title>
      <url>https://xin053.github.io/2016/09/07/UTF-8%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>需要注意的是，<strong>Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</strong>。</p>
<p>比如，汉字”严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。</p>
<p>这里就有两个严重的问题，第一个问题是，如何才能区别Unicode和ASCII？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果Unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p>
<p>互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种Unicode的实现方式。其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。<strong>重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。</strong></p>
<p>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p>
<a id="more"></a>
<h2 id="UTF8"><a href="#UTF8" class="headerlink" title="UTF8"></a>UTF8</h2><p>UTF8编码使用1到4个字节来表示每个Unicode码点， ASCII部分字符只使用1个字节， 常用字符部分使用2或3个字节表示。 每个符号编码后第一个字节的高端bit位用于表示总共有多少编码个字节。 如果第一个字节的高端bit为0， 则表示对应7bit的ASCII字符， ASCII字符每个字符依然是一个字节， 和传统的ASCII编码兼容。 如果第一个字节的高端bit是110， 则说明需要2个字节；后续的每个高端bit都以10开头。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0xxxxxxx 				runes 0-127 (ASCII)</div><div class="line">110xxxxx 10xxxxxx 			128-2047 (values &lt;128 unused)</div><div class="line">1110xxxx 10xxxxxx 10xxxxxx 		2048-65535 (values &lt;2048 unused)</div><div class="line">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 	65536-0x10ffff (other values unused)</div></pre></td></tr></table></figure>
<p>变长的编码无法直接通过索引来访问第n个字符， 但是UTF8编码获得了很多额外的优点。 首先UTF8编码比较紧凑， 完全兼容ASCII码， 并且可以自动同步：它可以通过向前回朔最多2个字节就能确定当前字符编码的开始字节的位置。 它也是一个前缀编码， 所以当从左向右解码时不会有任何歧义也并不需要向前查看</p>
<p><strong>没有任何字符的编码是其它字符编码的子串， 或是其它编码序列的字串， 因此搜索一个字符时只要搜索它的字节编码序列即可， 不用担心前后的上下文会对搜索结果产生干扰。 同时UTF8编码的顺序和Unicode码点的顺序一致， 因此可以直接排序UTF8编码序列。 同时因为没有嵌入的NUL(0)字节， 可以很好地兼容那些使用NUL作为字符串结尾的编程语言。</strong></p>
<p>Unicode转义字符让我们可以通过Unicode码点输入特殊的字符。 有两种形式：<code>\uhhhh</code>对应16bit的码点值， <code>\Uhhhhhhhh</code>对应32bit的码点值， 其中h是一个十六进制数字；一般很少需要使用32bit的形式。 每一个对应码点的UTF8编码。 例如：下面的字母串面值都表示相同的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;世界&quot;</div><div class="line">&quot;\xe4\xb8\x96\xe7\x95\x8c&quot;</div><div class="line">&quot;\u4e16\u754c&quot;</div><div class="line">&quot;\U00004e16\U0000754c&quot;</div></pre></td></tr></table></figure>
<p>上面三个转义序列都为第一个字符串提供替代写法， 但是它们的值都是相同的。</p>
<p>Unicode转义也可以使用在rune字符中。 下面三个字符是等价的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;世&apos; &apos;\u4e16&apos; &apos;\U00004e16&apos;</div></pre></td></tr></table></figure>
<p>对于小于256码点值可以写在一个十六进制转义字节中， 例如<code>\x41</code>对应字符<code>A</code>， 但是对于更大的码点则必须使用<code>\u</code>或<code>\U</code>转义形式。 因此， <code>\xe4\xb8\x96</code>并不是一个合法的rune字符， 虽然这三个字节对应一个有效的UTF8编码的码点。</p>
<p>得益于UTF8编码优良的设计， 诸多字符串操作都不需要解码操作。 我们可以不用解码直接测试一个字符串是否是另一个字符串的前缀,或者是后缀测试,或者是包含子串测试.</p>
<h2 id="列子"><a href="#列子" class="headerlink" title="列子"></a>列子</h2><p>打开”记事本”程序Notepad.exe，新建一个文本文件，内容就是一个”严”字，依次采用ANSI，Unicode，Unicode big endian 和 UTF-8编码方式保存。<br>然后，用文本编辑软件UltraEdit中的”十六进制功能”，观察该文件的内部编码方式。</p>
<ul>
<li>ANSI：文件的编码就是两个字节”D1 CF”，这正是”严”的GB2312编码，这也暗示GB2312是采用大头方式存储的。</li>
<li>Unicode：编码是四个字节”FF FE 25 4E”，其中”FF FE”表明是小头方式存储，真正的编码是4E25。</li>
<li>Unicode big endian：编码是四个字节”FE FF 4E 25″，其中”FE FF”表明是大头方式存储。</li>
<li>UTF-8：编码是六个字节”EF BB BF E4 B8 A5″，前三个字节”EF BB BF”表示这是UTF-8编码，后三个”E4B8A5″就是”严”的具体编码，它的存储顺序与编码顺序是一致的。</li>
</ul>
<p>注意，windows下通过记事本保存的utf8默认是带BOM的utf，而一般建议都是使用不带BOM的utf8编码</p>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p><strong>在内存中，为了保存所有的字符，肯定是要使用unicode的，但是使用的是哪种实现方式呢？实际上，没有选用utf8，因为utf8编码虽然对于查找字符很快速，但是由于每个字符所占字节大小不一样，要想识别的话必须从开始识别，而为了效率，内存中会使用每个字符都占4个字节的utf32进行存储</strong></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://www.zhihu.com/question/20167122" target="_blank" rel="external">「带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> WeNeedToKnow </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UTF-8 </tag>
            
            <tag> utf8 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Go学习笔记(一)]]></title>
      <url>https://xin053.github.io/2016/09/07/Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>Go是一门编译型语言，Go语言的工具链将源代码及其依赖转换成计算机的机器指令。 Go语言提供的工具都通过一个单独的命令 go 调用， go 命令有一系列子命令。</p>
<p>新建 <code>helloworld.go</code> 文件:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"Hello, 世界"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>命令行执行程序:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ go run helloworld.go</div><div class="line">Hello, 世界</div></pre></td></tr></table></figure>
<p>生成二进制文件:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go build helloworld.go</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>Go语言只有for循环这一种循环语句。for循环有多种形式，其中一种如下所示：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> initialization; condition; post &#123;</div><div class="line"><span class="comment">// zero or more statements</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for循环的这三个部分每个都可以省略，如果省略 initialization 和 post ，分号也可以省略：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a traditional "while" loop</span></div><div class="line"><span class="keyword">for</span> condition &#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果连 condition 也省略了，像下面这样：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a traditional infinite loop</span></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就变成一个死循环。</p>
<p>for 循环的另一种形式,在某种数据类型的区间(range)上遍历，如字符串或切片。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	s, sep := <span class="string">""</span>, <span class="string">""</span></div><div class="line">	<span class="keyword">for</span> _, arg := <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</div><div class="line">		s += sep + arg</div><div class="line">		sep = <span class="string">" "</span></div><div class="line">	&#125;</div><div class="line"> 	fmt.Println(s)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每次循环迭代，range 产生一对值；索引以及在该索引处的元素值。 这个例子不需要索引，但 range 的语法要求,要处理元素,必须处理索引。一种思路是把索引赋值给一个临时变量,如 temp ,然后忽略它的值，但Go语言不允许使用无用的局部变量（local variables），因为这会导致编译错误。</p>
<p>Go语言中这种情况的解决方法是用空标识符(blank identifier) ，即 <code>_</code> (也就是下划线)。空标识符可用于任何语法需要变量名但程序逻辑不需要的时候,例如,在循环里，丢弃不需要的循环索引,保留元素值。</p>
<h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>如果一个名字是在函数内部定义，那么它的就只在函数内部有效。如果是在函数外部定义，那么将在当前包的所有文件中都可以访问。名字的开头字母的大小写决定了名字在包外的可见性。如果一个名字是大写字母开头的(译注：必须是在函数外部定义的包级名字；包级函数名本身也是包级名字)，那么它将是导出的，也就是说可以被外部的包访问，例如<code>fmt</code>包的<code>Printf</code>函数就是导出的，可以在<code>fmt</code>包外部访问。包本身的名字一般总是用小写字母。</p>
<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>变量声明的一般语法如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> 变量名字 类型 = 表达式</div></pre></td></tr></table></figure>
<p>其中<code>类型</code>或<code>= 表达</code>两个部分可以省略其中的一个。 </p>
<p>简短变量声明：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">变量名称 := 表达式</div></pre></td></tr></table></figure>
<p>相较一般的变量声明而言省略了<code>var</code>标识，但是<code>=</code>换成了<code>:=</code>,<code>:=</code>是变量声明语句，<code>=</code>是赋值语句</p>
<h2 id="type-类型声明"><a href="#type-类型声明" class="headerlink" title="type 类型声明"></a>type 类型声明</h2><p>type关键词也就是为现有类型定义别名，使得类型名在一些情况下具有意义，也就是便于理解</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> 类型名字 底层类型</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> money <span class="keyword">float64</span></div></pre></td></tr></table></figure>
<p><code>money</code>类型的底层虽然是<code>float64</code>,但是它们是不同的数据类型， 因此它们不可以被相互比较或混在一个表达式运算。</p>
<p>对于每一个类型<code>T</code>，都有一个对应的类型转换操作<code>T(x)</code>，用于将<code>x</code>转为<code>T</code>类型，只有当两个类型的底层基础类型相同时，才允许这种转型操作，或者是两者都是指向相同底层结构的指针类型，这些转换只改变类型而不会影响值本身。 </p>
<h2 id="init-函数"><a href="#init-函数" class="headerlink" title="init() 函数"></a>init() 函数</h2><p>我们可以用一个特殊的<code>init</code>初始化函数来简化初始化工作。 每个文件都可以包含多个<code>init</code>初始化函数:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123; <span class="comment">/* ... */</span> &#125;</div></pre></td></tr></table></figure>
<p>这样的<code>init</code>初始化函数除了不能被调用或引用外，其他行为和普通函数类似。 在每个文件中的<code>init</code>初始化函数，在程序开始执行时按照它们声明的顺序被自动调用。</p>
<h2 id="iota-常量生成器"><a href="#iota-常量生成器" class="headerlink" title="iota 常量生成器"></a>iota 常量生成器</h2><p>常量声明可以使用iota常量生成器初始化， 它用于生成一组以相似规则初始化的常量， 但是不用每行都写一遍初始化表达式。 在一个<code>const</code>声明语句中， 在第一个声明的常量所在的行，<code>iota</code>将会被置为0， 然后在每一个有常量声明的行加一</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Weekday <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	Sunday Weekday = <span class="literal">iota</span></div><div class="line">	Monday</div><div class="line">	Tuesday</div><div class="line">	Wednesday</div><div class="line">	Thursday</div><div class="line">	Friday</div><div class="line">	Saturday</div><div class="line">)</div></pre></td></tr></table></figure>
<p>周日将对应0， 周一为1， 如此等等。相当于枚举，下面是一个更复杂的例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> (</div><div class="line">	_ = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</div><div class="line">	KiB <span class="comment">// 1024</span></div><div class="line">	MiB <span class="comment">// 1048576</span></div><div class="line">	GiB <span class="comment">// 1073741824</span></div><div class="line">	TiB <span class="comment">// 1099511627776 		(exceeds 1 &lt;&lt; 32)</span></div><div class="line">	PiB <span class="comment">// 1125899906842624</span></div><div class="line">	EiB <span class="comment">// 1152921504606846976</span></div><div class="line">	ZiB <span class="comment">// 1180591620717411303424 	(exceeds 1 &lt;&lt; 64)</span></div><div class="line">	YiB <span class="comment">// 1208925819614629174706176</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="无类型常量"><a href="#无类型常量" class="headerlink" title="无类型常量"></a>无类型常量</h2><p>Go语言的常量有个不同寻常之处。 虽然一个常量可以有任意有一个确定的基础类型，但是许多常量并没有一个明确的基础类型。 编译器为这些没有明确的基础类型的数字常量提供比基础类型更高精度的算术运算；你可以认为至少有256bit的运算精度。 这里有六种未明确类型的常量类型， 分别是无类型的布尔型、 无类型的整数、 无类型的字符、 无类型的浮点数、 无类型的复数、 无类型的字符串。</p>
<p>通过延迟明确常量的具体类型， 无类型的常量不仅可以提供更高的运算精度， 而且可以直接用于更多的表达式而不需要显式的类型转换。</p>
<p>例如，<code>math.Pi</code>无类型的浮点数常量， 可以直接用于任意需要浮点数或复数的地方：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x <span class="keyword">float32</span> = math.Pi</div><div class="line"><span class="keyword">var</span> y <span class="keyword">float64</span> = math.Pi</div><div class="line"><span class="keyword">var</span> z <span class="keyword">complex128</span> = math.Pi</div></pre></td></tr></table></figure>
<p>对于常量面值， 不同的写法可能会对应不同的类型。 例如<code>0</code>、 <code>0.0</code>、 <code>0i</code>和<code>\u0000</code>虽然有着相同的常量值， 但是它们分别对应无类型的整数、 无类型的浮点数、 无类型的复数和无类型的字符等不同的常量类型。 同样， <code>true</code>和<code>false</code>也是无类型的布尔类型， 字符串面值常量是无类型的字符串类型。</p>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul>
<li>Go语言原生支持Unicode， 它可以处理全世界任何语言的文本</li>
<li>变量会在声明时直接初始化,因此在Go语言中不存在未初始化的变量</li>
<li><code>++</code>和<code>--</code>都只能放在变量名后面， 因此 <code>--i</code> 也非法</li>
<li>for循环三个部分不需括号包围。 大括号强制要求, 左大括号必须和post语句在同一行</li>
<li>Go语言不允许使用无用的局部变量(local variables)，因为这会导致编译错误</li>
<li>Go语言中的<code>NULL</code>用<code>nil</code>表示</li>
<li>switch语句并不需要显式地在每一个case后写break，语言默认执行完case后的逻辑语句会自动退出</li>
<li>在Go语言里没有指针运算，也就是不能像c语言里可以对指针进行加或减操作。</li>
<li>Go语言主要有四种类型的声明语句：<code>var</code>、 <code>const</code>、 <code>type</code>和<code>func</code> </li>
<li><code>:=</code>是变量声明语句，<code>=</code>是赋值语句</li>
<li>函数中的变量(局部变量)不一定都在栈上，有些可能在堆上(当然我们可以不用关心这些)</li>
</ul>]]></content>
      
        <categories>
            
            <category> Go </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[httpie人性化curl工具使用详解]]></title>
      <url>https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="httpie简介"><a href="#httpie简介" class="headerlink" title="httpie简介"></a>httpie简介</h2><p>httpie是一个python写的类curl的命令行工具，跨平台，支持python2和3，友好的高亮显示以及其他的特性，基于<code>Requests</code>和<code>Pygments</code>库编写</p>
<p><img src="https://raw.githubusercontent.com/jkbrzt/httpie/master/httpie.png" alt=""></p>
<a id="more"></a>
<h3 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h3><ul>
<li>Expressive and intuitive syntax</li>
<li>Formatted and colorized terminal output</li>
<li>Built-in JSON support</li>
<li>Forms and file uploads</li>
<li>HTTPS, proxies, and authentication</li>
<li>Arbitrary request data</li>
<li>Custom headers</li>
<li>Persistent sessions</li>
<li>Wget-like downloads</li>
<li>Python 2.6, 2.7 and 3.x support</li>
<li>Linux, Mac OS X and Windows support</li>
<li>Plugins</li>
<li>Documentation</li>
<li>Test coverage</li>
</ul>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">http [--json] [--form] [--pretty &#123;all,colors,format,none&#125;]</div><div class="line">     [--style STYLE] [--print WHAT] [--headers] [--body] [--verbose]</div><div class="line">     [--all] [--history-print WHAT] [--stream] [--output FILE]</div><div class="line">     [--download] [--continue]</div><div class="line">     [--session SESSION_NAME_OR_PATH | --session-read-only SESSION_NAME_OR_PATH]</div><div class="line">     [--auth USER[:PASS]] [--auth-type &#123;basic,digest&#125;]</div><div class="line">     [--proxy PROTOCOL:PROXY_URL] [--follow]</div><div class="line">     [--max-redirects MAX_REDIRECTS] [--timeout SECONDS]</div><div class="line">     [--check-status] [--verify VERIFY]</div><div class="line">     [--ssl &#123;ssl2.<span class="number">3</span>,ssl3,tls1,tls1.<span class="number">1</span>,tls1.<span class="number">2</span>&#125;] [--cert CERT]</div><div class="line">     [--cert-key CERT_KEY] [--ignore-stdin] [--help] [--version]</div><div class="line">     [--traceback] [--default-scheme DEFAULT_SCHEME] [--debug]</div><div class="line">     [METHOD] URL [REQUEST_ITEM [REQUEST_ITEM ...]]</div></pre></td></tr></table></figure>
<p>简写就是：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http [flags] [METHOD] URL [ITEM [ITEM]]</div></pre></td></tr></table></figure>
<h2 id="METHOD"><a href="#METHOD" class="headerlink" title="METHOD"></a>METHOD</h2><p>如果不带METHOD参数，这默认为GET(没有附带请求参数)或POST(附带请求参数,默认以json格式传输)</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ http example.org               <span class="comment"># =&gt; GET</span></div><div class="line">$ http example.org hello=world   <span class="comment"># =&gt; POST</span></div></pre></td></tr></table></figure>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>默认协议为<code>http://</code>,如果主机是<code>localhost</code>,还可以如下简写：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ http :<span class="number">3000</span>                    <span class="comment"># =&gt; http://localhost:3000</span></div><div class="line">$ http :/foo                    <span class="comment"># =&gt; http://localhost/foo</span></div></pre></td></tr></table></figure>
<p>另外可以使用<code>param==value</code>语法像url添加参数，所产生的效果就是浏览器中通过<code>&amp;</code>连接的参数，注意区分POST方法所使用的<code>param=value</code>语法</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ http www.google.com search==<span class="string">'HTTPie logo'</span> tbm==isch</div><div class="line"></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<p>linux系统中可以通过</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ alias https=<span class="string">'http --default-scheme=https'</span></div></pre></td></tr></table></figure>
<p>来创建更方便https的命令</p>
<h2 id="Request-items"><a href="#Request-items" class="headerlink" title="Request items"></a>Request items</h2><table>
<thead>
<tr>
<th style="text-align:center">Item Type</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">HTTP Headers <code>Name:Value</code></td>
<td style="text-align:center">Arbitrary HTTP header, e.g. <code>X-API-Token:123</code></td>
</tr>
<tr>
<td style="text-align:center">URL parameters <code>name==value</code></td>
<td style="text-align:center">Appends the given name/value pair as a query string parameter to the URL. The <code>==</code> separator is used.</td>
</tr>
<tr>
<td style="text-align:center">Data Fields <code>field=value</code>, <code>field=@file.txt</code></td>
<td style="text-align:center">Request data fields to be serialized as a JSON object (default), or to be form-encoded (<code>--form, -f</code>).</td>
</tr>
<tr>
<td style="text-align:center">Raw JSON fields <code>field:=json</code>, <code>field:=@file.json</code></td>
<td style="text-align:center">Useful when sending JSON and one or more fields need to be a <code>Boolean</code>, <code>Number</code>, nested <code>Object</code>, or an <code>Array</code>, e.g., <code>meals:=&#39;[&quot;ham&quot;,&quot;spam&quot;]&#39;</code> or <code>pies:=[1,2,3]</code> (note the quotes).</td>
</tr>
<tr>
<td style="text-align:center">Form File Fields <code>field@/dir/file</code></td>
<td style="text-align:center">Only available with <code>--form, -f</code>. For example <code>screenshot@~/Pictures/img.png</code>. The presence of a file field results in a <code>multipart/form-data</code> request.</td>
</tr>
</tbody>
</table>
<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><code>param=value</code>格式的参数全部会转换成json格式传输，并且value全是字符串</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http PUT example.org name=John email=john@example.org</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PUT / HTTP/<span class="number">1.1</span></div><div class="line">Accept: application/json, */*</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Content-Type: application/json</div><div class="line">Host: example.org</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"John"</span>,</div><div class="line">    <span class="string">"email"</span>: <span class="string">"john@example.org"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Non-string fields use the <code>:=</code> separator, which allows you to embed raw JSON into the resulting object. Text and raw JSON files can also be embedded into fields using <code>=@</code> and <code>:=@</code>:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ http PUT api.example.com/person/<span class="number">1</span> \</div><div class="line">    name=John \</div><div class="line">    age:=<span class="number">29</span> married:=false hobbies:=<span class="string">'["http", "pies"]'</span> \  <span class="comment"># Raw JSON</span></div><div class="line">    description=@about-john.txt \   <span class="comment"># Embed text file</span></div><div class="line">    bookmarks:=@bookmarks.json      <span class="comment"># Embed JSON file</span></div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">PUT /person/<span class="number">1</span> HTTP/<span class="number">1.1</span></div><div class="line">Accept: application/json, */*</div><div class="line">Content-Type: application/json</div><div class="line">Host: api.example.com</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="string">"age"</span>: <span class="number">29</span>,</div><div class="line">    <span class="string">"hobbies"</span>: [</div><div class="line">        <span class="string">"http"</span>,</div><div class="line">        <span class="string">"pies"</span></div><div class="line">    ],</div><div class="line">    <span class="string">"description"</span>: <span class="string">"John is a nice guy who likes pies."</span>,</div><div class="line">    <span class="string">"married"</span>: false,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"John"</span>,</div><div class="line">    <span class="string">"bookmarks"</span>: &#123;</div><div class="line">        <span class="string">"HTTPie"</span>: <span class="string">"http://httpie.org"</span>,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h2><p>Submitting forms is very similar to sending JSON requests. Often the only difference is in adding the <code>--form, -f</code> option, which ensures that data fields are serialized as, and <code>Content-Type</code> is set to, <code>application/x-www-form-urlencoded; charset=utf-8</code>.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ http --form POST api.example.org/person/<span class="number">1</span> name=<span class="string">'John Smith'</span> \</div><div class="line">    email=john@example.org cv=@~/Documents/cv.txt</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST /person/<span class="number">1</span> HTTP/<span class="number">1.1</span></div><div class="line">Content-Type: application/x-www-form-urlencoded; charset=utf-<span class="number">8</span></div><div class="line"></div><div class="line">name=John+Smith&amp;email=john%<span class="number">40</span>example.org&amp;cv=John<span class="string">'s+CV+...</span></div></pre></td></tr></table></figure>
<h3 id="File-upload-forms"><a href="#File-upload-forms" class="headerlink" title="File upload forms"></a>File upload forms</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http -f POST example.com/jobs name=<span class="string">'John Smith'</span> cv@~/Documents/cv.pdf</div></pre></td></tr></table></figure>
<p>上面的效果和下面一样：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form enctype=<span class="string">"multipart/form-data"</span> method=<span class="string">"post"</span> action=<span class="string">"http://example.com/jobs"</span>&gt;</div><div class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> /&gt;</div><div class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"cv"</span> /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h2 id="HTTP-headers"><a href="#HTTP-headers" class="headerlink" title="HTTP headers"></a>HTTP headers</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ http example.org  User-Agent:Bacon/<span class="number">1.0</span>  <span class="string">'Cookie:valued-visitor=yes;foo=bar'</span>  \</div><div class="line">    X-Foo:Bar  Referer:http://httpie.org/</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/<span class="number">1.1</span></div><div class="line">Accept: */*</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Cookie: valued-visitor=yes;foo=bar</div><div class="line">Host: example.org</div><div class="line">Referer: http://httpie.org/</div><div class="line">User-Agent: Bacon/<span class="number">1.0</span></div><div class="line">X-Foo: Bar</div></pre></td></tr></table></figure>
<p>There are a couple of default headers that HTTPie sets:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/<span class="number">1.1</span></div><div class="line">Accept: */*</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">User-Agent: HTTPie/&lt;version&gt;</div><div class="line">Host: &lt;taken-from-URL&gt;</div></pre></td></tr></table></figure>
<h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>Basic auth:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http -a username:password example.org</div></pre></td></tr></table></figure>
<p>Digest auth:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http -A digest -a username:password example.org</div></pre></td></tr></table></figure>
<h2 id="HTTP-redirects"><a href="#HTTP-redirects" class="headerlink" title="HTTP redirects"></a>HTTP redirects</h2><p>By default, HTTP redirects are not followed and only the first response is shown. To instruct HTTPie to follow the <code>Location</code> header of <code>30x</code> responses and show the final response instead, use the <code>--follow, -F</code> option.</p>
<p>If you additionally wish to see the intermediary requests/responses, then use the <code>--all</code> option as well.</p>
<p>To change the default limit of maximum 30 redirects, use the <code>--max-redirects=&lt;limit&gt;</code> option.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --follow --all --max-redirects=<span class="number">5</span> httpbin.org/redirect/<span class="number">3</span></div></pre></td></tr></table></figure>
<h2 id="Proxies"><a href="#Proxies" class="headerlink" title="Proxies"></a>Proxies</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --proxy=http:http://user:pass@<span class="number">10.10</span>.<span class="number">1.10</span>:<span class="number">3128</span> --proxy=https:https://<span class="number">10.10</span>.<span class="number">1.10</span>:<span class="number">1080</span> example.org</div></pre></td></tr></table></figure>
<h2 id="SOCKS"><a href="#SOCKS" class="headerlink" title="SOCKS"></a>SOCKS</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --proxy=http:socks5://user:pass@host:port --proxy=https:socks5://user:pass@host:port example.org</div></pre></td></tr></table></figure>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>可以通过<code>--verify=no</code>忽略证书检查</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --verify=no https://example.org</div></pre></td></tr></table></figure>
<p>可以使用<code>--ssl=&lt;PROTOCOL&gt;</code>制定ssl版本</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --ssl=ssl3 https://vulnerable.example.org</div></pre></td></tr></table></figure>
<h2 id="Output-options"><a href="#Output-options" class="headerlink" title="Output options"></a>Output options</h2><table>
<thead>
<tr>
<th style="text-align:center">Param</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>--headers, -h</code></td>
<td style="text-align:center">Only the response headers are printed.</td>
</tr>
<tr>
<td style="text-align:center"><code>--body, -b</code></td>
<td style="text-align:center">Only the response body is printed.</td>
</tr>
<tr>
<td style="text-align:center"><code>--verbose, -v</code></td>
<td style="text-align:center">Print the whole HTTP exchange (request and response). This option also enables <code>--all</code> (see bellow).</td>
</tr>
<tr>
<td style="text-align:center"><code>--print, -p</code></td>
<td style="text-align:center">Selects parts of the HTTP exchange.</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">Character</th>
<th style="text-align:center">Stands for</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>H</code></td>
<td style="text-align:center">request headers</td>
</tr>
<tr>
<td style="text-align:center"><code>B</code></td>
<td style="text-align:center">request body</td>
</tr>
<tr>
<td style="text-align:center"><code>h</code></td>
<td style="text-align:center">response headers</td>
</tr>
<tr>
<td style="text-align:center"><code>b</code></td>
<td style="text-align:center">response body</td>
</tr>
</tbody>
</table>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --print=Hh PUT httpbin.org/put hello=world</div></pre></td></tr></table></figure>
<h2 id="Redirected-output"><a href="#Redirected-output" class="headerlink" title="Redirected output"></a>Redirected output</h2><p>Download a file:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http example.org/Movie.mov &gt; Movie.mov</div></pre></td></tr></table></figure>
<h2 id="Download-mode"><a href="#Download-mode" class="headerlink" title="Download mode"></a>Download mode</h2><p>HTTPie features a download mode in which it acts similarly to <code>wget</code>.</p>
<p>When enabled using the <code>--download, -d</code> flag, response headers are printed to the terminal (<code>stderr</code>), and a progress bar is shown while the response body is being saved to a file.</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --download https://github.com/jkbrzt/httpie/archive/master.tar.gz</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</div><div class="line">Content-Disposition: attachment; filename=httpie-master.tar.gz</div><div class="line">Content-Length: <span class="number">257336</span></div><div class="line">Content-Type: application/x-gzip</div><div class="line"></div><div class="line">Downloading <span class="number">251.30</span> kB to <span class="string">"httpie-master.tar.gz"</span></div><div class="line">Done. <span class="number">251.30</span> kB <span class="keyword">in</span> <span class="number">2.73862</span>s (<span class="number">91.76</span> kB/s)</div></pre></td></tr></table></figure>
<h2 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h2><p>By default, every request is completely independent of any previous ones. HTTPie also supports persistent sessions, where custom headers (except for the ones starting with <code>Content-</code> or <code>If-</code>), authorization, and cookies (manually specified or sent by the server) persist between requests to the same host.</p>
<h3 id="Named-sessions"><a href="#Named-sessions" class="headerlink" title="Named sessions"></a>Named sessions</h3><p>Create a new session named <code>user1</code> for <code>example.org</code>:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --session=user1 -a user1:password example.org X-Foo:Bar</div></pre></td></tr></table></figure>
<p>Now you can refer to the session by its name, and the previously used authorization and HTTP headers will automatically be set:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ http --session=user1 example.org</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://github.com/jkbrzt/httpie" target="_blank" rel="external">httpie官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> httpie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[click命令行工具使用详解]]></title>
      <url>https://xin053.github.io/2016/07/31/click%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="click简介"><a href="#click简介" class="headerlink" title="click简介"></a>click简介</h2><p>click是类似<a href="http://docopt.org/" target="_blank" rel="external">docopt</a>的命令行工具，让我们可以快速的创建一个命令行工具，并且click能让我用尽量少的代码，并自动生成命令行帮助文档</p>
<p><img src="http://click.pocoo.org/6/_static/click.png" alt=""></p>
<p>正如官网所说，click有三大特性：</p>
<ul>
<li>arbitrary nesting of commands</li>
<li>automatic help page generation</li>
<li>supports lazy loading of subcommands at runtime</li>
</ul>
<a id="more"></a>
<h2 id="click基本使用"><a href="#click基本使用" class="headerlink" title="click基本使用"></a>click基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--count', default=1, help='Number of greetings.')</span></div><div class="line"><span class="meta">@click.option('--name', prompt='Your name',</span></div><div class="line">              help=<span class="string">'The person to greet.'</span>)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(count, name)</span>:</span></div><div class="line">    <span class="string">"""Simple program that greets NAME for a total of COUNT times."""</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</div><div class="line">        click.echo(<span class="string">'Hello %s!'</span> % name)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    hello()</div></pre></td></tr></table></figure>
<p>我在cmd中运行如下：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">F:\cookies\python\learnPython\<span class="number">5</span>_常用模块\click&gt;python <span class="number">1</span>_基本使用.py</div><div class="line">Your name: zzx</div><div class="line">Hello zzx!</div><div class="line"></div><div class="line">F:\cookies\python\learnPython\<span class="number">5</span>_常用模块\click&gt;python <span class="number">1</span>_基本使用.py --help</div><div class="line">Usage: <span class="number">1</span>_基本使用.py [OPTIONS]</div><div class="line"></div><div class="line">  Simple program that greets NAME <span class="keyword">for</span> a total of COUNT times.</div><div class="line"></div><div class="line">Options:</div><div class="line">  --count INTEGER  Number of greetings.</div><div class="line">  --name TEXT      The person to greet.</div><div class="line">  --help           Show this message and exit.</div><div class="line"></div><div class="line">F:\cookies\python\learnPython\<span class="number">5</span>_常用模块\click&gt;</div></pre></td></tr></table></figure>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>click是基于装饰器的，我们可以在方法上使用<code>click.command()</code>装饰器来将该方法变成一个命令行工具</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Hello World!'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    hello()</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ python hello.py</div><div class="line">Hello World!</div><div class="line"></div><div class="line">$ python hello.py --help</div><div class="line">Usage: hello.py [OPTIONS]</div><div class="line"></div><div class="line">Options:</div><div class="line">  --help  Show this message and exit.</div></pre></td></tr></table></figure>
<h2 id="echo"><a href="#echo" class="headerlink" title="echo()"></a>echo()</h2><p>之所以不使用<code>print()</code>是为了兼容python2和3，当然也是可以使用<code>print()</code>的</p>
<h2 id="嵌套命令"><a href="#嵌套命令" class="headerlink" title="嵌套命令"></a>嵌套命令</h2><p>可以通过group来实现命令行的嵌套，也就是让一个命令行工具具有多个命令</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.group()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cli</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Hello world'</span>)</div><div class="line"></div><div class="line"><span class="meta">@cli.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initdb</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Initialized the database'</span>)</div><div class="line"></div><div class="line"><span class="meta">@cli.command()</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropdb</span><span class="params">()</span>:</span></div><div class="line">    click.echo(<span class="string">'Dropped the database'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    cli()</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">F:\cookies\python\learnPython\<span class="number">5</span>_常用模块\click&gt;python <span class="number">2</span>_group.py --help</div><div class="line">Usage: <span class="number">2</span>_group.py [OPTIONS] COMMAND [ARGS]...</div><div class="line"></div><div class="line">Options:</div><div class="line">  --help  Show this message and exit.</div><div class="line"></div><div class="line">Commands:</div><div class="line">  dropdb</div><div class="line">  initdb</div><div class="line"></div><div class="line">F:\cookies\python\learnPython\<span class="number">5</span>_常用模块\click&gt;python <span class="number">2</span>_group.py initdb</div><div class="line">Hello world</div><div class="line">Initialized the database</div><div class="line"></div><div class="line">F:\cookies\python\learnPython\<span class="number">5</span>_常用模块\click&gt;python <span class="number">2</span>_group.py dropdb</div><div class="line">Hello world</div><div class="line">Dropped the database</div></pre></td></tr></table></figure>
<h2 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h2><p><code>@click.argument()</code>可以给命令添加参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--count', default=1, help='number of greetings')</span></div><div class="line"><span class="meta">@click.argument('name')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(count, name)</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</div><div class="line">        click.echo(<span class="string">'Hello %s!'</span> % name)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    hello()</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">F:\cookies\python\learnPython\<span class="number">5</span>_常用模块\click&gt;python <span class="number">3</span>_argument.py</div><div class="line">Usage: <span class="number">3</span>_argument.py [OPTIONS] NAME</div><div class="line"></div><div class="line">Error: Missing argument <span class="string">"name"</span>.</div><div class="line"></div><div class="line">F:\cookies\python\learnPython\<span class="number">5</span>_常用模块\click&gt;python <span class="number">3</span>_argument.py --help</div><div class="line">Usage: <span class="number">3</span>_argument.py [OPTIONS] NAME</div><div class="line"></div><div class="line">Options:</div><div class="line">  --count INTEGER  number of greetings</div><div class="line">  --help           Show this message and exit.</div><div class="line"></div><div class="line">F:\cookies\python\learnPython\<span class="number">5</span>_常用模块\click&gt;python <span class="number">3</span>_argument.py zzx</div><div class="line">Hello zzx!</div></pre></td></tr></table></figure>
<p>parameter包括arguments和options，arguments一般是必须的，而options一般是可选的</p>
<h3 id="parameter类型"><a href="#parameter类型" class="headerlink" title="parameter类型"></a>parameter类型</h3><ul>
<li><strong><code>click.STRING</code></strong>：默认类型</li>
<li><strong><code>click.INT</code></strong>：int</li>
<li><strong><code>click.FLOAT</code></strong>：float</li>
<li><strong><code>click.BOOL</code></strong>：boolean</li>
<li><a href="#File-Arguments"><strong><code>click.File</code></strong></a>(mode=’r’, encoding=None, errors=’strict’, lazy=None, atomic=False)</li>
<li><a href="#File-Path-Arguments"><strong><code>click.Path</code></strong></a>(exists=False, file_okay=True, dir_okay=True, writable=False, readable=True, resolve_path=False, allow_dash=False, path_type=None)</li>
<li><a href="#Choice-Options"><strong><code>click.Choice</code></strong></a>(choices)</li>
<li><a href="#Range-Options"><strong><code>click.IntRange</code></strong></a>(min=None, max=None, clamp=False)</li>
</ul>
<h4 id="File-Arguments"><a href="#File-Arguments" class="headerlink" title="File Arguments"></a>File Arguments</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.argument('input', type=click.File('rb'))</span></div><div class="line"><span class="meta">@click.argument('output', type=click.File('wb'))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inout</span><span class="params">(input, output)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        chunk = input.read(<span class="number">1024</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        output.write(chunk)</div></pre></td></tr></table></figure>
<h4 id="File-Path-Arguments"><a href="#File-Path-Arguments" class="headerlink" title="File Path Arguments"></a>File Path Arguments</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.argument('f', type=click.Path(exists=True))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch</span><span class="params">(f)</span>:</span></div><div class="line">    click.echo(click.format_filename(f))</div></pre></td></tr></table></figure>
<h4 id="Choice-Options"><a href="#Choice-Options" class="headerlink" title="Choice Options"></a>Choice Options</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--hash-type', type=click.Choice(['md5', 'sha1']))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">digest</span><span class="params">(hash_type)</span>:</span></div><div class="line">    click.echo(hash_type)</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ digest --hash-type=md5</div><div class="line">md5</div><div class="line"></div><div class="line">$ digest --hash-type=foo</div><div class="line">Usage: digest [OPTIONS]</div><div class="line"></div><div class="line">Error: Invalid value <span class="keyword">for</span> <span class="string">"--hash-type"</span>: invalid choice: foo. (choose from md5, sha1)</div><div class="line"></div><div class="line">$ digest --help</div><div class="line">Usage: digest [OPTIONS]</div><div class="line"></div><div class="line">Options:</div><div class="line">  --hash-type [md5|sha1]</div><div class="line">  --help                  Show this message and exit.</div></pre></td></tr></table></figure>
<h4 id="Range-Options"><a href="#Range-Options" class="headerlink" title="Range Options"></a>Range Options</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--count', type=click.IntRange(0, 20, clamp=True))</span></div><div class="line"><span class="meta">@click.option('--digit', type=click.IntRange(0, 10))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(count, digit)</span>:</span></div><div class="line">    click.echo(str(digit) * count)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    repeat()</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ repeat --count=<span class="number">1000</span> --digit=<span class="number">5</span></div><div class="line"><span class="number">55555555555555555555</span></div><div class="line">$ repeat --count=<span class="number">1000</span> --digit=<span class="number">12</span></div><div class="line">Usage: repeat [OPTIONS]</div><div class="line"></div><div class="line">Error: Invalid value <span class="keyword">for</span> <span class="string">"--digit"</span>: <span class="number">12</span> is not <span class="keyword">in</span> the valid range of <span class="number">0</span> to <span class="number">10</span>.</div></pre></td></tr></table></figure>
<h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><h4 id="Multi-Value-Options"><a href="#Multi-Value-Options" class="headerlink" title="Multi Value Options"></a>Multi Value Options</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--pos', nargs=2, type=float)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findme</span><span class="params">(pos)</span>:</span></div><div class="line">    click.echo(<span class="string">'%s / %s'</span> % pos)</div></pre></td></tr></table></figure>
<h4 id="Tuples-as-Multi-Value-Options"><a href="#Tuples-as-Multi-Value-Options" class="headerlink" title="Tuples as Multi Value Options"></a>Tuples as Multi Value Options</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--item', type=(unicode, int))</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">putitem</span><span class="params">(item)</span>:</span></div><div class="line">    click.echo(<span class="string">'name=%s id=%d'</span> % item)</div></pre></td></tr></table></figure>
<h4 id="Multiple-Options"><a href="#Multiple-Options" class="headerlink" title="Multiple Options"></a>Multiple Options</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.option('--message', '-m', multiple=True)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">(message)</span>:</span></div><div class="line">    click.echo(<span class="string">'\n'</span>.join(message))</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ commit -m foo -m bar</div><div class="line">foo</div><div class="line">bar</div></pre></td></tr></table></figure>
<h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><h4 id="Variadic-Arguments"><a href="#Variadic-Arguments" class="headerlink" title="Variadic Arguments"></a>Variadic Arguments</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="meta">@click.argument('src', nargs=-1)</span></div><div class="line"><span class="meta">@click.argument('dst', nargs=1)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(src, dst)</span>:</span></div><div class="line">    <span class="keyword">for</span> fn <span class="keyword">in</span> src:</div><div class="line">        click.echo(<span class="string">'move %s to folder %s'</span> % (fn, dst))</div></pre></td></tr></table></figure>
<p><code>nargs=-1</code>表示参数数目无限制</p>
<h2 id="User-Input-Prompts"><a href="#User-Input-Prompts" class="headerlink" title="User Input Prompts"></a>User Input Prompts</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">value = click.prompt(<span class="string">'Please enter a valid integer'</span>, type=int)</div><div class="line"></div><div class="line">value = click.prompt(<span class="string">'Please enter a number'</span>, default=<span class="number">42.0</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> click.confirm(<span class="string">'Do you want to continue?'</span>):</div><div class="line">    click.echo(<span class="string">'Well done!'</span>)</div></pre></td></tr></table></figure>
<h2 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h2><p>click还有测试模块，以及输出带样式的文本等，在此就不详细介绍了</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://click.pocoo.org/6/" target="_blank" rel="external">click v6 官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> click </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[asciimatics库简介]]></title>
      <url>https://xin053.github.io/2016/07/19/asciimatics%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="asciimatics简介"><a href="#asciimatics简介" class="headerlink" title="asciimatics简介"></a>asciimatics简介</h2><p>asciimatics生成ascii动画，看官方文档，上面特意强调了80后，看来那些玩过dos系统的人才能感受到终端动画的乐趣，说实话，我也只是学汇编那会儿使用cmd比较多，现在接触的比较少，这个库可以用在写命令行工具上，比较好玩，所以写下了该文章简介，不多说，看看官网介绍中利用asciimatics写的终端hello world:</p>
<p><img src="http://i.imgur.com/uqY5mka.gif" alt=""></p>
<p>是不是被亮瞎了呢？</p>
<a id="more"></a>
<p>上述hello world源代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"><span class="keyword">from</span> asciimatics.screen <span class="keyword">import</span> Screen</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(screen)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        screen.print_at(<span class="string">'Hello world!'</span>,</div><div class="line">                        randint(<span class="number">0</span>, screen.width), randint(<span class="number">0</span>, screen.height),</div><div class="line">                        colour=randint(<span class="number">0</span>, screen.colours - <span class="number">1</span>),</div><div class="line">                        bg=randint(<span class="number">0</span>, screen.colours - <span class="number">1</span>))</div><div class="line">        ev = screen.get_key()</div><div class="line">        <span class="keyword">if</span> ev <span class="keyword">in</span> (ord(<span class="string">'Q'</span>), ord(<span class="string">'q'</span>)):</div><div class="line">            <span class="keyword">return</span></div><div class="line">        screen.refresh()</div><div class="line"></div><div class="line">Screen.wrapper(demo)</div></pre></td></tr></table></figure>
<p>asciimatics是写命令行图形界面的工具，或许以后会用得到，附上官方文档以供查阅：</p>
<p><a href="http://asciimatics.readthedocs.org/" target="_blank" rel="external">asciimatics官方文档</a></p>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> asciimatics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[configparser配置文件解析器使用详解]]></title>
      <url>https://xin053.github.io/2016/07/18/configparser%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="configparser简介"><a href="#configparser简介" class="headerlink" title="configparser简介"></a>configparser简介</h2><p>python2下该模块名为ConfigParser，到3才改为configparser,可以看官方ConfigParser模块的说明</p>
<p><a href="https://docs.python.org/2/library/configparser.html" target="_blank" rel="external">https://docs.python.org/2/library/configparser.html</a></p>
<p>本文介绍python3中configparser模块的使用，configparser模块是用来解析ini配置文件的解析器，关于ini配置文件的结构可以看python官方文档中的介绍：</p>
<p><a href="https://docs.python.org/3.5/library/configparser.html#supported-ini-file-structure" target="_blank" rel="external">ini文件结构</a></p>
<p>ini文件结构需要注意一下几点：</p>
<ul>
<li>键值对可用<code>=</code>或者<code>:</code>进行分隔</li>
<li><code>section</code>的名字是区分大小写的,而<code>key</code>的名字是不区分大小写的</li>
<li>键值对中头部和尾部的空白符会被去掉</li>
<li>值可以为多行</li>
<li>配置文件可以包含注释，注释以<code>#</code>或者<code>;</code>为前缀</li>
</ul>
<p><strong><em>注意：configparser有default_section的概念,默认为<code>[DEFAULT]</code>节,也就是之后的所有的section都有该默认section中的键值对,详情参见<a href="https://hg.python.org/cpython/file/3.5/Lib/configparser.py" target="_blank" rel="external">configparser源码的<code>__init__()</code>方法</a></em></strong></p>
<a id="more"></a>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>为了创建如下ini文件：<br>configparser模块主要使用ConfigParser类来解析ini文件</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="section">[DEFAULT]</span></div><div class="line"><span class="attr">ServerAliveInterval</span> = <span class="number">45</span></div><div class="line"><span class="attr">Compression</span> = <span class="literal">yes</span></div><div class="line"><span class="attr">CompressionLevel</span> = <span class="number">9</span></div><div class="line"><span class="attr">ForwardX11</span> = <span class="literal">yes</span></div><div class="line"><span class="section"></span></div><div class="line">[bitbucket.org]</div><div class="line"><span class="attr">User</span> = hg</div><div class="line"><span class="section"></span></div><div class="line">[topsecret.server.com]</div><div class="line"><span class="attr">Port</span> = <span class="number">50022</span></div><div class="line"><span class="attr">ForwardX11</span> = <span class="literal">no</span></div></pre></td></tr></table></figure>
<p>我们可以使用如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config = configparser.ConfigParser()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'DEFAULT'</span>] = &#123;<span class="string">'ServerAliveInterval'</span>: <span class="string">'45'</span>,</div><div class="line"><span class="meta">... </span>                     <span class="string">'Compression'</span>: <span class="string">'yes'</span>,</div><div class="line"><span class="meta">... </span>                     <span class="string">'CompressionLevel'</span>: <span class="string">'9'</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'bitbucket.org'</span>] = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'bitbucket.org'</span>][<span class="string">'User'</span>] = <span class="string">'hg'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'topsecret.server.com'</span>] = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret = config[<span class="string">'topsecret.server.com'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret[<span class="string">'Port'</span>] = <span class="string">'50022'</span>     <span class="comment"># mutates the parser</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret[<span class="string">'ForwardX11'</span>] = <span class="string">'no'</span>  <span class="comment"># same here</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'DEFAULT'</span>][<span class="string">'ForwardX11'</span>] = <span class="string">'yes'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'example.ini'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> configfile:</div><div class="line"><span class="meta">... </span>  config.write(configfile)</div></pre></td></tr></table></figure>
<p>然后我们再读取该ini文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config = configparser.ConfigParser()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config.sections()</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config.read(<span class="string">'example.ini'</span>)</div><div class="line">[<span class="string">'example.ini'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config.sections()</div><div class="line">[<span class="string">'bitbucket.org'</span>, <span class="string">'topsecret.server.com'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'bitbucket.org'</span> <span class="keyword">in</span> config</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'bytebong.com'</span> <span class="keyword">in</span> config</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'bitbucket.org'</span>][<span class="string">'User'</span>]</div><div class="line"><span class="string">'hg'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'DEFAULT'</span>][<span class="string">'Compression'</span>]</div><div class="line"><span class="string">'yes'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret = config[<span class="string">'topsecret.server.com'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret[<span class="string">'ForwardX11'</span>]</div><div class="line"><span class="string">'no'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret[<span class="string">'Port'</span>]</div><div class="line"><span class="string">'50022'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> config[<span class="string">'bitbucket.org'</span>]: print(key)</div><div class="line">...</div><div class="line">user</div><div class="line">compressionlevel</div><div class="line">serveraliveinterval</div><div class="line">compression</div><div class="line">forwardx11</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'bitbucket.org'</span>][<span class="string">'ForwardX11'</span>]</div><div class="line"><span class="string">'yes'</span></div></pre></td></tr></table></figure>
<p><strong>The only bit of magic involves the DEFAULT section which provides default values for all other sections. Note also that keys in sections are case-insensitive and stored in lowercase</strong></p>
<p>除了可以使用列表的方式获取值，也可以通过<code>section</code>级别的<code>get()</code>方法获取，同时该函数可以指定默认值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret.get(<span class="string">'Port'</span>)</div><div class="line"><span class="string">'50022'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret.get(<span class="string">'CompressionLevel'</span>)</div><div class="line"><span class="string">'9'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret.get(<span class="string">'Cipher'</span>, <span class="string">'3des-cbc'</span>)</div><div class="line"><span class="string">'3des-cbc'</span></div></pre></td></tr></table></figure>
<p>而解析器级别的<code>get()</code>函数的默认值是通过<code>fallback</code>参数指定的：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>config.get(<span class="string">'bitbucket.org'</span>, <span class="string">'monster'</span>,</div><div class="line"><span class="meta">... </span>           fallback=<span class="string">'No such things as monsters'</span>)</div><div class="line"><span class="string">'No such things as monsters'</span></div></pre></td></tr></table></figure>
<p>需要注意的是，无论是通过列表方式获取值，还是通过<code>get()</code>方法获取值，获取到的数据都字符串类型，如果想要获取指定类型的数据，可以使用如下的几个方法:</p>
<ul>
<li>getint()</li>
<li>getfloat()</li>
<li>getboolean()</li>
</ul>
<p>同时需要注意<code>getboolean()</code>方法能判断True/False的值有： ‘yes’/‘no’, ‘on’/‘off’, ‘true’/‘false’ 和 ‘1’/‘0’ </p>
<h2 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h2><p>创建ConfigParser()类的时候可以指定interpolation参数，如果将interpolation设置为<code>BasicInterpolation()</code>，则配置文件中的<code>%(key)s</code>结构会被解析，如，比如<code>example.ini</code>文件内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[Paths]</div><div class="line">home_dir: /Users</div><div class="line">my_dir: %(home_dir)s/lumberjack</div><div class="line">my_pictures: %(my_dir)s/Pictures</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config = configparser.ConfigParser(interpolation=configparser.BasicInterpolation())</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config.read(<span class="string">r'F:\coding\python\example.ini'</span>)</div><div class="line">[<span class="string">'F:\\coding\\python\\example.ini'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'Paths'</span>][<span class="string">'my_dir'</span>]</div><div class="line"><span class="string">'/Users/lumberjack'</span></div></pre></td></tr></table></figure>
<p>可以看到<code>%(home_dir)s</code>被解析成了<code>/Users</code>，说白了，相当于配置文件中的变量</p>
<p>创建ConfigParser()类的时候如果没有指定interpolation参数，则不会解析<code>%(key)s</code>，只会返回字符串而已</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">'Paths'</span>][<span class="string">'my_dir'</span>]</div><div class="line"><span class="string">'%(home_dir)s/lumberjack'</span></div></pre></td></tr></table></figure>
<p>当然Interpolation还有更高级的使用方法，创建ConfigParser()类的时候指定interpolation参数为<code>ExtendedInterpolation()</code>，那么解析器会解析<code>${section:key}</code>结构，那么上面的ini文件应该写成如下的格式:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[Paths]</div><div class="line">home_dir: /Users</div><div class="line">my_dir: $&#123;home_dir&#125;/lumberjack</div><div class="line">my_pictures: $&#123;my_dir&#125;/Pictures</div></pre></td></tr></table></figure>
<p>并且<code>ExtendedInterpolation()</code>也能解析更复杂的，像下面这样的ini文件:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[Common]</div><div class="line">home_dir: /Users</div><div class="line">library_dir: /Library</div><div class="line">system_dir: /System</div><div class="line">macports_dir: /opt/local</div><div class="line"></div><div class="line">[Frameworks]</div><div class="line">Python: 3.2</div><div class="line">path: $&#123;Common:system_dir&#125;/Library/Frameworks/</div><div class="line"></div><div class="line">[Arthur]</div><div class="line">nickname: Two Sheds</div><div class="line">last_name: Jackson</div><div class="line">my_dir: $&#123;Common:home_dir&#125;/twosheds</div><div class="line">my_pictures: $&#123;my_dir&#125;/Pictures</div><div class="line">python_dir: $&#123;Frameworks:path&#125;/Python/Versions/$&#123;Frameworks:Python&#125;</div></pre></td></tr></table></figure>
<h2 id="ConfigParser"><a href="#ConfigParser" class="headerlink" title="ConfigParser"></a>ConfigParser</h2><p>ConfigParser对象的其他方法，如：</p>
<ul>
<li>add_section(section)</li>
<li>has_section(section)</li>
<li>options(section)</li>
<li>has_option(section, option)</li>
<li>remove_option(section, option)</li>
<li>remove_section(section)</li>
</ul>
<p>都很常用，具体就不介绍了，看名字就知道是干什么的了</p>
<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul>
<li><a href="https://docs.python.org/3.5/library/configparser.html" target="_blank" rel="external">configparser官方文档</a></li>
<li><a href="https://hg.python.org/cpython/file/3.5/Lib/configparser.py" target="_blank" rel="external">configparser源代码</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> configparser </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker学习笔记(一)]]></title>
      <url>https://xin053.github.io/2016/07/13/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Docker是容器，容器只能运行于底层宿主机相同或相似的操作系统。例如，可以在Ubuntu服务器上运行RedHat Enterprise Linux，但却无法在Ubuntu服务器上运行Windows</p>
<p>容器本身就比较复杂，不易安装，管理和自动化也很困难，而Docker就是为改变这一切而生。</p>
<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>Docker是一个能够把开发的应用程序自动部署到容器的开源引擎。</p>
<p>使用Docker时，开发人员只需要关心容器中运行的应用程序，而维护人员只需要关心如何管理容器。</p>
<p>Docker的目标之一就是缩短代码从开发，测试到部署，上线运行的周期，让你的应用程序具备可移植性，易于构建，并易于协作。</p>
<a id="more"></a>
<h2 id="Docker组件"><a href="#Docker组件" class="headerlink" title="Docker组件"></a>Docker组件</h2><p>Docker核心组件：</p>
<ul>
<li><a href="#Docker客户端和服务器端">Docker客户端和服务器端</a></li>
<li><a href="#Docker镜像">Docker镜像</a></li>
<li><a href="#Registry">Registry</a></li>
<li><a href="#Docker容器">Docker容器</a></li>
</ul>
<h3 id="Docker客户端和服务器端"><a href="#Docker客户端和服务器端" class="headerlink" title="Docker客户端和服务器端"></a>Docker客户端和服务器端</h3><p>Docker是一个C/S架构的程序</p>
<p><img src="http://i.imgur.com/Q9SPlJo.png" alt=""></p>
<h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>用户基于镜像来运行自己的容器。可以把镜像当作容器的“源代码”。镜像体积很小，易于分享，存储和更新。</p>
<p>从整体的角度来讲，一个完整的Docker镜像可以支撑一个Docker容器的运行，在 Docker容器运行过程中主要提供文件系统视角。例如一个ubuntu:14.04的镜像，提供了一个基本的ubuntu:14.04的发行版，当然此 镜像是不包含操作系统Linux内核的。</p>
<p>说到此，可能就需要注意一下，linux内核和ubuntu:14.04Docker镜像的区别了。传统虚拟机安装ubuntu:14.04会包含两部分，第一，某一个Linux内核的发行版本，比如Linux 3.8版本的内核；第二，第一个特定的Ubuntu发行版，这部分内容不包含Linux内核，但是包含Linux之外的软件管理方式，软件驱动，如 apt-get软件管理包等。</p>
<p>理解以上内容之后，就可以理解，为什么在一个Linux内核版本为3.8的ubuntu:14.04基础上，可以把Linux内核版本升级到3.18，而ubuntu的版本依然是14.04。最主要的就是：Linux内核版本与ubuntu操作系统发行版之间的区别。</p>
<p>Linux内核＋ubuntu操作系统发行版，组成一台工作的机器让用户体验。那么灵活替换ubuntu操作系统发行版，那是不是也可以实现呢。那么Docker很方便的利用了这一点，技术手段就是Docker镜像。</p>
<p>Docker的架构中，Docker镜像就是类似于“ubuntu操作系统发行版”，可 以在任何满足要求的Linux内核之上运行。简单一点有“Debian操作系统发行版”Docker镜像、“Ubuntu操作系统发行版”Docker镜 像；如果在Debian镜像中安装MySQL 5.6，那我们可以将其命名为Mysql:5.6镜像；如果在Debian镜像中安装有Golang 1.3,那我们可以将其命名为golang:1.3镜像；以此类推，大家可以根据自己安装的软件，得到任何自己想要的镜像。</p>
<p>那么镜像最后的作用是什么呢？很好理解，回到Linux内核上来运行，通过镜像来运行时我们常常将提供的环境称为容器。</p>
<p>以上内容是从宏观的角度看看Docker镜像是什么，我们再从微观的角度进一步深入 Docker镜像。刚才提到了“Debian镜像中安装MySQL 5.6，就成了mysql:5.6镜像”，其实在此时Docker镜像的层级概念就体现出来了。底层一个Debian操作系统镜像，上面叠加一个 mysql层，就完成了一个mysql镜像的构建。层级概念就不难理解，此时我们一般debian操作系统镜像称为mysql镜像层的父镜像。</p>
<p>层级管理的方式大大便捷了Docker镜像的分发与存储。说到分发，大家自然会联想到 Docker镜像的灵活性，传输的便捷性，以及高超的移植性。Docker Hub，作为全球的镜像仓库，作为Docker生态中的数据仓库，将全世界的Docker数据汇聚在一起，是Docker生态的命脉。</p>
<h3 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h3><p>Docker用Registry来保存用户构建的镜像。Registry分为公共和私有两种。Docker公司运营的公共Registry叫做Docker Hub。</p>
<h3 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h3><p>Docker可以帮你构建和部署容器，你只需把自己的应用程序或者服务打包放进容器即可。容器是基于镜像启动的，容器中可以运行一个或多个进程。镜像是Docker生命周期中的构建或打包阶段，而容器则是启动或执行阶段。</p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p>Docker是基于linux中某些特性产生的，所以只支持linux系统，同时需要内核3.10以上，其他需要请看<a href="https://docs.docker.com" target="_blank" rel="external">官网</a>，目前支持的linux系统也比较少，所以对于mac和win而言，只能通过安装虚拟机来安装docker。由于我本机是win10，所以以下说明win系统下docker的安装，其他请看<a href="https://docs.docker.com" target="_blank" rel="external">官网</a></p>
<p>官网提供<code>docker for windows</code>这款软件，但是很多要求，比如：</p>
<blockquote>
<p>Docker for Windows requires 64bit Windows 10 Pro, Enterprise and Education (1511 November update, Build 10586 or later) and Microsoft Hyper-V.</p>
</blockquote>
<p>且不说对系统版本的问题，现在单说Hyper-V，这个是微软自带的虚拟机，启用之后，整个物理机处于虚拟化状态，在这之上是不能再开启vmware和virtual box等虚拟机软件的，这并不是关不关闭某些服务的问题，而是根本就不行。也就是不能共存。虽然可以通过添加启动项让系统启动的时候选择是否是Hyper-V环境，但是还是很麻烦。</p>
<p>而楼主需要vmware中的kali，所以想着既然微软自带hyper-V，便打算在这上面安装kali系统，结果折腾了半天，放弃了，原因如下：</p>
<ul>
<li>虽然直接跟硬件打交道，但是对于图形化界面而言太卡了，即使分配2g内存，也卡卡卡卡，试试就知道，卡到怀疑这个软件，这个是我不使用这个的最主要原因</li>
<li>没有vmtools这种软件，屏幕分辨率只有一种，对于笔记本而言，出现上下滑动的滚动条极其不方便，虽然可以通过修改grub来指定特定的分辨率，但是不能自适应还是不方便</li>
<li>不能从物理机到虚拟机的自由拷贝，虽然这点也可以解决，不过因为第一点原因，太卡，最终还是放弃了hyper-v，我觉得我再也不会使用这个虚拟机了，不是说它不行，而是不适合我。</li>
</ul>
<p>所以这里还是推荐使用<code>toolbox</code>，也就是docker早期提供的解决方案，这个软件中除docker必须组件外，还包括virtual box安装包，git安装包，安装过这两个的，可以在安装过程中取消勾选。</p>
<p>安装之后会生成两个快捷方式：<code>Docker Quickstart Terminal</code>和<code>Kitematic (Alpha)</code>，后者是管理docker的图形化软件，是辅助软件，不过很方便。</p>
<p>我们首先打开前者，首次打开会自动创建虚拟机，并运行虚拟机，配置好各种设置，最后显示如下说明安装完成：</p>
<p><strong>注意：即使关闭命令行窗口，后台载有docker的虚拟机还是在运行，需要打开virtual box手动关闭。关闭虚拟机后，以后打开<code>Docker Quickstart Terminal</code>会自动开启该虚拟机</strong></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">                        <span class="comment">##         .</span></div><div class="line">                  <span class="comment">## ## ##        ==</span></div><div class="line">               <span class="comment">## ## ## ## ##    ===</span></div><div class="line">           /<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"\___/ ===</span></div><div class="line">      ~~~ &#123;~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~</div><div class="line">           \______ o           __/</div><div class="line">             \    \         __/</div><div class="line">              \____\_______/</div><div class="line"></div><div class="line">docker is configured to use the default machine with IP 192.168.99.100</div><div class="line">For help getting started, check out the docs at https://docs.docker.com</div><div class="line"></div><div class="line">Start interactive shell</div><div class="line"></div><div class="line">zzx@zhouzixin MINGW64 ~</div><div class="line">$</div></pre></td></tr></table></figure>
<p>然后，可以检测下docker一些命令是否能够正常工作：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">$ docker run hello-world</div><div class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</div><div class="line">latest: Pulling from library/hello-world</div><div class="line"></div><div class="line">c04b14da8d14: Pull complete</div><div class="line">Digest: sha256:<span class="number">0256</span>e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</div><div class="line"></div><div class="line">Hello from Docker!</div><div class="line">This message shows that your installation appears to be working correctly.</div><div class="line"></div><div class="line">To generate this message, Docker took the following steps:</div><div class="line"> <span class="number">1</span>. The Docker client contacted the Docker daemon.</div><div class="line"> <span class="number">2</span>. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</div><div class="line"> <span class="number">3</span>. The Docker daemon created a new container from that image which runs the</div><div class="line">    executable that produces the output you are currently reading.</div><div class="line"> <span class="number">4</span>. The Docker daemon streamed that output to the Docker client, which sent it</div><div class="line">    to your terminal.</div><div class="line"></div><div class="line">To <span class="keyword">try</span> something more ambitious, you can run an Ubuntu container with:</div><div class="line"> $ docker run -it ubuntu bash</div><div class="line"></div><div class="line">Share images, automate workflows, and more with a free Docker Hub account:</div><div class="line"> https://hub.docker.com</div><div class="line"></div><div class="line"><span class="keyword">For</span> more examples and ideas, visit:</div><div class="line"> https://docs.docker.com/engine/userguide/</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ docker version</div><div class="line">Client:</div><div class="line"> Version:      <span class="number">1.12</span>.<span class="number">1</span></div><div class="line"> API version:  <span class="number">1.24</span></div><div class="line"> Go version:   go1.<span class="number">6.3</span></div><div class="line"> Git commit:   <span class="number">23</span>cf638</div><div class="line"> Built:        Thu Aug <span class="number">18</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">38</span> <span class="number">2016</span></div><div class="line"> OS/Arch:      windows/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      <span class="number">1.12</span>.<span class="number">1</span></div><div class="line"> API version:  <span class="number">1.24</span></div><div class="line"> Go version:   go1.<span class="number">6.3</span></div><div class="line"> Git commit:   <span class="number">23</span>cf638</div><div class="line"> Built:        Thu Aug <span class="number">18</span> <span class="number">17</span>:<span class="number">52</span>:<span class="number">38</span> <span class="number">2016</span></div><div class="line"> OS/Arch:      linux/amd64</div></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">$ docker info</div><div class="line">Containers: <span class="number">1</span></div><div class="line"> Running: <span class="number">0</span></div><div class="line"> Paused: <span class="number">0</span></div><div class="line"> Stopped: <span class="number">1</span></div><div class="line">Images: <span class="number">1</span></div><div class="line">Server Version: <span class="number">1.12</span>.<span class="number">1</span></div><div class="line">Storage Driver: aufs</div><div class="line"> Root Dir: /mnt/sda1/var/lib/docker/aufs</div><div class="line"> Backing Filesystem: extfs</div><div class="line"> Dirs: <span class="number">3</span></div><div class="line"> Dirperm1 Supported: true</div><div class="line">Logging Driver: json-file</div><div class="line">Cgroup Driver: cgroupfs</div><div class="line">Plugins:</div><div class="line"> Volume: local</div><div class="line"> Network: host null bridge overlay</div><div class="line">Swarm: inactive</div><div class="line">Runtimes: runc</div><div class="line">Default Runtime: runc</div><div class="line">Security Options: seccomp</div><div class="line">Kernel Version: <span class="number">4.4</span>.<span class="number">17</span>-boot2docker</div><div class="line">Operating System: Boot2Docker <span class="number">1.12</span>.<span class="number">1</span> (TCL <span class="number">7.2</span>); HEAD : ef7d0b4 - Thu Aug <span class="number">18</span> <span class="number">21</span>:<span class="number">18</span>:<span class="number">06</span> UTC <span class="number">2016</span></div><div class="line">OSType: linux</div><div class="line">Architecture: x86_64</div><div class="line">CPUs: <span class="number">1</span></div><div class="line">Total Memory: <span class="number">995.9</span> MiB</div><div class="line">Name: default</div><div class="line">ID: DIO7:T6MX:DIRC:<span class="number">2</span>GND:ZQZE:XQW6:<span class="number">3</span>GQF:KUKW:<span class="number">6</span>NYB:NGXQ:Y67A:TBCH</div><div class="line">Docker Root Dir: /mnt/sda1/var/lib/docker</div><div class="line">Debug Mode (client): false</div><div class="line">Debug Mode (server): true</div><div class="line"> File Descriptors: <span class="number">13</span></div><div class="line"> Goroutines: <span class="number">24</span></div><div class="line"> System Time: <span class="number">2016</span>-<span class="number">09</span>-<span class="number">10</span>T06:<span class="number">02</span>:<span class="number">28.737254965</span>Z</div><div class="line"> EventsListeners: <span class="number">0</span></div><div class="line">Registry: https://index.docker.io/v1/</div><div class="line">Labels:</div><div class="line"> provider=virtualbox</div><div class="line">Insecure Registries:</div><div class="line"> <span class="number">127.0</span>.<span class="number">0.0</span>/<span class="number">8</span></div></pre></td></tr></table></figure>
<p>至此，docker的安装完成，至于linux和mac下的安装，请参见<a href="https://docs.docker.com" target="_blank" rel="external">官网</a></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://www.csdn.net/article/2015-08-21/2825511" target="_blank" rel="external">深入分析Docker镜像原理</a></li>
<li><a href="http://blog.csdn.net/ztguang/article/details/51016568" target="_blank" rel="external">如何创建一个安全的Docker基础镜像</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tablib库使用详解]]></title>
      <url>https://xin053.github.io/2016/07/10/tablib%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="tablib简介"><a href="#tablib简介" class="headerlink" title="tablib简介"></a>tablib简介</h2><p>tablib为requests作者<code>kennethreitz</code>维护，支持python2到python3.简单的说就是一个通用的数据集，操作类似数据库，但又不是一个数据库的代替，因为缺少查操作，但是可以通过tablib将数据集轻松转为xls、csv、yaml等格式。简单的来说就是用来处理<code>tabular dataset</code>，为这些不同格式的数据集提供一个统一的格式。</p>
<p>目前支持下面这些输出格式：</p>
<ul>
<li>Excel (Sets + Books)</li>
<li>JSON (Sets + Books)</li>
<li>YAML (Sets + Books)</li>
<li>HTML (Sets)</li>
<li>TSV (Sets)</li>
<li>OSD (Sets)</li>
<li>CSV (Sets)</li>
<li>DBF (Sets)</li>
</ul>
<a id="more"></a>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="创建Dataset对象"><a href="#创建Dataset对象" class="headerlink" title="创建Dataset对象"></a>创建Dataset对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tablib</div><div class="line">headers = (<span class="string">'first_name'</span>, <span class="string">'last_name'</span>)</div><div class="line"></div><div class="line">data = [</div><div class="line">    (<span class="string">'John'</span>, <span class="string">'Adams'</span>),</div><div class="line">    (<span class="string">'George'</span>, <span class="string">'Washington'</span>)</div><div class="line">]</div><div class="line"></div><div class="line">data = tablib.Dataset(*data, headers=headers)</div></pre></td></tr></table></figure>
<p>这样相当于构造了一张表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">first_name</th>
<th style="text-align:center">last_name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">John</td>
<td style="text-align:center">Adams</td>
</tr>
<tr>
<td style="text-align:center">George</td>
<td style="text-align:center">Washington</td>
</tr>
</tbody>
</table>
<p>其中最重要的就是<code>Dataset</code>对象，当然该对象的创建也可以不输入参数，直接<code>data = tablib.Dataset()</code>创建出一个<code>Dataset</code>对象，然后通过<code>data.headers = [&#39;first_name&#39;, &#39;last_name&#39;]</code>设置表头，当然也可以使用<code>data.headers = (&#39;first_name&#39;, &#39;last_name&#39;)</code>,因为不管是用列表还是元组，tablib都会自动帮我们处理好，我们可以通过<code>data.append([&#39;Henry&#39;, &#39;Ford&#39;])</code>或者<code>data.append((&#39;Henry&#39;, &#39;Ford&#39;))</code>来向表中添加一条记录。</p>
<p>我们可以通过<code>data.dict</code>来查看目前表中的所有数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.dict</div><div class="line">[OrderedDict([(<span class="string">'First Name'</span>, <span class="string">'John'</span>), (<span class="string">'Last Name'</span>, <span class="string">'Adams'</span>)]), OrderedDict([(<span class="string">'First Name'</span>, <span class="string">'George'</span>), (<span class="string">'Last Name'</span>, <span class="string">'Washington'</span>)]), OrderedDict([(<span class="string">'First Name'</span>, <span class="string">'Henry'</span>), (<span class="string">'Last Name'</span>, <span class="string">'Ford'</span>)])]</div></pre></td></tr></table></figure>
<p>也可以通过<code>print(data)</code>显示更人性化的输出：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data)</div><div class="line">First Name|Last Name </div><div class="line">----------|----------</div><div class="line">John      |Adams     </div><div class="line">George    |Washington</div><div class="line">Henry     |Ford</div></pre></td></tr></table></figure>
<h3 id="Dataset属性"><a href="#Dataset属性" class="headerlink" title="Dataset属性"></a>Dataset属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data)</div><div class="line">First Name|Last Name|age</div><div class="line">----------|---------|---</div><div class="line">John      |Adams    |<span class="number">90</span></div><div class="line">Henry     |Ford     |<span class="number">83</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.height</div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.width</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure>
<p><code>data.height</code>输出当前记录(行)总数<br><code>data.width</code>输出当前属性(列)总数</p>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><code>lpop()</code>,<code>lpush(row, tags=[])</code>,<code>lpush_col(col, header=None)</code>是对列的相关操作</p>
<p><code>pop()</code>,<code>rpop()</code>,<code>rpush(row, tags=[])</code>,<code>rpush_col(col, header=None)</code>是对行的相关操作</p>
<p><code>remove_duplicates()</code>去除重复的记录</p>
<p><code>sort(col, reverse=False)</code>根据列进行排序</p>
<p><code>subset(rows=None, cols=None)</code>返回子Dataset</p>
<p><code>wipe()</code>清空Dataset，包括表头和内容</p>
<h3 id="新增列"><a href="#新增列" class="headerlink" title="新增列"></a>新增列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.append_col((<span class="number">90</span>, <span class="number">67</span>, <span class="number">83</span>), header=<span class="string">'age'</span>)</div></pre></td></tr></table></figure>
<p>这样表就变成了：</p>
<table>
<thead>
<tr>
<th style="text-align:center">first_name</th>
<th style="text-align:center">last_name</th>
<th style="text-align:center">age</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">John</td>
<td style="text-align:center">Adams</td>
<td style="text-align:center">90</td>
</tr>
<tr>
<td style="text-align:center">George</td>
<td style="text-align:center">Washington</td>
<td style="text-align:center">67</td>
</tr>
<tr>
<td style="text-align:center">Henry</td>
<td style="text-align:center">Ford</td>
<td style="text-align:center">83</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data)</div><div class="line">First Name|Last Name |age</div><div class="line">----------|----------|---</div><div class="line">John      |Adams     |<span class="number">90</span></div><div class="line">George    |Washington|<span class="number">67</span></div><div class="line">Henry     |Ford      |<span class="number">83</span></div></pre></td></tr></table></figure>
<h3 id="对记录操作"><a href="#对记录操作" class="headerlink" title="对记录操作"></a>对记录操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data[:<span class="number">2</span>])</div><div class="line">[(<span class="string">'John'</span>, <span class="string">'Adams'</span>, <span class="number">90</span>), (<span class="string">'George'</span>, <span class="string">'Washington'</span>, <span class="number">67</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data[<span class="number">2</span>:])</div><div class="line">[(<span class="string">'Henry'</span>, <span class="string">'Ford'</span>, <span class="number">83</span>)]</div></pre></td></tr></table></figure>
<h3 id="对属性操作"><a href="#对属性操作" class="headerlink" title="对属性操作"></a>对属性操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data[<span class="string">'first_name'</span>])</div><div class="line">[<span class="string">'John'</span>, <span class="string">'George'</span>, <span class="string">'Henry'</span>]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data)</div><div class="line">First Name|Last Name |age</div><div class="line">----------|----------|---</div><div class="line">John      |Adams     |<span class="number">90</span></div><div class="line">George    |Washington|<span class="number">67</span></div><div class="line">Henry     |Ford      |<span class="number">83</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.get_col(<span class="number">1</span>)</div><div class="line">[<span class="string">'Adams'</span>, <span class="string">'Washington'</span>, <span class="string">'Ford'</span>]</div></pre></td></tr></table></figure>
<h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> data[<span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data)</div><div class="line">First Name|Last Name|age</div><div class="line">----------|---------|---</div><div class="line">John      |Adams    |<span class="number">90</span></div><div class="line">Henry     |Ford     |<span class="number">83</span></div></pre></td></tr></table></figure>
<p>可见记录也是从0开始索引的</p>
<p>删除记录操作也支持切片</p>
<h3 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">del</span> data[<span class="string">'Col Name'</span>]</div></pre></td></tr></table></figure>
<h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imported_data = Dataset().load(open(<span class="string">'data.csv'</span>).read())</div></pre></td></tr></table></figure>
<h3 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h3><h4 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.csv</div><div class="line"><span class="string">'First Name,Last Name,age\r\nJohn,Adams,90\r\nHenry,Ford,83\r\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data.csv)</div><div class="line">First Name,Last Name,age</div><div class="line">John,Adams,<span class="number">90</span></div><div class="line">Henry,Ford,<span class="number">83</span></div></pre></td></tr></table></figure>
<h4 id="json"><a href="#json" class="headerlink" title="json"></a>json</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.json</div><div class="line"><span class="string">'[&#123;"First Name": "John", "Last Name": "Adams", "age": 90&#125;, &#123;"First Name": "Henry", "Last Name": "Ford", "age": 83&#125;]'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data.json)</div><div class="line">[&#123;<span class="string">"First Name"</span>: <span class="string">"John"</span>, <span class="string">"Last Name"</span>: <span class="string">"Adams"</span>, <span class="string">"age"</span>: <span class="number">90</span>&#125;, &#123;<span class="string">"First Name"</span>: <span class="string">"Henry"</span>, <span class="string">"Last Name"</span>: <span class="string">"Ford"</span>, <span class="string">"age"</span>: <span class="number">83</span>&#125;]</div></pre></td></tr></table></figure>
<h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.yaml</div><div class="line"><span class="string">'- &#123;First Name: John, Last Name: Adams, age: 90&#125;\n- &#123;First Name: Henry, Last Name: Ford, age: 83&#125;\n'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(data.yaml)</div><div class="line">- &#123;First Name: John, Last Name: Adams, age: <span class="number">90</span>&#125;</div><div class="line">- &#123;First Name: Henry, Last Name: Ford, age: <span class="number">83</span>&#125;</div></pre></td></tr></table></figure>
<h4 id="excel"><a href="#excel" class="headerlink" title="excel"></a>excel</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'people.xls'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    f.write(data.xls)</div></pre></td></tr></table></figure>
<p>注意要以二进制形式打开文件</p>
<h4 id="dbf"><a href="#dbf" class="headerlink" title="dbf"></a>dbf</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'people.dbf'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line"><span class="meta">... </span>    f.write(data.dbf)</div></pre></td></tr></table></figure>
<h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><h3 id="动态列"><a href="#动态列" class="headerlink" title="动态列"></a>动态列</h3><p>可以将一个函数指定给Dataset对象</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_grade</span><span class="params">(row)</span>:</span></div><div class="line">	<span class="string">"""Returns a random integer for entry."""</span></div><div class="line">	<span class="keyword">return</span> (random.randint(<span class="number">60</span>,<span class="number">100</span>)/<span class="number">100.0</span>)</div><div class="line"></div><div class="line">data.append_col(random_grade, header=<span class="string">'Grade'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.yaml</div><div class="line">- &#123;Age: <span class="number">22</span>, First Name: Kenneth, Grade: <span class="number">0.6</span>, Last Name: Reitz&#125;</div><div class="line">- &#123;Age: <span class="number">20</span>, First Name: Bessie, Grade: <span class="number">0.75</span>, Last Name: Monke&#125;</div></pre></td></tr></table></figure>
<p>函数的参数<code>row</code>传入的是每一行记录，所以可以根据传入的记录进行更一步的计算：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">guess_gender</span><span class="params">(row)</span>:</span></div><div class="line">	<span class="string">"""Calculates gender of given student data row."""</span></div><div class="line">	m_names = (<span class="string">'Kenneth'</span>, <span class="string">'Mike'</span>, <span class="string">'Yuri'</span>)</div><div class="line">	f_names = (<span class="string">'Bessie'</span>, <span class="string">'Samantha'</span>, <span class="string">'Heather'</span>)</div><div class="line"></div><div class="line">	name = row[<span class="number">0</span>]</div><div class="line"></div><div class="line">	<span class="keyword">if</span> name <span class="keyword">in</span> m_names:</div><div class="line">		<span class="keyword">return</span> <span class="string">'Male'</span></div><div class="line">	<span class="keyword">elif</span> name <span class="keyword">in</span> f_names:</div><div class="line">		<span class="keyword">return</span> <span class="string">'Female'</span></div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">return</span> <span class="string">'Unknown'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data.yaml</div><div class="line">- &#123;Age: <span class="number">22</span>, First Name: Kenneth, Gender: Male, Last Name: Reitz&#125;</div><div class="line">- &#123;Age: <span class="number">20</span>, First Name: Bessie, Gender: Female, Last Name: Monke&#125;</div></pre></td></tr></table></figure>
<h3 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h3><p>可以给记录添加tag，之后通过tag来过滤记录：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">students = tablib.Dataset()</div><div class="line"></div><div class="line">students.headers = [<span class="string">'first'</span>, <span class="string">'last'</span>]</div><div class="line"></div><div class="line">students.rpush([<span class="string">'Kenneth'</span>, <span class="string">'Reitz'</span>], tags=[<span class="string">'male'</span>, <span class="string">'technical'</span>])</div><div class="line">students.rpush([<span class="string">'Bessie'</span>, <span class="string">'Monke'</span>], tags=[<span class="string">'female'</span>, <span class="string">'creative'</span>])</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>students.filter([<span class="string">'male'</span>]).yaml</div><div class="line">- &#123;first: Kenneth, Last: Reitz&#125;</div></pre></td></tr></table></figure>
<h3 id="Excel-Workbook-With-Multiple-Sheets"><a href="#Excel-Workbook-With-Multiple-Sheets" class="headerlink" title="Excel Workbook With Multiple Sheets"></a>Excel Workbook With Multiple Sheets</h3><p>it’s quite common to group multiple spreadsheets into a single Excel file, known as a Workbook.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">book = tablib.Databook((data1, data2, data3))</div><div class="line"></div><div class="line"><span class="keyword">with</span> open(<span class="string">'students.xls'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">	f.write(book.xls)</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://docs.python-tablib.org/en/latest/" target="_blank" rel="external">tablib官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> tablib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shortuuid库使用详解]]></title>
      <url>https://xin053.github.io/2016/07/07/shortuuid%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="shortuuid简介"><a href="#shortuuid简介" class="headerlink" title="shortuuid简介"></a>shortuuid简介</h2><p>UUID是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。在UUID的算法中，可能会用到诸如网卡MAC地址，IP，主机名，进程ID等信息以保证其独立性。</p>
<p>UUID的唯一缺陷在于生成的结果串会比较长。关于UUID这个标准使用最普遍的是微软的GUID(Globals Unique Identifiers)。在ColdFusion中可以用CreateUUID()函数很简单地生成UUID，其格式为：xxxxxxxx-xxxx- xxxx-xxxxxxxxxxxxxxxx(8-4-4-16)，其中每个 x 是 0-9 或 a-f 范围内的一个十六进制的数字。而标准的UUID格式为：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)</p>
<p>shortuuid使用python内置的uuid模块产生标准32位uuid，然后进行base57编码，使用的字符集为数字，字母大小写，然后再除去结果中相近的字符：<code>l, 1, I, O 和 0</code></p>
<a id="more"></a>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>可以使用shortuuid模块的<code>uuid()</code>方法快速产生uuid:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> shortuuid</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.uuid()</div><div class="line"><span class="string">'vytxeTZskVKR7C7WgdSP3d'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.uuid()</div><div class="line"><span class="string">'c6Xi3vjP6DpyLF5WipPSD4'</span></div></pre></td></tr></table></figure>
<p>也可以以一个name来产生uuid:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.uuid(name=<span class="string">"example.com"</span>)</div><div class="line"><span class="string">'wpsWLdLt9nscn2jbTD3uxe'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.uuid(name=<span class="string">"example.com"</span>)</div><div class="line"><span class="string">'wpsWLdLt9nscn2jbTD3uxe'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.uuid(name=<span class="string">"http://example.com"</span>)</div><div class="line"><span class="string">'c8sh5y9hdSMS6zVnrvf53T'</span></div></pre></td></tr></table></figure>
<p>也可以产生定长的uuid:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.uuid(pad_length=<span class="number">32</span>)</div><div class="line"><span class="string">'jy2ksEmHC46d2uvrvZxMEG2222222222'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.uuid(pad_length=<span class="number">32</span>)</div><div class="line"><span class="string">'2HxCkUWH9QgeVPMptqhv2T2222222222'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.uuid(pad_length=<span class="number">40</span>)</div><div class="line"><span class="string">'pmmFaPm7EyMHCqWgYat8M8222222222222222222'</span></div></pre></td></tr></table></figure>
<p>指定<code>pad_length</code>将会使用字符集中的第一个字符填充为指定长度</p>
<p>获取使用的字符集:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.get_alphabet()</div><div class="line"><span class="string">'23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'</span></div></pre></td></tr></table></figure>
<p>设置字符集:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.set_alphabet(<span class="string">"aaaaabcdefgh1230123"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.uuid()</div><div class="line"><span class="string">'0agee20aa1hehebcagddhedddc0d2chhab3b'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.get_alphabet()</div><div class="line"><span class="string">'0123abcdefgh'</span></div></pre></td></tr></table></figure>
<p>shortuuid会自动去除字符集中重复的字符</p>
<p><code>encode()</code>与<code>decode()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> uuid ; u = uuid.uuid4() ; u</div><div class="line">UUID(<span class="string">'6ca4f0f8-2508-4bac-b8f1-5d1e3da2247a'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = shortuuid.encode(u) ; s</div><div class="line"><span class="string">'cu8Eo9RyrUsV4MXEiDZpLM'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.decode(s) == u</div><div class="line"><span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.decode(shortuuid.uuid())</div><div class="line">UUID(<span class="string">'7f4e0771-d675-42b7-a1ff-dff3386d3de8'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.decode(shortuuid.uuid())</div><div class="line">UUID(<span class="string">'8a2dbc65-d688-474c-a3fa-4e12db6ce4a7'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.decode(shortuuid.uuid())</div><div class="line">UUID(<span class="string">'37e2d25e-aeb0-48be-84ea-cb41793a1228'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.decode(shortuuid.uuid(name=<span class="string">'zzx'</span>))</div><div class="line">UUID(<span class="string">'041f18b2-18fc-5d7b-a8a7-b21c3843e9e7'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>shortuuid.decode(shortuuid.uuid(name=<span class="string">'zzx'</span>))</div><div class="line">UUID(<span class="string">'041f18b2-18fc-5d7b-a8a7-b21c3843e9e7'</span>)</div></pre></td></tr></table></figure>
<h2 id="ShortUUID类"><a href="#ShortUUID类" class="headerlink" title="ShortUUID类"></a>ShortUUID类</h2><p>当你需要在每个线程中有不用的字符集来产生uuid时，可以使用<code>ShortUUID</code>类</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>su = shortuuid.ShortUUID(alphabet=<span class="string">"01345678"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>su.uuid()</div><div class="line"><span class="string">'034636353306816784480643806546503818874456'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>su.get_alphabet()</div><div class="line"><span class="string">'01345678'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>su.set_alphabet(<span class="string">"21345687654123456"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>su.get_alphabet()</div><div class="line"><span class="string">'12345678'</span></div></pre></td></tr></table></figure>
<p>当然<code>ShortUUID</code>类也有这些方法：</p>
<ul>
<li>encode()</li>
<li>decode()</li>
<li>uuid()</li>
<li>random()</li>
<li>get_alphabet()</li>
<li>set_alphabet()</li>
<li>encoded_length()</li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> shortuuid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pyfiglet库使用详解]]></title>
      <url>https://xin053.github.io/2016/07/06/pyfiglet%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="pyfiglet简介"><a href="#pyfiglet简介" class="headerlink" title="pyfiglet简介"></a>pyfiglet简介</h2><p>pyfiglet是<a href="http://www.figlet.org/" target="_blank" rel="external">figlet</a>的python实现。</p>
<p>那么figlet是什么?好吧，就是这个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> _____ ___ ____ _      _   </div><div class="line">|  ___|_ _/ ___| | ___| |_ </div><div class="line">| |_   | | |  _| |/ _ \ __|</div><div class="line">|  _|  | | |_| | |  __/ |_ </div><div class="line">|_|   |___\____|_|\___|\__|</div></pre></td></tr></table></figure>
<p>说简单点就是输出像上图这样的由字符拼凑的图形。</p>
<a id="more"></a>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyfiglet</div></pre></td></tr></table></figure>
<p>安装好pyfiglet之后就同时安装好了pyfiglet命令行工具和pyfiglet模块。</p>
<h3 id="使用pyfiglet命令行工具"><a href="#使用pyfiglet命令行工具" class="headerlink" title="使用pyfiglet命令行工具"></a>使用pyfiglet命令行工具</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C:\WINDOWS\system32&gt;pyfiglet zzx</div><div class="line"></div><div class="line"> __________  __</div><div class="line">|_  /_  /\ \/ /</div><div class="line"> / / / /  &gt;  &lt;</div><div class="line">/___/___|/_/\_\</div></pre></td></tr></table></figure>
<p>pyfiglet使用帮助：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">C:\WINDOWS\system32&gt;pyfiglet</div><div class="line">Usage: pyfiglet [options] [text..]</div><div class="line"></div><div class="line">Options:</div><div class="line">  --version             show program<span class="string">'s version number and exit</span></div><div class="line">  -h, --help            show this help message and exit</div><div class="line">  -f FONT, --font=FONT  font to render with (default: standard)</div><div class="line">  -D DIRECTION, --direction=DIRECTION</div><div class="line">                        set direction text will be formatted in (default:</div><div class="line">                        auto)</div><div class="line">  -j SIDE, --justify=SIDE</div><div class="line">                        set justification, defaults to print direction</div><div class="line">  -w COLS, --width=COLS</div><div class="line">                        set terminal width for wrapping/justification</div><div class="line">                        (default: 80)</div><div class="line">  -r, --reverse         shows mirror image of output text</div><div class="line">  -F, --flip            flips rendered output text over</div><div class="line">  -l, --list_fonts      show installed fonts list</div><div class="line">  -i, --info_font       show font's information, use with -f FONT</div></pre></td></tr></table></figure>
<p>比较有用的参数也就是<code>-f</code>,<code>-D</code>,<code>-j</code>,<code>-r</code></p>
<p>下面分别演示：</p>
<p><code>-f</code>设置输出的字体，<code>-l</code>可以列出支持的所有字体，figlet官网有部分字体的输出预览：<a href="http://www.figlet.org/examples.html" target="_blank" rel="external">http://www.figlet.org/examples.html</a></p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">C:\WINDOWS\system32&gt;pyfiglet -f doh zzx</div><div class="line"></div><div class="line">zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxxxxxxx      xxxxxxx</div><div class="line">z:::::::::::::::zz:::::::::::::::z x:::::x    x:::::x</div><div class="line">z::::::::::::::z z::::::::::::::z   x:::::x  x:::::x</div><div class="line">zzzzzzzz::::::z  zzzzzzzz::::::z     x:::::xx:::::x</div><div class="line">      z::::::z         z::::::z       x::::::::::x</div><div class="line">     z::::::z         z::::::z         x::::::::x</div><div class="line">    z::::::z         z::::::z          x::::::::x</div><div class="line">   z::::::z         z::::::z          x::::::::::x</div><div class="line">  z::::::zzzzzzzz  z::::::zzzzzzzz   x:::::xx:::::x</div><div class="line"> z::::::::::::::z z::::::::::::::z  x:::::x  x:::::x</div><div class="line">z:::::::::::::::zz:::::::::::::::z x:::::x    x:::::x</div><div class="line">zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxxxxxxx      xxxxxxx</div></pre></td></tr></table></figure>
<p>上面所有的就是<code>doh</code>这种字体的输出效果</p>
<p><code>-D</code>设置图形是从左向右输出还是从右向左输出,可选参数:</p>
<ul>
<li>auto</li>
<li>left-to-right</li>
<li>right-to-left</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">C:\WINDOWS\system32&gt;pyfiglet -D  left-to-right zzx</div><div class="line"></div><div class="line"> __________  __</div><div class="line">|_  /_  /\ \/ /</div><div class="line"> / / / /  &gt;  &lt;</div><div class="line">/___/___|/_/\_\</div><div class="line"></div><div class="line">C:\WINDOWS\system32&gt;pyfiglet -D right-to-left zzx</div><div class="line"></div><div class="line">                                                                __  __ ________</div><div class="line">                                                                \ \/ /|_  /_  /</div><div class="line">                                                                 &gt;  &lt;  / / / /</div><div class="line">                                                                /_/\_\/___/___|</div></pre></td></tr></table></figure>
<p><code>-j</code>设置输出方向，可选参数：</p>
<ul>
<li>auto</li>
<li>left</li>
<li>center</li>
<li>right</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">C:\WINDOWS\system32&gt;pyfiglet -j center zzx</div><div class="line"></div><div class="line">                                 __________  __</div><div class="line">                                |_  /_  /\ \/ /</div><div class="line">                                 / / / /  &gt;  &lt;</div><div class="line">                                /___/___|/_/\_\</div><div class="line"></div><div class="line">C:\WINDOWS\system32&gt;pyfiglet -j right zzx</div><div class="line"></div><div class="line">                                                                 __________  __</div><div class="line">                                                                |_  /_  /\ \/ /</div><div class="line">                                                                 / / / /  &gt;  &lt;</div><div class="line">                                                                /___/___|/_/\_\</div></pre></td></tr></table></figure>
<p><code>-r</code>输出字符的镜像图像</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">C:\WINDOWS\system32&gt;pyfiglet -r Txt</div><div class="line">   _      _____</div><div class="line"> _| |_  _|_   _|</div><div class="line">|__ \ \/ / | |</div><div class="line"> _| |&gt;  &lt;  | |</div><div class="line">|__//_/\_\ |_|</div></pre></td></tr></table></figure>
<h3 id="使用pyfiglet库"><a href="#使用pyfiglet库" class="headerlink" title="使用pyfiglet库"></a>使用pyfiglet库</h3><p><code>Figlet</code>是主要的class</p>
<p>使用时首先要创建一个<code>Figlet</code>对象,构造方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Figlet</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Main figlet class.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, font=DEFAULT_FONT, direction=<span class="string">'auto'</span>, justify=<span class="string">'auto'</span>,</span></span></div><div class="line">                 width=<span class="number">80</span>):</div><div class="line">        self.font = font</div><div class="line">        self._direction = direction</div><div class="line">        self._justify = justify</div><div class="line">        self.width = width</div><div class="line">        self.setFont()</div><div class="line">        self.engine = FigletRenderingEngine(base=self)</div></pre></td></tr></table></figure>
<p>参数就不再说明了，看使用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pyfiglet <span class="keyword">import</span> Figlet</div><div class="line">f = Figlet(font=<span class="string">'doh'</span>)</div><div class="line">print(f.renderText(<span class="string">'zzx'</span>))</div><div class="line"></div><div class="line">zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxxxxxxx      xxxxxxx</div><div class="line">z:::::::::::::::zz:::::::::::::::z x:::::x    x:::::x</div><div class="line">z::::::::::::::z z::::::::::::::z   x:::::x  x:::::x</div><div class="line">zzzzzzzz::::::z  zzzzzzzz::::::z     x:::::xx:::::x</div><div class="line">      z::::::z         z::::::z       x::::::::::x</div><div class="line">     z::::::z         z::::::z         x::::::::x</div><div class="line">    z::::::z         z::::::z          x::::::::x</div><div class="line">   z::::::z         z::::::z          x::::::::::x</div><div class="line">  z::::::zzzzzzzz  z::::::zzzzzzzz   x:::::xx:::::x</div><div class="line"> z::::::::::::::z z::::::::::::::z  x:::::x  x:::::x</div><div class="line">z:::::::::::::::zz:::::::::::::::z x:::::x    x:::::x</div><div class="line">zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzxxxxxxx      xxxxxxx</div></pre></td></tr></table></figure>
<p>pyfiglet源码<code>__init__.py</code>中还有好几个类，感兴趣的可以去看看：</p>
<ul>
<li><a href="https://github.com/pwaller/pyfiglet/blob/master/pyfiglet/__init__.py" target="_blank" rel="external"><code>__init__.py</code></a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> pyfiglet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ftfy更正Unicode库使用详解]]></title>
      <url>https://xin053.github.io/2016/07/05/ftfy%E6%9B%B4%E6%AD%A3Unicode%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="ftfy简介"><a href="#ftfy简介" class="headerlink" title="ftfy简介"></a>ftfy简介</h2><p>ftfy的目标是输入有问题的Unicode，输出正确的Unicode</p>
<p>适用于以下一些情况：</p>
<ul>
<li>原本Unicode文本被用其他编码解码造成的乱码，可以通过ftfy更正</li>
<li>像html中的<code>&amp;amp;</code>等标记会被ftfy更正</li>
<li>某些终端会带有一些控制符,如控制颜色,当复制时,就会复制这些多余的控制符</li>
<li>当从某些地方复制来的文本会出现一些显示问题，ftfy能更正</li>
</ul>
<p>需要注意的是：输入的文本原本是Unicode，而不是其他的编码</p>
<h2 id="fix-text"><a href="#fix-text" class="headerlink" title="fix_text"></a>fix_text</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(fix_text(<span class="string">'uÌˆnicode'</span>))</div><div class="line">ünicode</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(fix_text(<span class="string">'HTML entities &amp;lt;3'</span>))</div><div class="line">HTML entities &lt;<span class="number">3</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(fix_text(<span class="string">'ＬＯＵＤ　ＮＯＩＳＥＳ'</span>))</div><div class="line">LOUD NOISES</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><strong>注意：</strong><code>fix_text</code>每次只会处理一行，因为有可能其他行是其他的编码</p>
<p>当你确定整个段都是同一种编码的时候，可以使用<code>fix_text_segment</code>来代替<code>fix_text</code>,从而使整段更快的被更正。</p>
<h2 id="fix-encoding"><a href="#fix-encoding" class="headerlink" title="fix_encoding"></a>fix_encoding</h2><p>Fix text with incorrectly-decoded garbage (“mojibake”) whenever possible.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(fix_encoding(<span class="string">'Ãºnico'</span>))</div><div class="line">único</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(fix_encoding(<span class="string">'The more you know ðŸŒ '</span>))</div><div class="line">The more you know 🌠</div></pre></td></tr></table></figure>
<h2 id="fix-file"><a href="#fix-file" class="headerlink" title="fix_file"></a>fix_file</h2><p>Fix text that is found in a file.</p>
<p>If the file is being read as Unicode text, use that. If it’s being read as bytes, then we hope an encoding was supplied. If not, unfortunately, we have to guess what encoding it is. We’ll try a few common encodings, but we make no promises. See the <code>guess_bytes</code> function for how this is done.</p>
<p>The output is a stream of fixed lines of text.</p>
<h2 id="explain-unicode"><a href="#explain-unicode" class="headerlink" title="explain_unicode"></a>explain_unicode</h2><p>显示ftfy是如何更正的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>explain_unicode(<span class="string">'(╯°□°)╯︵ ┻━┻'</span>)</div><div class="line">U+<span class="number">0028</span>  (       [Ps] LEFT PARENTHESIS</div><div class="line">U+<span class="number">256</span>F  ╯       [So] BOX DRAWINGS LIGHT ARC UP AND LEFT</div><div class="line">U+<span class="number">00</span>B0  °       [So] DEGREE SIGN</div><div class="line">U+<span class="number">25</span>A1  □       [So] WHITE SQUARE</div><div class="line">U+<span class="number">00</span>B0  °       [So] DEGREE SIGN</div><div class="line">U+<span class="number">0029</span>  )       [Pe] RIGHT PARENTHESIS</div><div class="line">U+<span class="number">256</span>F  ╯       [So] BOX DRAWINGS LIGHT ARC UP AND LEFT</div><div class="line">U+FE35  ︵      [Ps] PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS</div><div class="line">U+<span class="number">0020</span>          [Zs] SPACE</div><div class="line">U+<span class="number">253</span>B  ┻       [So] BOX DRAWINGS HEAVY UP AND HORIZONTAL</div><div class="line">U+<span class="number">2501</span>  ━       [So] BOX DRAWINGS HEAVY HORIZONTAL</div><div class="line">U+<span class="number">253</span>B  ┻       [So] BOX DRAWINGS HEAVY UP AND HORIZONTAL</div></pre></td></tr></table></figure>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><p>ftfy can be used from the command line. By default, it takes UTF-8 input and writes it to UTF-8 output, fixing problems in its Unicode as it goes.</p>
<p>Here’s the usage documentation for the <code>ftfy</code> command:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">usage: ftfy [-h] [-o OUTPUT] [-g] [-e ENCODING] [-n NORMALIZATION]</div><div class="line">            [--preserve-entities]</div><div class="line">            [filename]</div><div class="line"></div><div class="line">ftfy (fixes text <span class="keyword">for</span> you), version <span class="number">4.0</span>.<span class="number">0</span></div><div class="line"></div><div class="line">positional arguments:</div><div class="line">  filename              The file whose Unicode is to be fixed. Defaults to -,</div><div class="line">                        meaning standard input.</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help            show this help message and <span class="keyword">exit</span></div><div class="line">  -o OUTPUT, --output OUTPUT</div><div class="line">                        The file to output to. Defaults to -, meaning standard</div><div class="line">                        output.</div><div class="line">  -g, --guess           Ask ftfy to guess the encoding of your input. This is</div><div class="line">                        risky. Overrides -e.</div><div class="line">  -e ENCODING, --encoding ENCODING</div><div class="line">                        The encoding of the input. Defaults to UTF-<span class="number">8</span>.</div><div class="line">  -n NORMALIZATION, --normalization NORMALIZATION</div><div class="line">                        The normalization of Unicode to apply. Defaults to</div><div class="line">                        NFC. Can be <span class="string">"none"</span>.</div><div class="line">  --preserve-entities   Leave HTML entities as they are. The default is to</div><div class="line">                        decode them, as long as no HTML tags have appeared <span class="keyword">in</span></div><div class="line">                        the file.</div></pre></td></tr></table></figure>
<h2 id="ftfy-fixes模块"><a href="#ftfy-fixes模块" class="headerlink" title="ftfy.fixes模块"></a>ftfy.fixes模块</h2><h3 id="ftfy-fixes-unescape-html"><a href="#ftfy-fixes-unescape-html" class="headerlink" title="ftfy.fixes.unescape_html"></a>ftfy.fixes.unescape_html</h3><p>专门用来解码html中的标签</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(unescape_html(<span class="string">'&amp;lt;tag&amp;gt;'</span>))</div><div class="line">&lt;tag&gt;</div></pre></td></tr></table></figure>
<h3 id="ftfy-fixes-remove-terminal-escapes"><a href="#ftfy-fixes-remove-terminal-escapes" class="headerlink" title="ftfy.fixes.remove_terminal_escapes"></a>ftfy.fixes.remove_terminal_escapes</h3><p>移除终端转义符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(remove_terminal_escapes(</div><div class="line"><span class="meta">... </span>    <span class="string">"\033[36;44mI'm blue, da ba dee da ba doo...\033[0m"</span></div><div class="line"><span class="meta">... </span>))</div><div class="line">I<span class="string">'m blue, da ba dee da ba doo...</span></div></pre></td></tr></table></figure>
<h3 id="ftfy-fixes-fix-line-breaks"><a href="#ftfy-fixes-fix-line-breaks" class="headerlink" title="ftfy.fixes.fix_line_breaks"></a>ftfy.fixes.fix_line_breaks</h3><p>Convert all line breaks to Unix style.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">eprint</span><span class="params">(text)</span>:</span></div><div class="line"><span class="meta">... </span>    print(text.encode(<span class="string">'unicode-escape'</span>).decode(<span class="string">'ascii'</span>))</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>eprint(fix_line_breaks(<span class="string">"Content-type: text/plain\r\n\r\nHi."</span>))</div><div class="line">Content-type: text/plain\n\nHi.</div></pre></td></tr></table></figure>
<h2 id="formatting模块"><a href="#formatting模块" class="headerlink" title="formatting模块"></a>formatting模块</h2><h3 id="ftfy-formatting-display-center"><a href="#ftfy-formatting-display-center" class="headerlink" title="ftfy.formatting.display_center"></a>ftfy.formatting.display_center</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lines = [<span class="string">'Table flip'</span>, <span class="string">'(╯°□°)╯︵ ┻━┻'</span>, <span class="string">'ちゃぶ台返し'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line"><span class="meta">... </span>    print(display_center(line, <span class="number">20</span>, <span class="string">'▒'</span>))</div><div class="line">▒▒▒▒▒Table flip▒▒▒▒▒</div><div class="line">▒▒▒(╯°□°)╯︵ ┻━┻▒▒▒▒</div><div class="line">▒▒▒▒ちゃぶ台返し▒▒▒▒</div></pre></td></tr></table></figure>
<h3 id="ftfy-formatting-display-ljust"><a href="#ftfy-formatting-display-ljust" class="headerlink" title="ftfy.formatting.display_ljust"></a>ftfy.formatting.display_ljust</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lines = [<span class="string">'Table flip'</span>, <span class="string">'(╯°□°)╯︵ ┻━┻'</span>, <span class="string">'ちゃぶ台返し'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line"><span class="meta">... </span>    print(display_ljust(line, <span class="number">20</span>, <span class="string">'▒'</span>))</div><div class="line">Table flip▒▒▒▒▒▒▒▒▒▒</div><div class="line">(╯°□°)╯︵ ┻━┻▒▒▒▒▒▒▒</div><div class="line">ちゃぶ台返し▒▒▒▒▒▒▒▒</div></pre></td></tr></table></figure>
<h3 id="ftfy-formatting-display-rjust"><a href="#ftfy-formatting-display-rjust" class="headerlink" title="ftfy.formatting.display_rjust"></a>ftfy.formatting.display_rjust</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>lines = [<span class="string">'Table flip'</span>, <span class="string">'(╯°□°)╯︵ ┻━┻'</span>, <span class="string">'ちゃぶ台返し'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> lines:</div><div class="line"><span class="meta">... </span>    print(display_rjust(line, <span class="number">20</span>, <span class="string">'▒'</span>))</div><div class="line">▒▒▒▒▒▒▒▒▒▒Table flip</div><div class="line">▒▒▒▒▒▒▒(╯°□°)╯︵ ┻━┻</div><div class="line">▒▒▒▒▒▒▒▒ちゃぶ台返し</div></pre></td></tr></table></figure>
<h2 id="其他相关文章"><a href="#其他相关文章" class="headerlink" title="其他相关文章"></a>其他相关文章</h2><ul>
<li><a href="https://ftfy.readthedocs.io/en/latest/" target="_blank" rel="external">ftfy官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> ftfy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[arrow时间库使用详解]]></title>
      <url>https://xin053.github.io/2016/07/04/arrow%E6%97%B6%E9%97%B4%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="arrow简介"><a href="#arrow简介" class="headerlink" title="arrow简介"></a>arrow简介</h2><p>arrow是一个提供了更易懂和友好的方法来创建、操作、格式化和转化日期、时间和时间戳的python库。可以完全替代datetime，支持python2和3</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> arrow</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>utc = arrow.utcnow()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>utc</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-11</span>T21:<span class="number">23</span>:<span class="number">58.970460</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>utc = utc.replace(hours=<span class="number">-1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>utc</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-11</span>T20:<span class="number">23</span>:<span class="number">58.970460</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>local = utc.to(<span class="string">'US/Pacific'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>local</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-11</span>T13:<span class="number">23</span>:<span class="number">58.970460</span><span class="number">-07</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="string">'2013-05-11T21:23:58.970460+00:00'</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-11</span>T21:<span class="number">23</span>:<span class="number">58.970460</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>local.timestamp</div><div class="line"><span class="number">1368303838</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>local.format()</div><div class="line"><span class="string">'2013-05-11 13:23:58 -07:00'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>local.format(<span class="string">'YYYY-MM-DD HH:mm:ss ZZ'</span>)</div><div class="line"><span class="string">'2013-05-11 13:23:58 -07:00'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>local.humanize()</div><div class="line"><span class="string">'an hour ago'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>local.humanize(locale=<span class="string">'ko_kr'</span>)</div><div class="line"><span class="string">'1시간 전'</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="arrow对象的创建"><a href="#arrow对象的创建" class="headerlink" title="arrow对象的创建"></a>arrow对象的创建</h2><h3 id="以当前时间获取arrow对象"><a href="#以当前时间获取arrow对象" class="headerlink" title="以当前时间获取arrow对象"></a>以当前时间获取arrow对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.now()</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">34</span>:<span class="number">26.918272</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.utcnow()</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T12:<span class="number">34</span>:<span class="number">34.296419</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.now(<span class="string">'US/Pacific'</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T05:<span class="number">35</span>:<span class="number">19.395502</span><span class="number">-07</span>:<span class="number">00</span>]&gt;</div></pre></td></tr></table></figure>
<p>默认的<code>now()</code>便会以系统时区作为arrow对象的时区，同时是本地时间格式。而<code>utcnow()</code>获取的是世界标准时间格式，所以一般情况下我们使用最多的就是<code>arrow.now()</code></p>
<h3 id="以指定时间戳获取arrow对象"><a href="#以指定时间戳获取arrow对象" class="headerlink" title="以指定时间戳获取arrow对象"></a>以指定时间戳获取arrow对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="number">1367900664</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-07</span>T04:<span class="number">24</span>:<span class="number">24</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="string">'1367900664'</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-07</span>T04:<span class="number">24</span>:<span class="number">24</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="number">1367900664.152325</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-07</span>T04:<span class="number">24</span>:<span class="number">24.152325</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="string">'1367900664.152325'</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-07</span>T04:<span class="number">24</span>:<span class="number">24.152325</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div></pre></td></tr></table></figure>
<h3 id="其他获取arrow对象的方式"><a href="#其他获取arrow对象的方式" class="headerlink" title="其他获取arrow对象的方式"></a>其他获取arrow对象的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="string">'2013-05-05 12:30:45'</span>, <span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T12:<span class="number">30</span>:<span class="number">45</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="string">'2013-09-30T15:34:00.000-07:00'</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-09</span><span class="number">-30</span>T15:<span class="number">34</span>:<span class="number">00</span><span class="number">-07</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="number">2016</span>,<span class="number">7</span>,<span class="number">4</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T00:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="number">2016</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">20</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="number">2016</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">20</span>,<span class="number">14</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">14</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.get(<span class="number">2016</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">20</span>,<span class="number">14</span>,<span class="number">15</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">14</span>:<span class="number">15</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.Arrow(<span class="number">2013</span>, <span class="number">5</span>, <span class="number">5</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T00:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div></pre></td></tr></table></figure>
<h2 id="arrow对象的属性"><a href="#arrow对象的属性" class="headerlink" title="arrow对象的属性"></a>arrow对象的属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = arrow.now()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.timestamp</div><div class="line"><span class="number">1467634629</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.year</div><div class="line"><span class="number">2016</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.month</div><div class="line"><span class="number">7</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.day</div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.hour</div><div class="line"><span class="number">20</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.minute</div><div class="line"><span class="number">17</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.second</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.microsecond</div><div class="line"><span class="number">633154</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.week</div><div class="line"><span class="number">27</span></div></pre></td></tr></table></figure>
<h2 id="时间的计算"><a href="#时间的计算" class="headerlink" title="时间的计算"></a>时间的计算</h2><h3 id="基本计算"><a href="#基本计算" class="headerlink" title="基本计算"></a>基本计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = arrow.now()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.replace(hour=<span class="number">4</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T04:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.replace(hour=<span class="number">4</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T04:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.replace(hours=<span class="number">4</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-05</span>T00:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.replace(hour=<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T04:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.replace(hours=<span class="number">4</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T08:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div></pre></td></tr></table></figure>
<p>需要注意的是<code>replace()</code>方法是产生一个新的arrow对象，所以原来的<code>a</code>没变，另外注意<code>hour</code>与<code>hours</code>的区别，前者是设置时间，取值为0-23，而后者是在原来时间的基础上加减，取值可正可负。</p>
<h3 id="转换为指定时间格式"><a href="#转换为指定时间格式" class="headerlink" title="转换为指定时间格式"></a>转换为指定时间格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.now().format(<span class="string">'YYYY-MM-DD HH:mm:ss ZZ'</span>)</div><div class="line"><span class="string">'2016-07-04 20:32:01 +08:00'</span></div></pre></td></tr></table></figure>
<h3 id="本地时间与标准时间的转换"><a href="#本地时间与标准时间的转换" class="headerlink" title="本地时间与标准时间的转换"></a>本地时间与标准时间的转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = arrow.now()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.to(<span class="string">'local'</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a.to(<span class="string">'utc'</span>)</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T12:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">&lt;Arrow [<span class="number">2016</span><span class="number">-07</span><span class="number">-04</span>T20:<span class="number">17</span>:<span class="number">09.633154</span>+<span class="number">08</span>:<span class="number">00</span>]&gt;</div></pre></td></tr></table></figure>
<p>同样<code>to()</code>也是产生新的arrow对象，对原对象没有影响</p>
<h2 id="Ranges-amp-spans"><a href="#Ranges-amp-spans" class="headerlink" title="Ranges &amp; spans"></a>Ranges &amp; spans</h2><p>Get the time span of any unit:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.utcnow().span(<span class="string">'hour'</span>)</div><div class="line">(&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-07</span>T05:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;, &lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-07</span>T05:<span class="number">59</span>:<span class="number">59.999999</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;)</div></pre></td></tr></table></figure>
<p>Or just get the floor and ceiling:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.utcnow().floor(<span class="string">'hour'</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-07</span>T05:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>arrow.utcnow().ceil(<span class="string">'hour'</span>)</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-07</span>T05:<span class="number">59</span>:<span class="number">59.999999</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div></pre></td></tr></table></figure>
<p>You can also get a range of time spans:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>start = datetime(<span class="number">2013</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">30</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>end = datetime(<span class="number">2013</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">15</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> r <span class="keyword">in</span> arrow.Arrow.span_range(<span class="string">'hour'</span>, start, end):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> r</div><div class="line">...</div><div class="line">(&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T12:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;, &lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T12:<span class="number">59</span>:<span class="number">59.999999</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;)</div><div class="line">(&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T13:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;, &lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T13:<span class="number">59</span>:<span class="number">59.999999</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;)</div><div class="line">(&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T14:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;, &lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T14:<span class="number">59</span>:<span class="number">59.999999</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;)</div><div class="line">(&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T15:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;, &lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T15:<span class="number">59</span>:<span class="number">59.999999</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;)</div><div class="line">(&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T16:<span class="number">00</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;, &lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T16:<span class="number">59</span>:<span class="number">59.999999</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;)</div></pre></td></tr></table></figure>
<p>Or just iterate over a range of time:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>start = datetime(<span class="number">2013</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">30</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>end = datetime(<span class="number">2013</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">17</span>, <span class="number">15</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> r <span class="keyword">in</span> arrow.Arrow.range(<span class="string">'hour'</span>, start, end):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> repr(r)</div><div class="line">...</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T12:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T13:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T14:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T15:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div><div class="line">&lt;Arrow [<span class="number">2013</span><span class="number">-05</span><span class="number">-05</span>T16:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>]&gt;</div></pre></td></tr></table></figure>
<h2 id="Tokens"><a href="#Tokens" class="headerlink" title="Tokens"></a>Tokens</h2><table>
<thead>
<tr>
<th style="text-align:center">&nbsp;</th>
<th style="text-align:center">Token</th>
<th style="text-align:center">Output</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Year</td>
<td style="text-align:center">YYYY</td>
<td style="text-align:center">2000, 2001, 2002 … 2012, 2013</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">YY</td>
<td style="text-align:center">00, 01, 02 … 12, 13</td>
</tr>
<tr>
<td style="text-align:center">Month</td>
<td style="text-align:center">MMMM</td>
<td style="text-align:center">January, February, March …</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">MMM</td>
<td style="text-align:center">Jan, Feb, Mar …</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">MM</td>
<td style="text-align:center">01, 02, 03 … 11, 12</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">M</td>
<td style="text-align:center">1, 2, 3 … 11, 12</td>
</tr>
<tr>
<td style="text-align:center">Day of Year</td>
<td style="text-align:center">DDDD</td>
<td style="text-align:center">001, 002, 003 … 364, 365</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">DDD</td>
<td style="text-align:center">1, 2, 3 … 4, 5</td>
</tr>
<tr>
<td style="text-align:center">Day of Month</td>
<td style="text-align:center">DD</td>
<td style="text-align:center">01, 02, 03 … 30, 31</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">D</td>
<td style="text-align:center">1, 2, 3 … 30, 31</td>
</tr>
<tr>
<td style="text-align:center">Day of Week</td>
<td style="text-align:center">dddd</td>
<td style="text-align:center">Monday, Tuesday, Wednesday …</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">ddd</td>
<td style="text-align:center">Mon, Tue, Wed …</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">d</td>
<td style="text-align:center">1, 2, 3 … 6, 7</td>
</tr>
<tr>
<td style="text-align:center">Hour</td>
<td style="text-align:center">HH</td>
<td style="text-align:center">00, 01, 02 … 23, 24</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">H</td>
<td style="text-align:center">0, 1, 2 … 23, 24</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">hh</td>
<td style="text-align:center">01, 02, 03 … 11, 12</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">h</td>
<td style="text-align:center">1, 2, 3 … 11, 12</td>
</tr>
<tr>
<td style="text-align:center">AM / PM</td>
<td style="text-align:center">A</td>
<td style="text-align:center">AM, PM</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">a</td>
<td style="text-align:center">am, pm</td>
</tr>
<tr>
<td style="text-align:center">Minute</td>
<td style="text-align:center">mm</td>
<td style="text-align:center">00, 01, 02 … 58, 59</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">m</td>
<td style="text-align:center">0, 1, 2 … 58, 59</td>
</tr>
<tr>
<td style="text-align:center">Second</td>
<td style="text-align:center">ss</td>
<td style="text-align:center">00, 01, 02 … 58, 59</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">s</td>
<td style="text-align:center">0, 1, 2 … 58, 59</td>
</tr>
<tr>
<td style="text-align:center">Sub-second</td>
<td style="text-align:center">SSS</td>
<td style="text-align:center">000, 001, 002 … 998, 999</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">SS</td>
<td style="text-align:center">00, 01, 02 … 98, 99</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">S</td>
<td style="text-align:center">0, 1, 2 … 8, 9</td>
</tr>
<tr>
<td style="text-align:center">Timezone</td>
<td style="text-align:center">ZZ</td>
<td style="text-align:center">-07:00, -06:00 … +06:00, +07:00</td>
</tr>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">Z</td>
<td style="text-align:center">-0700, -0600 … +0600, +0700</td>
</tr>
<tr>
<td style="text-align:center">Timestamp</td>
<td style="text-align:center">X</td>
<td style="text-align:center">1381685817</td>
</tr>
</tbody>
</table>
<h2 id="API-Guide"><a href="#API-Guide" class="headerlink" title="API Guide"></a>API Guide</h2><ul>
<li><a href="https://arrow.readthedocs.io/en/latest/#api-guide" target="_blank" rel="external">API Guide</a></li>
</ul>
<h2 id="其他相关文章"><a href="#其他相关文章" class="headerlink" title="其他相关文章"></a>其他相关文章</h2><ul>
<li><a href="https://arrow.readthedocs.io/en/latest/#api-guide" target="_blank" rel="external">arrow官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> arrow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pathlib路径库使用详解]]></title>
      <url>https://xin053.github.io/2016/07/03/pathlib%E8%B7%AF%E5%BE%84%E5%BA%93%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="pathlib简介"><a href="#pathlib简介" class="headerlink" title="pathlib简介"></a>pathlib简介</h2><p>pathlib库在python 3.4以后已经成为标准库，基本上可以代替<code>os.path</code>来处理路径。它采用完全面对对象的编程方式。</p>
<p>总共有6个类用来处理路径，大体可以分为两类：</p>
<ol>
<li>pure paths 单纯的路径计算操作而没有IO功能</li>
<li>concrete paths 路经计算操作和IO功能</li>
</ol>
<p>这6个类的继承关系如下：</p>
<p><img src="http://pathlib.readthedocs.io/en/pep428/_images/pathlib-inheritance.png" alt=""></p>
<p>可以看到<code>PurePath</code>是所有类的基类,<strong>我们重点要掌握<code>PurePath</code>和<code>Path</code>这两个类,在Windows平台下路径对象会有Windows前缀,Unix平台上路径对象会有Posix前缀</strong>。</p>
<a id="more"></a>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="列出所有子目录"><a href="#列出所有子目录" class="headerlink" title="列出所有子目录"></a>列出所有子目录</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import pathlib</div><div class="line">&gt;&gt;&gt; p = pathlib.Path('.')</div><div class="line">&gt;&gt;&gt; [x for x in p.iterdir() if x.is_dir()]</div><div class="line">[WindowsPath('.git'), WindowsPath('.idea'), WindowsPath('.vscode'), </div><div class="line">WindowsPath('1_函数参数'), WindowsPath('2_生成器'), WindowsPath('3_常用函数'), </div><div class="line">WindowsPath('4_装饰器), WindowsPath('5_常用模块')]</div><div class="line"># 在linux环境下，上述的WindowsPath都会变为PosixPath</div></pre></td></tr></table></figure>
<h3 id="列出指定类型的文件"><a href="#列出指定类型的文件" class="headerlink" title="列出指定类型的文件"></a>列出指定类型的文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list(p.glob(<span class="string">'**/*.py'</span>))</div></pre></td></tr></table></figure>
<h3 id="路径拼接"><a href="#路径拼接" class="headerlink" title="路径拼接"></a>路径拼接</h3><p>可以使用<code>/</code>符号来拼接路径</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = pathlib.Path(<span class="string">r'F:\cookies\python'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = p / <span class="string">'learnPython'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(q)</div><div class="line">F:\cookies\python\learnPython</div></pre></td></tr></table></figure>
<h3 id="查询属性"><a href="#查询属性" class="headerlink" title="查询属性"></a>查询属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.exists()</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>q.is_dir()</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>q = q / <span class="string">"hello_world.py"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> q.open() <span class="keyword">as</span> f:</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(f.readline())</div><div class="line"><span class="comment">#!/usr/bin/env python</span></div></pre></td></tr></table></figure>
<h2 id="Pure-paths"><a href="#Pure-paths" class="headerlink" title="Pure paths"></a>Pure paths</h2><h3 id="产生Pure-paths的三种方式"><a href="#产生Pure-paths的三种方式" class="headerlink" title="产生Pure paths的三种方式"></a>产生Pure paths的三种方式</h3><blockquote>
<p>class pathlib.PurePath(*pathsegments)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePath(<span class="string">'setup.py'</span>)</div><div class="line">PurePosixPath(<span class="string">'setup.py'</span>)     <span class="comment"># Running on a Unix machine</span></div><div class="line">PureWindowsPath(<span class="string">'setup.py'</span>)   <span class="comment"># Running on a Windows machine</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePath(<span class="string">'foo'</span>, <span class="string">'some/path'</span>, <span class="string">'bar'</span>)</div><div class="line">PureWindowsPath(<span class="string">'foo/some/path/bar'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePath(Path(<span class="string">'foo'</span>), Path(<span class="string">'bar'</span>))</div><div class="line">PureWindowsPath(<span class="string">'foo/bar'</span>)</div></pre></td></tr></table></figure>
<p>如果参数为空，则默认指定当前文件夹</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePath()</div><div class="line">PureWindowsPath(<span class="string">'.'</span>)</div></pre></td></tr></table></figure>
<p>当同时指定多个绝对路径,则使用最后一个</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'c:/Windows'</span>, <span class="string">'d:bar'</span>)</div><div class="line">PureWindowsPath(<span class="string">'d:bar'</span>)</div></pre></td></tr></table></figure>
<p>在Windows平台上，参数路径上如果有<code>\</code>或者<code>/</code>,则使用之前设置的盘符</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'F:\cookies\python\learnPython'</span>,<span class="string">'\game'</span>)</div><div class="line">PureWindowsPath(<span class="string">'F:/game'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>class pathlib.PurePosixPath(*pathsegments)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'/etc'</span>)</div><div class="line">PurePosixPath(<span class="string">'/etc'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>class pathlib.PureWindowsPath(*pathsegments)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'c:/Program Files/'</span>)</div><div class="line">PureWindowsPath(<span class="string">'c:/Program Files'</span>)</div></pre></td></tr></table></figure>
<h3 id="Path计算"><a href="#Path计算" class="headerlink" title="Path计算"></a>Path计算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'foo'</span>) == PurePosixPath(<span class="string">'FOO'</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'foo'</span>) == PureWindowsPath(<span class="string">'FOO'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'FOO'</span>) <span class="keyword">in</span> &#123; PureWindowsPath(<span class="string">'foo'</span>) &#125;</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'C:'</span>) &lt; PureWindowsPath(<span class="string">'d:'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'foo'</span>) == PurePosixPath(<span class="string">'foo'</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'foo'</span>) &lt; PurePosixPath(<span class="string">'foo'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">TypeError: unorderable types: PureWindowsPath() &lt; PurePosixPath()</div></pre></td></tr></table></figure>
<h3 id="str-和-bytes"><a href="#str-和-bytes" class="headerlink" title="str() 和 bytes()"></a>str() 和 bytes()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PurePath(<span class="string">'/etc'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(p)</div><div class="line"><span class="string">'/etc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PureWindowsPath(<span class="string">'c:/Program Files'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(p)</div><div class="line"><span class="string">'c:\\Program Files'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(p)</div><div class="line"><span class="string">b'/etc'</span></div></pre></td></tr></table></figure>
<h3 id="常用属性和方法"><a href="#常用属性和方法" class="headerlink" title="常用属性和方法"></a>常用属性和方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'c:/Program Files/'</span>).drive</div><div class="line"><span class="string">'c:'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'/etc'</span>).root</div><div class="line"><span class="string">'/'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PureWindowsPath(<span class="string">'c:/foo/bar/setup.py'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.parents[<span class="number">0</span>]</div><div class="line">PureWindowsPath(<span class="string">'c:/foo/bar'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.parents[<span class="number">1</span>]</div><div class="line">PureWindowsPath(<span class="string">'c:/foo'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.parents[<span class="number">2</span>]</div><div class="line">PureWindowsPath(<span class="string">'c:/'</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'//some/share/setup.py'</span>).name</div><div class="line"><span class="string">'setup.py'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PureWindowsPath(<span class="string">'//some/share'</span>).name</div><div class="line"><span class="string">''</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'my/library/setup.py'</span>).suffix</div><div class="line"><span class="string">'.py'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'my/library.tar.gz'</span>).suffix</div><div class="line"><span class="string">'.gz'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'my/library'</span>).suffix</div><div class="line"><span class="string">''</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'my/library.tar.gar'</span>).suffixes</div><div class="line">[<span class="string">'.tar'</span>, <span class="string">'.gar'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'my/library.tar.gz'</span>).suffixes</div><div class="line">[<span class="string">'.tar'</span>, <span class="string">'.gz'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'my/library'</span>).suffixes</div><div class="line">[]</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'my/library.tar.gz'</span>).stem</div><div class="line"><span class="string">'library.tar'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'my/library.tar'</span>).stem</div><div class="line"><span class="string">'library'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePosixPath(<span class="string">'my/library'</span>).stem</div><div class="line"><span class="string">'library'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PureWindowsPath(<span class="string">'c:\\windows'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>str(p)</div><div class="line"><span class="string">'c:\\windows'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.as_posix()</div><div class="line"><span class="string">'c:/windows'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PurePosixPath(<span class="string">'/etc/passwd'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.as_uri()</div><div class="line"><span class="string">'file:///etc/passwd'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PureWindowsPath(<span class="string">'c:/Windows'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.as_uri()</div><div class="line"><span class="string">'file:///c:/Windows'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePath(<span class="string">'a/b.py'</span>).match(<span class="string">'*.py'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePath(<span class="string">'/a/b/c.py'</span>).match(<span class="string">'b/*.py'</span>)</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>PurePath(<span class="string">'/a/b/c.py'</span>).match(<span class="string">'a/*.py'</span>)</div><div class="line"><span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PurePosixPath(<span class="string">'/etc/passwd'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.relative_to(<span class="string">'/'</span>)</div><div class="line">PurePosixPath(<span class="string">'etc/passwd'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.relative_to(<span class="string">'/etc'</span>)</div><div class="line">PurePosixPath(<span class="string">'passwd'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.relative_to(<span class="string">'/usr'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"pathlib.py"</span>, line <span class="number">694</span>, <span class="keyword">in</span> relative_to</div><div class="line">    .format(str(self), str(formatted)))</div><div class="line">ValueError: <span class="string">'/etc/passwd'</span> does <span class="keyword">not</span> start <span class="keyword">with</span> <span class="string">'/usr'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PureWindowsPath(<span class="string">'c:/Downloads/pathlib.tar.gz'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.with_name(<span class="string">'setup.py'</span>)</div><div class="line">PureWindowsPath(<span class="string">'c:/Downloads/setup.py'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PureWindowsPath(<span class="string">'c:/'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.with_name(<span class="string">'setup.py'</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">  File <span class="string">"/home/antoine/cpython/default/Lib/pathlib.py"</span>, line <span class="number">751</span>, <span class="keyword">in</span> with_name</div><div class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"%r has an empty name"</span> % (self,))</div><div class="line">ValueError: PureWindowsPath(<span class="string">'c:/'</span>) has an empty name</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PureWindowsPath(<span class="string">'c:/Downloads/pathlib.tar.gz'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.with_suffix(<span class="string">'.bz2'</span>)</div><div class="line">PureWindowsPath(<span class="string">'c:/Downloads/pathlib.tar.bz2'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = PureWindowsPath(<span class="string">'README'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.with_suffix(<span class="string">'.txt'</span>)</div><div class="line">PureWindowsPath(<span class="string">'README.txt'</span>)</div></pre></td></tr></table></figure>
<h2 id="Concrete-paths"><a href="#Concrete-paths" class="headerlink" title="Concrete paths"></a>Concrete paths</h2><h3 id="产生Concrete-paths的三种方式"><a href="#产生Concrete-paths的三种方式" class="headerlink" title="产生Concrete paths的三种方式"></a>产生Concrete paths的三种方式</h3><blockquote>
<p>class pathlib.Path(*pathsegments)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Path(<span class="string">'setup.py'</span>)</div><div class="line">PosixPath(<span class="string">'setup.py'</span>)       <span class="comment"># Running on a Unix machine</span></div><div class="line">WindowsPath(<span class="string">'setup.py'</span>)     <span class="comment"># Running on a Windows machine</span></div></pre></td></tr></table></figure>
<blockquote>
<p>class pathlib.PosixPath(*pathsegments)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>PosixPath(<span class="string">'/etc'</span>)</div><div class="line">PosixPath(<span class="string">'/etc'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>class pathlib.WindowsPath(*pathsegments)</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>WindowsPath(<span class="string">'c:/Program Files/'</span>)</div><div class="line">WindowsPath(<span class="string">'c:/Program Files'</span>)</div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><code>cwd()</code>设置path对象为当前路径</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Path.cwd()</div><div class="line">WindowsPath(<span class="string">'D:/Python 3.5'</span>)</div></pre></td></tr></table></figure>
<p><code>stat()</code>获取文件或目录属性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Path(<span class="string">'setup.py'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.stat().st_size</div><div class="line"><span class="number">956</span></div></pre></td></tr></table></figure>
<p><code>chmod()</code>Unix系统修改文件或目录权限</p>
<p><code>exists()</code>判断文件或目录是否存在</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pathlib <span class="keyword">import</span> *</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Path(<span class="string">'.'</span>).exists()</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Path(<span class="string">'setup.py'</span>).exists()</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Path(<span class="string">'/etc'</span>).exists()</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Path(<span class="string">'nonexistentfile'</span>).exists()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<p><code>glob()</code>列举文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(Path(<span class="string">'.'</span>).glob(<span class="string">'*.py'</span>))</div><div class="line">[PosixPath(<span class="string">'pathlib.py'</span>), PosixPath(<span class="string">'setup.py'</span>), PosixPath(<span class="string">'test_pathlib.py'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(Path(<span class="string">'.'</span>).glob(<span class="string">'*/*.py'</span>))</div><div class="line">[PosixPath(<span class="string">'docs/conf.py'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(Path(<span class="string">'.'</span>).glob(<span class="string">'**/*.py'</span>))</div><div class="line">[PosixPath(<span class="string">'build/lib/pathlib.py'</span>),</div><div class="line"> PosixPath(<span class="string">'docs/conf.py'</span>),</div><div class="line"> PosixPath(<span class="string">'pathlib.py'</span>),</div><div class="line"> PosixPath(<span class="string">'setup.py'</span>),</div><div class="line"> PosixPath(<span class="string">'test_pathlib.py'</span>)]</div><div class="line"><span class="comment"># The "**" pattern means "this directory and all subdirectories, recursively"</span></div></pre></td></tr></table></figure>
<p><code>is_dir()</code>判断是否是目录</p>
<p><code>is_file()</code>判断是否是文件</p>
<p><code>is_symlink()</code>判断是否是链接文件</p>
<p><code>iterdir()</code>如果path指向一个目录，则返回该目录下所有内容的生成器</p>
<p><code>mkdir(mode=0o777, parents=False)</code>创建目录</p>
<p><code>open(mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None)</code>打开文件</p>
<p><code>owner()</code>获取文件所有者</p>
<p><code>rename(target)</code>修改名称</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Path(<span class="string">'foo'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.open(<span class="string">'w'</span>).write(<span class="string">'some text'</span>)</div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>target = Path(<span class="string">'bar'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.rename(target)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>target.open().read()</div><div class="line"><span class="string">'some text'</span></div></pre></td></tr></table></figure>
<p><code>resolve()</code>Make the path absolute, resolving any symlinks. A new path object is returned</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Path()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p</div><div class="line">PosixPath(<span class="string">'.'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.resolve()</div><div class="line">PosixPath(<span class="string">'/home/antoine/pathlib'</span>)</div></pre></td></tr></table></figure>
<p><code>rmdir()</code>删除目录，目录必须为空</p>
<p><code>touch(mode=0o777, exist_ok=True)</code>创建空文件</p>
<h2 id="其他相关文章"><a href="#其他相关文章" class="headerlink" title="其他相关文章"></a>其他相关文章</h2><ul>
<li><a href="http://pathlib.readthedocs.io/en/pep428/#concrete-paths" target="_blank" rel="external">pathlib官方文档</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> pathlib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pip包管理器使用详解]]></title>
      <url>https://xin053.github.io/2016/07/02/pip%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="pip简介"><a href="#pip简介" class="headerlink" title="pip简介"></a>pip简介</h2><p>pip为包管理器，跟linux上众多的包管理器的功能大致相同，就是对包进行管理，使得包的安装，更新和卸载更容易。</p>
<p>pip包管理器下载的python库来自：<a href="https://pypi.python.org/pypi/" target="_blank" rel="external">PyPI</a></p>
<p>pip在python2.7.9以上和3.4以上自带，通过venv,virtualenv和pyvenv创建的虚拟环境默认也会安装，不过最好通过以下命令更新到最新版<br>Windows:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m pip install -U pip</div></pre></td></tr></table></figure>
<p>Linux或Mac</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -U pip</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="pip使用"><a href="#pip使用" class="headerlink" title="pip使用"></a>pip使用</h2><h3 id="包的安装"><a href="#包的安装" class="headerlink" title="包的安装"></a>包的安装</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install PackageName                <span class="comment"># latest version</span></div><div class="line">pip install PackageName==<span class="number">1.0</span>.<span class="number">4</span>         <span class="comment"># specific version</span></div></pre></td></tr></table></figure>
<p>例如，如果我们安装requests包，那么输入命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install requests</div></pre></td></tr></table></figure>
<h3 id="显示包文件"><a href="#显示包文件" class="headerlink" title="显示包文件"></a>显示包文件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip show --files PackageName</div></pre></td></tr></table></figure>
<p>该命令能够显示包的简介，包安装的位置，以及整个包包含的文件</p>
<h3 id="显示过期的包"><a href="#显示过期的包" class="headerlink" title="显示过期的包"></a>显示过期的包</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip list --outdated</div></pre></td></tr></table></figure>
<p>该命令列出所有可以更新的包，而</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip list</div></pre></td></tr></table></figure>
<p>可以列出当前python环境下安装的所有包</p>
<h3 id="包的更新"><a href="#包的更新" class="headerlink" title="包的更新"></a>包的更新</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -U PackageName</div></pre></td></tr></table></figure>
<p>该命令将指定包更新到仓库最新版</p>
<h3 id="包的卸载"><a href="#包的卸载" class="headerlink" title="包的卸载"></a>包的卸载</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip uninstall PackageName</div></pre></td></tr></table></figure>
<h2 id="pip-help"><a href="#pip-help" class="headerlink" title="pip help"></a>pip help</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">Usage:</div><div class="line">  pip &lt;command&gt; [options]</div><div class="line"></div><div class="line">Commands:</div><div class="line">  install                     Install packages.</div><div class="line">  download                    Download packages.</div><div class="line">  uninstall                   Uninstall packages.</div><div class="line">  freeze                      Output installed packages <span class="keyword">in</span> requirements format.</div><div class="line">  list                        List installed packages.</div><div class="line">  show                        Show information about installed packages.</div><div class="line">  search                      Search PyPI <span class="keyword">for</span> packages.</div><div class="line">  wheel                       Build wheels from your requirements.</div><div class="line">  hash                        Compute hashes of package archives.</div><div class="line">  completion                  A helper command used <span class="keyword">for</span> command completion</div><div class="line">  help                        Show help <span class="keyword">for</span> commands.</div><div class="line"></div><div class="line">General Options:</div><div class="line">  -h, --help                  Show help.</div><div class="line">  --isolated                  Run pip <span class="keyword">in</span> an isolated mode, ignoring</div><div class="line">                              environment variables and user configuration.</div><div class="line">  -v, --verbose               Give more output. Option is additive, and can be</div><div class="line">                              used up to <span class="number">3</span> times.</div><div class="line">  -V, --version               Show version and exit.</div><div class="line">  -q, --quiet                 Give less output.</div><div class="line">  --log &lt;path&gt;                Path to a verbose appending log.</div><div class="line">  --proxy &lt;proxy&gt;             Specify a proxy <span class="keyword">in</span> the form</div><div class="line">                              [user:passwd@]proxy.server:port.</div><div class="line">  --retries &lt;retries&gt;         Maximum number of retries each connection should</div><div class="line">                              attempt (default <span class="number">5</span> times).</div><div class="line">  --timeout &lt;sec&gt;             Set the socket timeout (default <span class="number">15</span> seconds).</div><div class="line">  --exists-action &lt;action&gt;    Default action when a path already exists:</div><div class="line">                              (s)witch, (i)gnore, (w)ipe, (b)ackup.</div><div class="line">  --trusted-host &lt;hostname&gt;   Mark this host as trusted, even though it does</div><div class="line">                              not have valid or any HTTPS.</div><div class="line">  --cert &lt;path&gt;               Path to alternate CA bundle.</div><div class="line">  --client-cert &lt;path&gt;        Path to SSL client certificate, a single file</div><div class="line">                              containing the private key and the certificate</div><div class="line">                              <span class="keyword">in</span> PEM format.</div><div class="line">  --cache-dir &lt;dir&gt;           Store the cache <span class="keyword">data</span> <span class="keyword">in</span> &lt;dir&gt;.</div><div class="line">  --no-cache-dir              Disable the cache.</div><div class="line">  --disable-pip-version-check</div><div class="line">                              Don<span class="string">'t periodically check PyPI to determine</span></div><div class="line">                              whether a new version of pip is available for</div><div class="line">                              download. Implied with --no-index.</div></pre></td></tr></table></figure>
<h2 id="其他相关文章"><a href="#其他相关文章" class="headerlink" title="其他相关文章"></a>其他相关文章</h2><ul>
<li><a href="http://zengrong.net/post/2169.htm" target="_blank" rel="external">Python 包管理工具解惑</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> pip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[venv创建Python虚拟环境]]></title>
      <url>https://xin053.github.io/2016/06/30/venv%E5%88%9B%E5%BB%BAPython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="Python虚拟环境简介"><a href="#Python虚拟环境简介" class="headerlink" title="Python虚拟环境简介"></a>Python虚拟环境简介</h2><p>众说周知，Python有很多版本，其中具有画时代意义的版本就是2.7和3，由于Python各版本之间不兼容，所以不像一般软件那样，直接安装便可以覆盖老版本，Python的不同大版本可以同时存在，例如电脑上可以同时存在Python 2.7，Python 3.4和Python 3.5，而Python的小版本(版本下的小更新)会覆盖之前的安装，比如目前电脑上是Python 3.5，那么安装Python 3.5.1便会覆盖3.5，之后再安装Python 3.5.2，便会覆盖Python 3.5.1，哦，对了，我指的是windows环境下python安装包，非便携版。</p>
<p>Python极强的能力主要由其庞大的库来支撑，Python 2.7下有很多很多库，目前也有很多库已经兼容了Python 3，但是还是有大量的库只兼容Python 2.7.有人说Python 3会毁灭Python，但我并不认为是这样，Python 3带来了很多特性已经性能等方面的提升，Python 3必定是一种趋势，要想华丽的蜕变，就必须选择舍弃，所以Python官网发布了Python 3.</p>
<a id="more"></a>
<p>现在说下为什么需要Python虚拟运行环境，首先Python安装的大部分第三方包都是装在Python安装目录下的Lib下的site-packages目录下的，而如果你想同时在2.7和3下进行开发，就需要同时在各自的site-packages目录下各安装包，而如果以后出来了Python 3.6，又需要在其site-packages下安装常用的第三方包，简直复杂，梦魇，然后有些项目需要2.7，而有的项目需要3，如果运行这两个项目，就需要切换PATH，而如果某个大项目同时用到2.7和3，就没办法了，而通过创建Python虚拟环境之后，相当于有一个目录，这个目录中有site-packages目录，其他目录和一些脚本，如激活虚拟环境的脚本，同时该目录(虚拟环境)下有特定版本的Python解释器，所以可以创建一个虚拟环境，然后把所有的包都装在这个下面，以后Python更新就不用再去下第三方包了，只用update虚拟环境中的Python解释器就行了。而对于使用不同Python版本的项目，可以创建一个2.7的虚拟环境和一个3的虚拟环境，然后项目分别和这两个虚拟环境进行绑定，运行就没有问题了，总的来说，虚拟环境是一个与系统Python环境相隔离的Python环境。</p>
<h2 id="venv模块简介"><a href="#venv模块简介" class="headerlink" title="venv模块简介"></a>venv模块简介</h2><p>Python3.3以上的版本通过venv模块原生支持虚拟环境，可以代替Python之前的virtualenv。</p>
<p>该venv模块提供了创建轻量级“虚拟环境”，提供与系统Python的隔离支持。每一个虚拟环境都有其自己的Python二进制（允许有不同的Python版本创作环境），并且可以拥有自己独立的一套Python包。</p>
<p>需要注意的是，在Python3.3中使用”venv”命令创建的环境不包含”pip”，你需要进行手动安装。在Python3.4中改进了这一个缺陷。</p>
<p>官方文档：<a href="https://docs.python.org/3/library/venv.html" target="_blank" rel="external">venv — Creation of virtual environments</a></p>
<h2 id="venv创建虚拟环境"><a href="#venv创建虚拟环境" class="headerlink" title="venv创建虚拟环境"></a>venv创建虚拟环境</h2><p>首先选择一个目录，这个目录就是虚拟环境，也就是虚拟环境中的Python解释器，第三方包都会在这个目录。在我的电脑上我选择的是：</p>
<pre><code>F:\pythonVE
</code></pre><p>打开cmd后cd切换到该目录，然后执行：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">F:\pythonVE&gt;python -m venv .</div></pre></td></tr></table></figure>
<p>表示在当前目录下创建虚拟环境，对了我PATH里Python为3.5.2</p>
<p>执行完毕后，看下该目录下的内容：</p>
<p><img src="http://i.imgur.com/nEoobC9.png" alt=""></p>
<p>看下<code>pyvenv.cfg</code>文件内容：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">home = D:\Python <span class="number">3.5</span></div><div class="line">include-system-site-packages = false</div><div class="line">version = <span class="number">3.5</span>.<span class="number">2</span></div></pre></td></tr></table></figure>
<p>很明了，就不解释了。</p>
<p>Lib下的 site-packages 用来存放第三方包，Scripts存在一些可用的脚本。</p>
<p>下面是”venv”的详细使用参数:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]</div><div class="line">            [--upgrade] [--without-pip]</div><div class="line">            ENV_DIR [ENV_DIR ...]</div><div class="line"></div><div class="line">Creates virtual Python environments <span class="keyword">in</span> one or more target directories.</div><div class="line"></div><div class="line">positional arguments:</div><div class="line">  ENV_DIR             A directory to create the environment in.</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help             show this help message and <span class="keyword">exit</span></div><div class="line">  --system-site-packages Give the virtual environment access to the system</div><div class="line">                         site-packages dir.</div><div class="line">  --symlinks             <span class="keyword">Try</span> to use symlinks rather than copies, when symlinks</div><div class="line">                         are not the default <span class="keyword">for</span> the platform.</div><div class="line">  --copies               <span class="keyword">Try</span> to use copies rather than symlinks, even when</div><div class="line">                         symlinks are the default <span class="keyword">for</span> the platform.</div><div class="line">  --clear                Delete the contents of the environment directory <span class="keyword">if</span> it</div><div class="line">                         already exists, before environment creation.</div><div class="line">  --upgrade              Upgrade the environment directory to use this version</div><div class="line">                         of Python, assuming Python has been upgraded in-place.</div><div class="line">  --without-pip          Skips installing or upgrading pip <span class="keyword">in</span> the virtual</div><div class="line">                         environment (pip is bootstrapped by default)</div></pre></td></tr></table></figure>
<p>创建虚拟环境后，如果想使用该虚拟环境，需要先激活该虚拟环境。</p>
<p>到虚拟目录下的Scripts目录执行activate.bat</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">F:\pythonVE\Scripts&gt;activate.bat</div></pre></td></tr></table></figure>
<p>会发现cmd变成这个样子了:</p>
<p><img src="http://i.imgur.com/f9oziA1.png" alt=""></p>
<p>可以发现目前已经在这个虚拟环境下了</p>
<p>现在来测试下，首先我的pip版本不是最新，更到最新再说：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -m pip install --upgrade pip</div></pre></td></tr></table></figure>
<p>然后可以看到<code>F:\pythonVE\Lib\site-packages</code>目录下的pip确实更新到最新版了。</p>
<p>然后先安装著名的<code>requests</code>模块看看:</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install requests</div></pre></td></tr></table></figure>
<p>同样在<code>F:\pythonVE\Lib\site-packages</code>目录下确实看到了requests目录。</p>
<p>值得一提的是pycharm新建项目的时候可以选择python环境，其中就可以选择虚拟环境，其他工具应该也可以。</p>
<p>继续测试：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(pythonVE) F:\pythonVE\Scripts&gt;python</div><div class="line">Python <span class="number">3.5</span>.<span class="number">2</span> (v3.<span class="number">5.2</span>:<span class="number">4</span>def2a2901a5, Jun <span class="number">25</span> <span class="number">2016</span>, <span class="number">22</span>:<span class="number">18</span>:<span class="number">55</span>) [MSC v.<span class="number">1900</span> <span class="number">64</span> bit (AMD64)] on win32</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; import requests</div><div class="line">&gt;&gt;&gt; print(requests)</div><div class="line">&lt;module <span class="string">'requests'</span> from <span class="string">'F:\\pythonVE\\lib\\site-packages\\requests\\__init__.py'</span>&gt;</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>发现使用的<code>requests</code>模块确实来自虚拟环境</p>
<p>不过项目开发时，要确保自己用的什么环境哦</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://blog.csdn.net/geekun/article/details/51325383" target="_blank" rel="external">http://blog.csdn.net/geekun/article/details/51325383</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Python模块学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> venv </tag>
            
            <tag> virtual environments </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git使用详解]]></title>
      <url>https://xin053.github.io/2016/06/18/Git%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h2><p>git为分布式版本控制系统，客户端并不只提取最新版本的文件快照，而是把原始的代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜 像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121202_798.png" alt=""></p>
<p>Git 不保存这些前后变化的差异数据。实际上，Git 更像是把变化的文件作快照后，记录在一个微型的文件系统中。每次提交更新时，它会纵览一遍所有文件的指纹信息并对文件作一快照，然后保存一个指向这次快照 的索引。为提高性能，若文件没有变化，Git 不会再次保存，而只对上次保存的快照作一链接。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121204_39.png" alt=""></p>
<a id="more"></a>
<h2 id="文件的三种状态"><a href="#文件的三种状态" class="headerlink" title="文件的三种状态"></a>文件的三种状态</h2><p>对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。</p>
<p>Git 管理项目时，文件流转的三个工作区域：Git 的工作目录，暂存区域，以及本地仓库。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121205_151.png" alt=""></p>
<h2 id="文件的两种状态"><a href="#文件的两种状态" class="headerlink" title="文件的两种状态"></a>文件的两种状态</h2><p>工作目录下面的所有文件都不外乎这两种状态：<strong>已跟踪</strong>或<strong>未跟踪</strong>。已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它们的记录，工作一段时间后，它们的状态可能是修改后add但没有commit，修改后没有add,或者没变。而所有其他文件都属于未跟踪文件(即在上次的版本基础上新增的文件，因为需要决定新增的文件是否需要加到gitignore中，所以文件状态为未跟踪，如果add这些文件，那么这些文件的状态就变成已跟踪)。它们既没有上次更新时的快照，也不在当前的暂存区域。初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态为未修改。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121432_845.png" alt=""></p>
<h2 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h2><p>我新建learnGit文件夹，文件夹下就一个空白test1.txt文件，然后git bash切到这个目录，执行<code>git init</code>，初始化仓库，然后执行<code>git add .</code>后执行<code>git status</code>，可以看到以下输出：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line"></div><div class="line">Initial commit</div><div class="line"></div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">        new file:   test1.txt</div></pre></td></tr></table></figure>
<p>表示test1.txt是已跟踪文件，并add到了暂存区，等待commit</p>
<p>我们执行<code>git commit -m &#39;first commit&#39;</code>提交暂存区文件。(<code>git commit -am &#39;message&#39;</code>的<code>-am</code>参数是先add所有已修改的文件，然后附加message提交)</p>
<p>再执行<code>git status</code>可以看到：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure>
<p>然后我们修改test1.txt的内容，在里面添加一些东西，然后再执行<code>git status</code>可以看到：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</div><div class="line"></div><div class="line">        modified:   test1.txt</div><div class="line"></div><div class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</div></pre></td></tr></table></figure>
<p>这表示已跟踪的文件被修改了但是没有add，然后我们按照提示执行<code>git add test1.txt</code>,再执行<code>git status</code>，可以看到以下输出：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">        modified:   test1.txt</div></pre></td></tr></table></figure>
<p>也就是已跟踪的文件add到了暂存区，但是还没commit。我们执行<code>git commit -m &#39;second commit&#39;</code>再次提交后，在仓库下新建test2.txt空文件，然后执行<code>git status</code>，可以看到以下输出：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line">On branch master</div><div class="line">Untracked files:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</div><div class="line"></div><div class="line">        test2.txt</div><div class="line"></div><div class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</div></pre></td></tr></table></figure>
<p>显示test2.txt文件为未跟踪文件，可以使用<code>git add 文件名</code>将该文件变为已跟踪文件，也可以将该文件添加到.gitignore文件中，表示不跟踪此文件，并不再在’Untracked files:’中提醒该未跟踪的文件。</p>
<h2 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h2><p>以一个例子来说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 此为注释 – 将被 Git 忽略</div><div class="line">*.a       # 忽略所有 .a 结尾的文件</div><div class="line">!lib.a    # 但 lib.a 除外</div><div class="line">/TODO     # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</div><div class="line">build/    # 忽略 build/ 目录下的所有文件</div><div class="line">doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</div></pre></td></tr></table></figure>
<h2 id="差异查看"><a href="#差异查看" class="headerlink" title="差异查看"></a>差异查看</h2><p><code>git diff</code>比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git diff</div><div class="line">diff --git a/test2.txt b/test2.txt</div><div class="line">index 3b18e51..b4a78f9 100644</div><div class="line"><span class="comment">--- a/test2.txt</span></div><div class="line"><span class="comment">+++ b/test2.txt</span></div><div class="line">@@ -1 +1 @@</div><div class="line"><span class="deletion">-hello world</span></div><div class="line"><span class="addition">+world hello</span></div></pre></td></tr></table></figure>
<p>若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 <code>git diff --cached</code> 命令。（Git 1.6.1 及更高版本还允许使用<code>git diff --staged</code>，效果是相同的，但更好记些。）</p>
<h2 id="撤消操作"><a href="#撤消操作" class="headerlink" title="撤消操作"></a>撤消操作</h2><h3 id="修改最后一次提交"><a href="#修改最后一次提交" class="headerlink" title="修改最后一次提交"></a>修改最后一次提交</h3><p>有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 <code>--amend</code> 选项重新提交：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit --amend</div></pre></td></tr></table></figure>
<p>此命令将使用当前的暂存区域快照提交。如果刚才提交完没有作任何改动，直接运行此命令的话，相当于有机会重新编辑提交说明，但将要提交的文件快照和之前的一样。</p>
<p>如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 –amend 提交：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">'initial commit'</span></div><div class="line">$ git add forgotten_file</div><div class="line">$ git commit --amend</div></pre></td></tr></table></figure>
<p>上面的三条命令最终只是产生一个提交，第二个提交命令修正了第一个的提交内容。</p>
<h3 id="取消已经暂存的文件"><a href="#取消已经暂存的文件" class="headerlink" title="取消已经暂存的文件"></a>取消已经暂存的文件</h3><p>用<code>git reset HEAD ...</code> 的方式取消暂存，例如：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD test.txt</div></pre></td></tr></table></figure>
<p>这样test.txt又回到了之前已经修改但是还未暂存的状态。</p>
<h3 id="取消对文件的修改"><a href="#取消对文件的修改" class="headerlink" title="取消对文件的修改"></a>取消对文件的修改</h3><p>用<code>git checkout -- test.txt</code>将使text.txt文件回到之前未修改的状态。</p>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>要查看当前配置有哪些远程仓库，可以用<code>git remote</code>命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库：</p>
<p>也可以加上<code>-v</code>选项（译注：此为<code>--verbose</code>的简写，取首字母），显示对应的克隆地址：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin	git://github.com/xin053/xin053.github.io.git</div></pre></td></tr></table></figure>
<h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行<code>git remote add [shortname] [url]</code>：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote add test git://github.com/xin053/xin053.github.io.git</div><div class="line">$ git remote -v</div><div class="line">test	git://github.com/xin053/xin053.github.io.git</div></pre></td></tr></table></figure>
<h3 id="从远程仓库抓取数据"><a href="#从远程仓库抓取数据" class="headerlink" title="从远程仓库抓取数据"></a>从远程仓库抓取数据</h3><p>正如之前所看到的，可以用下面的命令从远程仓库抓取数据到本地：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch [remote-name]</div></pre></td></tr></table></figure>
<p>此命令会到远程仓库中拉取所有你本地仓库中还没有的数据。运行完成后，你就可以在本地访问该远程仓库中的所有分支，将其中某个分支合并到本地，或者只是取出某个分支，一探究竟。</p>
<p>如果是克隆了一个仓库，此命令会自动将远程仓库归于 origin 名下。所以，<code>git fetch origin</code> 会抓取从你上次克隆以来别人上传到此远程仓库中的所有更新（或是上次 fetch 以来别人提交的更新）。有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。</p>
<p>如果设置了某个分支用于<strong>跟踪</strong>某个远端仓库的分支（参见下节及第三章的内容），可以使用<code>git pull</code>命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。在日常工作中我们经常这么用，既快且好。实际上，默认情况下<code>git clone</code>命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行<code>git pull</code>，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。</p>
<h3 id="推送数据到远程仓库"><a href="#推送数据到远程仓库" class="headerlink" title="推送数据到远程仓库"></a>推送数据到远程仓库</h3><p>项目进行到一个阶段，要同别人分享目前的成果，可以将本地仓库中的数据推送到远程仓库。实现这个任务的命令很简单：<code>git push [remote-name] [branch-name]</code>。如果要把本地的 master 分支推送到origin 服务器上（再次说明下，克隆操作会自动使用默认的 master 和 origin 名字），可以运行下面的命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>只有在所克隆的服务器上有写权限，或者同一时刻没有其他人在推数据，这条命令才会如期完成任务。<strong>如果在你推数据前，已经有其他人推送了若干更新，那 你的推送操作就会被驳回</strong>。你必须先把他们的更新抓取到本地，合并到自己的项目中，然后才可以再次推送。</p>
<h3 id="远程仓库的删除和重命名"><a href="#远程仓库的删除和重命名" class="headerlink" title="远程仓库的删除和重命名"></a>远程仓库的删除和重命名</h3><p>在新版 Git 中可以用<code>git remote rename</code>命令修改某个远程仓库在本地的简短名称，比如想把 pb 改成paul，可以这么运行：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git remote rename pb paul</div><div class="line">$ git remote</div><div class="line">origin</div><div class="line">paul</div></pre></td></tr></table></figure>
<p>移除对应的远端仓库，可以运行 <code>git remote rm</code> 命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote rm paul</div><div class="line">$ git remote</div><div class="line">origin</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>同大多数 VCS 一样，Git 也可以对某一时间点上的版本打上标签。人们在发布某个软件版本（比如 v1.0 等等）的时候，经常这么做。</p>
<h3 id="列显已有的标签"><a href="#列显已有的标签" class="headerlink" title="列显已有的标签"></a>列显已有的标签</h3><p>列出现有标签的命令非常简单，直接运行<code>git tag</code>即可：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git tag</div><div class="line">v0.<span class="number">1</span></div><div class="line">v1.<span class="number">3</span></div></pre></td></tr></table></figure>
<p>显示的标签按字母顺序排列，所以标签的先后并不表示重要程度的轻重。</p>
<p>我们可以用特定的搜索模式列出符合条件的标签。在 Git 自身项目仓库中，有着超过 240 个标签，如果你只对 1.4.2 系列的版本感兴趣，可以运行下面的命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git tag -l <span class="string">'v1.4.2.*'</span></div><div class="line">v1.<span class="number">4.2</span>.<span class="number">1</span></div><div class="line">v1.<span class="number">4.2</span>.<span class="number">2</span></div><div class="line">v1.<span class="number">4.2</span>.<span class="number">3</span></div><div class="line">v1.<span class="number">4.2</span>.<span class="number">4</span></div></pre></td></tr></table></figure>
<h3 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h3><p>Git 使用的标签有两种类型：轻量级的（lightweight）和含附注的（annotated）。轻量级标签就像是个不会变化的分支，实际上它就是个指向特 定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标 签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>
<h4 id="含附注的标签"><a href="#含附注的标签" class="headerlink" title="含附注的标签"></a>含附注的标签</h4><p>创建一个含附注类型的标签非常简单，用<code>-a</code>（译注：取 annotated 的首字母）指定标签名字即可：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git tag -a v1.<span class="number">4</span> -m <span class="string">'my version 1.4'</span></div><div class="line">$ git tag</div><div class="line">v0.<span class="number">1</span></div><div class="line">v1.<span class="number">3</span></div><div class="line">v1.<span class="number">4</span></div></pre></td></tr></table></figure>
<h4 id="轻量级标签"><a href="#轻量级标签" class="headerlink" title="轻量级标签"></a>轻量级标签</h4><p>轻量级标签实际上就是一个保存着对应提交对象的校验和信息的文件。要创建这样的标签，一个<code>-a</code>，<code>-s</code> 或 <code>-m</code> 选项都不用，直接给出标签名字即可：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git tag v1.<span class="number">4</span>-lw</div><div class="line">$ git tag</div><div class="line">v0.<span class="number">1</span></div><div class="line">v1.<span class="number">3</span></div><div class="line">v1.<span class="number">4</span></div><div class="line">v1.<span class="number">4</span>-lw</div><div class="line">v1.<span class="number">5</span></div></pre></td></tr></table></figure>
<h3 id="显示标签内容"><a href="#显示标签内容" class="headerlink" title="显示标签内容"></a>显示标签内容</h3><p>可以使用<code>git show</code>命令查看相应标签的版本信息，并连同显示打标签时的提交对象。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git show v1.<span class="number">4</span></div><div class="line">tag v1.<span class="number">4</span></div><div class="line">Tagger: Scott Chacon </div><div class="line">Date:   Mon Feb <span class="number">9</span> <span class="number">14</span>:<span class="number">45</span>:<span class="number">11</span> <span class="number">2009</span> -<span class="number">0800</span></div><div class="line"></div><div class="line">my version <span class="number">1.4</span></div><div class="line">commit <span class="number">15027957951</span>b64cf874c3557a0f3547bd83b3ff6</div><div class="line">Merge: <span class="number">4</span>a447f7... a6b4c97...</div><div class="line">Author: Scott Chacon </div><div class="line"></div><div class="line">Date:   Sun Feb <span class="number">8</span> <span class="number">19</span>:<span class="number">02</span>:<span class="number">46</span> <span class="number">2009</span> -<span class="number">0800</span></div><div class="line"></div><div class="line">    Merge branch <span class="string">'experiment'</span></div></pre></td></tr></table></figure>
<h3 id="签署标签"><a href="#签署标签" class="headerlink" title="签署标签"></a>签署标签</h3><p>如果你有自己的私钥，还可以用 GPG 来签署标签，只需要把之前的<code>-a</code>改为<code>-s</code>（译注： 取 signed 的首字母）即可：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git tag -s v1.<span class="number">5</span> -m <span class="string">'my signed 1.5 tag'</span></div><div class="line">You need a passphrase to unlock the secret key <span class="keyword">for</span></div><div class="line">user: <span class="string">"Scott Chacon "</span></div><div class="line"></div><div class="line"><span class="number">1024</span>-bit DSA key, ID F721C45A, created <span class="number">2009</span>-<span class="number">02</span>-<span class="number">09</span></div></pre></td></tr></table></figure>
<h3 id="验证标签"><a href="#验证标签" class="headerlink" title="验证标签"></a>验证标签</h3><p>可以使用 <code>git tag -v [tag-name]</code> （译注：取 verify 的首字母）的方式验证已经签署的标签。此命令会调用 GPG 来验证签名，所以你需要有签署者的公钥，存放在 keyring 中，才能验证.</p>
<h3 id="后期加注标签"><a href="#后期加注标签" class="headerlink" title="后期加注标签"></a>后期加注标签</h3><p>有时候我们可能需要在以往的提交记录上打标签，这时候只要在打标签的时候跟上对应提交对象的校验和（或前几位字符）即可：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -a v1.<span class="number">2</span> <span class="number">9</span>fceb02</div></pre></td></tr></table></figure>
<h3 id="分享标签"><a href="#分享标签" class="headerlink" title="分享标签"></a>分享标签</h3><p>默认情况下，<code>git push</code> 并不会把标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库。其命令格式如同推送分支，运行<code>git push origin [tagname]</code> 即可：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git push origin v1.<span class="number">5</span></div><div class="line">Counting objects: <span class="number">50</span>, done.</div><div class="line">Compressing objects: <span class="number">100</span>% (<span class="number">38</span>/<span class="number">38</span>), done.</div><div class="line">Writing objects: <span class="number">100</span>% (<span class="number">44</span>/<span class="number">44</span>), <span class="number">4.56</span> KiB, done.</div><div class="line">Total <span class="number">44</span> (delta <span class="number">18</span>), reused <span class="number">8</span> (delta <span class="number">1</span>)</div><div class="line">To git@github.com:schacon/simplegit.git</div><div class="line">* [new tag]         v1.<span class="number">5</span> -&gt; v1.<span class="number">5</span></div></pre></td></tr></table></figure>
<p>如果要一次推送所有本地新增的标签上去，可以使用<code>--tags</code>选项：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git push origin --tags</div><div class="line">Counting objects: <span class="number">50</span>, done.</div><div class="line">Compressing objects: <span class="number">100</span>% (<span class="number">38</span>/<span class="number">38</span>), done.</div><div class="line">Writing objects: <span class="number">100</span>% (<span class="number">44</span>/<span class="number">44</span>), <span class="number">4.56</span> KiB, done.</div><div class="line">Total <span class="number">44</span> (delta <span class="number">18</span>), reused <span class="number">8</span> (delta <span class="number">1</span>)</div><div class="line">To git@github.com:schacon/simplegit.git</div><div class="line"> * [new tag]         v0.<span class="number">1</span> -&gt; v0.<span class="number">1</span></div><div class="line"> * [new tag]         v1.<span class="number">2</span> -&gt; v1.<span class="number">2</span></div><div class="line"> * [new tag]         v1.<span class="number">4</span> -&gt; v1.<span class="number">4</span></div><div class="line"> * [new tag]         v1.<span class="number">4</span>-lw -&gt; v1.<span class="number">4</span>-lw</div><div class="line"> * [new tag]         v1.<span class="number">5</span> -&gt; v1.<span class="number">5</span></div></pre></td></tr></table></figure>
<p>现在，其他人克隆共享仓库或拉取数据同步后，也会看到这些标签。</p>
<h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。在很多版本控制系统中，这是个昂贵的过程，常常需要创建一个源代码目录的完整副本，对大型项目来说会花费很长时间。</p>
<p>有人把 Git 的分支模型称为“必杀技特性”，而正是因为它，将 Git 从版本控制系统家族里区分出来。Git 有何特别之处呢？Git 的分支可谓是难以置信的轻量级，它的新建操作几乎可以在瞬间完成，并且在不同分支间切换起来也差不多一样快。和许多其他版本控制系统不同，Git 鼓励在工作流程中频繁使用分支与合并，哪怕一天之内进行许多次都没有关系。理解分支的概念并熟练运用后，你才会意识到为什么 Git 是一个如此强大而独特的工具，并从此真正改变你的开发方式。</p>
<h3 id="何谓分支"><a href="#何谓分支" class="headerlink" title="何谓分支"></a>何谓分支</h3><p>为了理解 Git 分支的实现方式，我们需要回顾一下 Git 是如何储存数据的。或许你还记得第一章的内容，Git 保存的不是文件差异或者变化量，而只是一系列文件快照。</p>
<p>在 Git 中提交时，会保存一个提交（commit）对象，该对象包含一个指向暂存内容快照的指针，包含本次提交的作者等相关附属信息，包含零个或多个指向该提交对 象的父对象指针：首次提交是没有直接祖先的，普通提交有一个祖先，由两个或多个分支合并产生的提交则有多个祖先。</p>
<p>为直观起见，我们假设在工作目录中有三个文件，准备将它们暂存后提交。暂存操作会对每一个文件计算校验和（即第一章中提到的 SHA-1 哈希字串），然后把当前版本的文件快照保存到 Git 仓库中（Git 使用 blob 类型的对象存储这些快照），并将校验和加入暂存区域：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add README test.rb LICENSE</div><div class="line">$ git commit -m <span class="string">'initial commit of my project'</span></div></pre></td></tr></table></figure>
<p>当使用<code>git commit</code>新建一个提交对象前，Git 会先计算每一个子目录（本例中就是项目根目录）的校验和，然后在 Git 仓库中将这些目录保存为树（tree）对象。之后 Git 创建的提交对象，除了包含相关提交信息以外，还包含着指向这个树对象（项目根目录）的指针，如此它就可以在将来需要的时候，重现此次快照的内容了。</p>
<p>现在，Git 仓库中有五个对象：三个表示文件快照内容的 blob 对象；一个记录着目录树内容及其中各个文件对应 blob 对象索引的 tree 对象；以及一个包含指向 tree 对象（根目录）的索引和其他提交信息元数据的 commit 对象。概念上来说，仓库中的各个对象保存的数据和相互关系看起来如图所示：</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121719_123.png" alt=""></p>
<p>作些修改后再次提交，那么这次的提交对象会包含一个指向上次提交对象的指针（译注：即下图中的 parent 对象）。两次提交后，仓库历史会变成下图的样子：</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121721_705.png" alt=""></p>
<p>现在来谈分支。Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git 会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121722_450.png" alt=""></p>
<p>那么，Git 又是如何创建一个新的分支的呢？答案很简单，创建一个新的分支指针。比如新建一个 testing 分支，可以使用 <code>git branch</code>命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch testing</div></pre></td></tr></table></figure>
<p>这会在当前 commit 对象上新建一个分支指针</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121722_624.png" alt=""></p>
<p>那么，Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 HEAD 的特别指针。请注意它和你熟知的许多其他版本控制系统（比如 Subversion 或 CVS）里的 HEAD 概念大不相同。在 Git 中，它是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名。）。运行<code>git branch</code> 命令，仅仅是建立了一个新的分支，但不会自动切换到这个分支中去，所以在这个例子中，我们依然还在 master 分支里工作</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121723_520.png" alt=""></p>
<p>要切换到其他分支，可以执行<code>git checkout</code>命令。我们现在转换到新建的 testing 分支：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout testing</div></pre></td></tr></table></figure>
<p>这样 HEAD 就指向了 testing 分支</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121724_229.png" alt=""></p>
<p>这样的实现方式会给我们带来什么好处呢？好吧，现在不妨再提交一次：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim test.rb</div><div class="line">$ git commit -a -m <span class="string">'made a change'</span></div></pre></td></tr></table></figure>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121724_283.png" alt=""></p>
<p>非常有趣，现在 testing 分支向前移动了一格，而 master 分支仍然指向原先 <code>git checkout</code> 时所在的 commit 对象。现在我们回到 master 分支看看：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div></pre></td></tr></table></figure>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121725_226.png" alt=""></p>
<p>这条命令做了两件事。它把 HEAD 指针移回到 master 分支，并把工作目录中的文件换成了 master 分支所指向的快照内容。也就是说，现在开始所做的改动，将始于本项目中一个较老的版本。它的主要作用是将 testing 分支里作出的修改暂时取消，这样你就可以向另一个方向进行开发。</p>
<p>我们作些修改后再次提交：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim test.rb</div><div class="line">$ git commit -a -m <span class="string">'made other changes'</span></div></pre></td></tr></table></figure>
<p>现在我们的项目提交历史产生了分叉（如图 3-9 所示），因为刚才我们创建了一个分支，转换到其中进行了一些工作，然后又回到原来的主分支进行了另外一些工作。这些改变分别孤立在不同的分支里：我们可以 在不同分支里反复切换，并在时机成熟时把它们合并到一起。而所有这些工作，仅仅需要branch 和 checkout 这两条命令就可以完成。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121725_89.png" alt=""></p>
<p>由于 Git 中的分支实际上仅是一个包含所指对象校验和（40 个字符长度 SHA-1 字串）的文件，所以创建和销毁一个分支就变得非常廉价。说白了，新建一个分支就是向一个文件写入 41 个字节（外加一个换行符）那么简单，当然也就很快了。</p>
<p>这和大多数版本控制系统形成了鲜明对比，它们管理分支大多采取备份所有项目文件到特定目录的方式，所以根据项目文件数量和大小不同，可能花费的时间 也会有相当大的差别，快则几秒，慢则数分钟。而 Git 的实现与项目复杂度无关，它永远可以在几毫秒的时间内完成分支的创建和切换。同时，因为每次提交时都记录了祖先信息（译注：即parent 对象），将来要合并分支时，寻找恰当的合并基础（译注：即共同祖先）的工作其实已经自然而然地摆在那里了，所以实现起来非常容易。Git 鼓励开发者频繁使用分支，正是因为有着这些特性作保障。</p>
<h3 id="分支的新建与合并"><a href="#分支的新建与合并" class="headerlink" title="分支的新建与合并"></a>分支的新建与合并</h3><p>现在让我们来看一个简单的分支与合并的例子，实际工作中大体也会用到这样的工作流程：</p>
<ol>
<li>开发某个网站。 </li>
<li>为实现某个新的需求，创建一个分支。 </li>
<li>在这个分支上开展工作。</li>
</ol>
<p>假设此时，你突然接到一个电话说有个很严重的问题需要紧急修补，那么可以按照下面的方式处理：</p>
<ol>
<li>返回到原先已经发布到生产服务器上的分支。 </li>
<li>为这次紧急修补建立一个新分支，并在其中修复问题。 </li>
<li>通过测试后，回到生产服务器所在的分支，将修补分支合并进来，然后再推送到生产服务器上。 </li>
<li>切换到之前实现新需求的分支，继续工作。</li>
</ol>
<h3 id="分支的新建与切换"><a href="#分支的新建与切换" class="headerlink" title="分支的新建与切换"></a>分支的新建与切换</h3><p>首先，我们假设你正在项目中愉快地工作，并且已经提交了几次更新</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121726_3.png" alt=""></p>
<p>现在，你决定要修补问题追踪系统上的 #53 问题。顺带说明下，Git 并不同任何特定的问题追踪系统打交道。这里为了说明要解决的问题，才把新建的分支取名为 iss53。要新建并切换到该分支，运行<code>git checkout</code> 并加上 <code>-b</code> 参数：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b iss53</div><div class="line">Switched to a new branch <span class="string">"iss53"</span></div></pre></td></tr></table></figure>
<p>这相当于执行下面这两条命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch iss53</div><div class="line">$ git checkout iss53</div></pre></td></tr></table></figure>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121726_846.png" alt=""></p>
<p>接着你开始尝试修复问题，在提交了若干次更新后，iss53 分支的指针也会随着向前推进，因为它就是当前分支（换句话说，当前的 HEAD 指针正指向 iss53</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121727_65.png" alt=""></p>
<p>现在你就接到了那个网站问题的紧急电话，需要马上修补。有了 Git ，我们就不需要同时发布这个补丁和 iss53 里作出的修改，也不需要在创建和发布该补丁到服务器之前花费大力气来复原这些修改。唯一需要的仅仅是切换回master 分支。</p>
<p>不过在此之前，留心你的暂存区或者工作目录里，那些还没有提交的修改，它会和你即将检出的分支产生冲突从而阻止 Git 为你切换分支。切换分支的时候最好保持一个清洁的工作区域。稍后会介绍几个绕过这种问题的办法（分别叫做 stashing 和 commit amending）。目前已经提交了所有的修改，所以接下来可以正常转换到master 分支：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch <span class="string">"master"</span></div></pre></td></tr></table></figure>
<p>此时工作目录中的内容和你在解决问题 #53 之前一模一样，你可以集中精力进行紧急修补。这一点值得牢记：Git 会把工作目录的内容恢复为检出某分支时它所指向的那个提交对象的快照。它会自动添加、删除和修改文件以确保目录的内容和你当时提交时完全一样。</p>
<p>接下来，你得进行紧急修补。我们创建一个紧急修补分支 hotfix 来开展工作，直到搞定</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b <span class="string">'hotfix'</span></div><div class="line">Switched to a new branch <span class="string">"hotfix"</span></div><div class="line">$ vim index.html</div><div class="line">$ git commit -a -m <span class="string">'fixed the broken email address'</span></div><div class="line">[hotfix]: created <span class="number">3</span>a0874c: <span class="string">"fixed the broken email address"</span></div><div class="line"> <span class="number">1</span> files changed, <span class="number">0</span> insertions(+), <span class="number">1</span> deletions(-)</div></pre></td></tr></table></figure>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121727_499.png" alt=""></p>
<p>有必要作些测试，确保修补是成功的，然后回到 master 分支并把它合并进来，然后发布到生产服务器。用 <code>git merge</code> 命令来进行合并：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">$ git merge hotfix</div><div class="line">Updating f42c576..<span class="number">3</span>a0874c</div><div class="line">Fast forward</div><div class="line"> README |    <span class="number">1</span> -</div><div class="line"> <span class="number">1</span> files changed, <span class="number">0</span> insertions(+), <span class="number">1</span> deletions(-)</div></pre></td></tr></table></figure>
<p>请注意，合并时出现了“Fast forward”的提示。由于当前 master 分支所在的提交对象是要并入的 hotfix 分支的直接上游，Git 只需把master 分支指针直接右移。换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为<strong>快进（Fast forward）</strong>。</p>
<p>现在最新的修改已经在当前 master 分支所指向的提交对象中了，可以部署到生产服务器上去了</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121728_242.png" alt=""></p>
<p>合并之后，master 分支和 hotfix 分支指向同一位置。</p>
<p>在那个超级重要的修补发布以后，你想要回到被打扰之前的工作。由于当前 hotfix 分支和 master 都指向相同的提交对象，所以hotfix 已经完成了历史使命，可以删掉了。使用<code>git branch</code>的<code>-d</code>选项执行删除操作：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch -d hotfix</div><div class="line">Deleted branch hotfix (<span class="number">3</span>a0874c).</div></pre></td></tr></table></figure>
<p>现在回到之前未完成的 #53 问题修复分支上继续工作</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git checkout iss53</div><div class="line">Switched to branch <span class="string">"iss53"</span></div><div class="line">$ vim index.html</div><div class="line">$ git commit -a -m <span class="string">'finished the new footer [issue 53]'</span></div><div class="line">[iss53]: created ad82d7a: <span class="string">"finished the new footer [issue 53]"</span></div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">0</span> deletions(-)</div></pre></td></tr></table></figure>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121729_2.png" alt=""></p>
<p>不用担心之前 hotfix 分支的修改内容尚未包含到 iss53 中来。如果确实需要纳入此次修补，可以用<code>git merge master</code> 把 master 分支合并到 iss53；或者等 iss53 完成之后，再将iss53 分支中的更新并入 master。</p>
<h3 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h3><p>在问题 #53 相关的工作完成之后，可以合并回 master 分支。实际操作同前面合并 hotfix 分支差不多，只需回到master 分支，运行 <code>git merge</code> 命令指定要合并进来的分支：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">$ git merge iss53</div><div class="line">Merge made by recursive.</div><div class="line"> README |    <span class="number">1</span> +</div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">0</span> deletions(-)</div></pre></td></tr></table></figure>
<p>请注意，这次合并操作的底层实现，并不同于之前 hotfix 的并入方式。因为这次你的开发历史是从更早的地方开始分叉的。由于当前 master 分支所指向的提交对象（C4）并不是 iss53 分支的直接祖先，Git 不得不进行一些额外处理。就此例而言，Git 会用两个分支的末端（C4 和 C5）以及它们的共同祖先（C2）进行一次简单的三方合并计算。图 3-16 用红框标出了 Git 用于合并的三个提交对象：</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121729_46.png" alt=""></p>
<p>这次，Git 没有简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象（C6）。这个提交对象比较特殊，它有两个祖先（C4 和 C5）。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121730_974.png" alt=""></p>
<p>既然之前的工作成果已经合并到 master 了，那么 iss53 也就没用了。你可以就此删除它，并在问题追踪系统里关闭该问题。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -d iss53</div></pre></td></tr></table></figure>
<h3 id="遇到冲突时的分支合并"><a href="#遇到冲突时的分支合并" class="headerlink" title="遇到冲突时的分支合并"></a>遇到冲突时的分支合并</h3><p>有时候合并操作并不会如此顺利。如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起（译注：逻辑上说，这种问题只能由人来裁决。）。如果你在解决问题 #53 的过程中修改了hotfix 中修改的部分，将得到类似下面的结果：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git merge iss53</div><div class="line">Auto-merging index.html</div><div class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> index.html</div><div class="line">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>
<p>Git 作了合并，但<strong>没有提交</strong>，它会停下来等你解决冲突。要看看哪些文件在合并时发生冲突，可以用 <code>git status</code> 查阅：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[master*]$ git status</div><div class="line">index.html: needs merge</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Changed but not updated:</span></div><div class="line"><span class="comment">#   (use "git add  ..." to update what will be committed)</span></div><div class="line"><span class="comment">#   (use "git checkout -- ..." to discard changes in working directory)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#	unmerged:   index.html</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<p>确认所有冲突都已解决，也就是进入了暂存区，就可以用 git commit 来完成这次合并提交。</p>
<p>现在我们来看一个实际的例子。请看图 3-20，由下往上，起先我们在 master 工作到 C1，然后开始一个新分支 iss91 尝试修复 91 号缺陷，提交到 C6 的时候，又冒出一个解决该问题的新办法，于是从之前 C4 的地方又分出一个分支iss91v2，干到 C8 的时候，又回到主干 master 中提交了 C9 和 C10，再回到 iss91v2 继续工作，提交 C11，接着，又冒出个不太确定的想法，从 master 的最新提交 C10 处开了个新的分支dumbidea 做些试验。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121731_919.png" alt=""></p>
<p>现在，假定两件事情：我们最终决定使用第二个解决方案，即 iss91v2 中的办法；另外，我们把 dumbidea 分支拿给同事们看了以后，发现它竟然是个天才之作。所以接下来，我们准备抛弃原来的iss91 分支（实际上会丢弃 C5 和 C6），直接在主干中并入另外两个分支。最终的提交历史将变成图 3-21 这样：</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121732_963.png" alt=""></p>
<p><strong>请务必牢记这些分支全部都是本地分支，这一点很重要。当你在使用分支及合并的时候，一切都是在你自己的 Git 仓库中进行的 — 完全不涉及与服务器的交互。</strong></p>
<h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><p>远程分支（remote branch）是对远程仓库中的分支的索引。它们是一些无法移动的本地分支；只有在 Git 进行网络交互时才会更新。远程分支就像是书签，提醒着你上次连接远程仓库时上面各分支的位置。</p>
<p>我们用 (远程仓库名)/(分支名) 这样的形式表示远程分支。比如我们想看看上次同 origin 仓库通讯时master 的样子，就应该查看 origin/master 分支。如果你和同伴一起修复某个问题，但他们先推送了一个iss53 分支到远程仓库，虽然你可能也有一个本地的 iss53 分支，但指向服务器上最新更新的却应该是 origin/iss53 分支。</p>
<p>可能有点乱，我们不妨举例说明。假设你们团队有个地址为 git.ourcompany.com 的 Git 服务器。如果你从这里克隆，Git 会自动为你将此远程仓库命名为origin，并下载其中所有的数据，建立一个指向它的 master 分支的指针，在本地命名为 origin/master，但你无法在本地更改其数据。接着，Git 建立一个属于你自己的本地master 分支，始于 origin 上 master 分支相同的位置，你可以就此开始工作</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121733_745.png" alt=""></p>
<p>如果你在本地 master 分支做了些改动，与此同时，其他人向 git.ourcompany.com 推送了他们的更新，那么服务器上的master 分支就会向前推进，而于此同时，你在本地的提交历史正朝向不同方向发展。不过只要你不和服务器通讯，你的 origin/master 指针仍然保持原位不会移动</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121734_669.png" alt=""></p>
<p>可以运行 <code>git fetch origin</code> 来同步远程服务器上的数据到本地。该命令首先找到 origin 是哪个服务器（本例为git.ourcompany.com），从上面获取你尚未拥有的数据，更新你本地的数据库，然后把 origin/master 的指针移到它最新的位置上</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121735_607.png" alt=""></p>
<p>为了演示拥有多个远程分支（在不同的远程服务器上）的项目是如何工作的，我们假设你还有另一个仅供你的敏捷开发小组使用的内部服务器 git.team1.ourcompany.com。可以用第二章中提到的git remote add 命令把它加为当前项目的远程分支之一。我们把它命名为 teamone，以便代替原始的 Git 地址</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121736_936.png" alt=""></p>
<p>现在你可以用 git fetch teamone 来获取小组服务器上你还没有的数据了。由于当前该服务器上的内容是你 origin 服务器上的子集，Git 不会下载任何数据，而只是简单地创建一个名为teamone/master 的分支，指向 teamone 服务器上 master 分支所在的提交对象31b8e</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121737_674.png" alt=""></p>
<h3 id="推送本地分支"><a href="#推送本地分支" class="headerlink" title="推送本地分支"></a>推送本地分支</h3><p>要想和其他人分享某个本地分支，你需要把它推送到一个你拥有写权限的远程仓库。你的本地分支不会被自动同步到你引入的远程服务器上，除非你明确执行推送操作。换句话说，对于无意分享的分支，你尽管保留为私人分支好了，而只推送那些协同工作要用到的特性分支。</p>
<p>如果你有个叫 serverfix 的分支需要和他人一起开发，可以运行 <code>git push (远程仓库名) (分支名)</code>：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git push origin serverfix</div><div class="line">Counting objects: <span class="number">20</span>, done.</div><div class="line">Compressing objects: <span class="number">100</span>% (<span class="number">14</span>/<span class="number">14</span>), done.</div><div class="line">Writing objects: <span class="number">100</span>% (<span class="number">15</span>/<span class="number">15</span>), <span class="number">1.74</span> KiB, done.</div><div class="line">Total <span class="number">15</span> (delta <span class="number">5</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">To git@github.com:schacon/simplegit.git</div><div class="line"> * [new branch]      serverfix -&gt; serverfix</div></pre></td></tr></table></figure>
<p>这其实有点像条捷径。Git 自动把 serverfix 分支名扩展为 refs/heads/serverfix:refs/heads/serverfix，意为“取出我在本地的 serverfix 分支，推送到远程仓库的 serverfix 分支中去”</p>
<p>也可以运行 <code>git push origin serverfix:serferfix</code> 来实现相同的效果，它的意思是“上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支”。通过此语法，你可以把本地分支推送到某个命名不同的远程分支：若想把远程分支叫作awesomebranch，可以用 <code>git push origin serverfix:awesomebranch</code> 来推送数据。</p>
<p>接下来，当你的协作者再次从服务器上获取数据时，他们将得到一个新的远程分支 origin/serverfix：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin</div><div class="line">remote: Counting objects: <span class="number">20</span>, done.</div><div class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">14</span>/<span class="number">14</span>), done.</div><div class="line">remote: Total <span class="number">15</span> (delta <span class="number">5</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">Unpacking objects: <span class="number">100</span>% (<span class="number">15</span>/<span class="number">15</span>), done.</div><div class="line">From git@github.com:schacon/simplegit</div><div class="line"> * [new branch]      serverfix    -&gt; origin/serverfix</div></pre></td></tr></table></figure>
<p>值得注意的是，在 fetch 操作下载好新的远程分支之后，你仍然无法在本地编辑该远程仓库中的分支。换句话说，在本例中，你不会有一个新的serverfix 分支，有的只是一个你无法移动的 origin/serverfix 指针。</p>
<h3 id="跟踪远程分支"><a href="#跟踪远程分支" class="headerlink" title="跟踪远程分支"></a>跟踪远程分支</h3><p>从远程分支 checkout 出来的本地分支，称为<em>跟踪分支(tracking branch)</em>。跟踪分支是一种和远程分支有直接联系的本地分支。在跟踪分支里输入git push，Git 会自行推断应该向哪个服务器的哪个分支推送数据。反过来，在这些分支里运行 git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来。</p>
<p>在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master。这正是<code>git push</code> 和 <code>git pull</code> 一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如origin 上除了 master 之外的其它分支。刚才我们已经看到了这样的一个例子：<code>git checkout -b [分支名] [远程名]/[分支名]</code>。如果你有 1.6.2 以上版本的 Git，还可以用<code>--track</code> 选项简化：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git checkout --track origin/serverfix</div><div class="line">Branch serverfix set up to track remote branch refs/remotes/origin/serverfix.</div><div class="line">Switched to a new branch <span class="string">"serverfix"</span></div></pre></td></tr></table></figure>
<p>要为本地分支设定不同于远程分支的名字，只需在前个版本的命令里换个名字：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b sf origin/serverfix</div><div class="line">Branch sf set up to track remote branch refs/remotes/origin/serverfix.</div><div class="line">Switched to a new branch <span class="string">"sf"</span></div></pre></td></tr></table></figure>
<p>现在你的本地分支 sf 会自动向 origin/serverfix 推送和抓取数据了。</p>
<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>如果不再需要某个远程分支了，比如搞定了某个特性并把它合并进了远程的 master 分支（或任何其他存放稳定代码的地方），可以用这个非常<strong>无厘头</strong>的语法来删除它：<code>git push [远程名] :[分支名]</code>。如果想在服务器上删除serverfix 分支，运行下面的命令：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git push origin :serverfix</div><div class="line">To git@github.com:schacon/simplegit.git</div><div class="line"> - [deleted]         serverfix</div></pre></td></tr></table></figure>
<p>咚！服务器上的分支没了。你最好特别留心这一页，因为你一定会用到那个命令，而且你很可能会忘掉它的语法。有种方便记忆这条命令的方法：记住我们不久前见过的 <code>git push [远程名] [本地分支]:[远程分支]</code> 语法，如果省略 [本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。</p>
<h3 id="分支的衍合"><a href="#分支的衍合" class="headerlink" title="分支的衍合"></a>分支的衍合</h3><p>把一个分支整合到另一个分支的办法有两种：merge 和 rebase（译注：rebase 的翻译暂定为“衍合”，大家知道就可以了。）。在本章我们会学习什么是衍合，如何使用衍合，为什么衍合操作如此富有魅力，以及我们应该在什么情况下使用衍合。</p>
<h4 id="基本的衍合操作"><a href="#基本的衍合操作" class="headerlink" title="基本的衍合操作"></a>基本的衍合操作</h4><p>请回顾之前有关合并的一节，你会看到开发进程分叉到两个不同分支，又各自提交了更新。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121738_258.png" alt=""></p>
<p>之前介绍过，最容易的整合分支的方法是 merge 命令，它会把两个分支最新的快照（C3 和 C4）以及二者最新的共同祖先（C2）进行三方合并，合并的结果是产生一个新的提交对象（C5）。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121738_893.png" alt=""></p>
<p>其实，还有另外一个选择：你可以把在 C3 里产生的变化补丁在 C4 的基础上重新打一遍。在 Git 里，这种操作叫做<em>衍合（rebase）</em>。有了 rebase 命令，就可以把在一个分支里提交的改变移到另一个分支里重放一遍。</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git checkout experiment</div><div class="line">$ git rebase master</div><div class="line">First, rewinding head to replay your work on top of it...</div><div class="line">Applying: added staged command</div></pre></td></tr></table></figure>
<p>它的原理是回到两个分支最近的共同祖先，根据当前分支（也就是要进行衍合的分支 experiment）后续的历次提交对象（这里只有一个 C3），生成一系列文件补丁，然后以基底分支（也就是主干分支master）最后一个提交对象（C4）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象（C3’），从而改写 experiment 的提交历史，使它成为 master 分支的<strong>直接下游</strong></p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121739_386.png" alt=""></p>
<p>把 C3 里产生的改变到 C4 上重演一遍。</p>
<p>现在回到 master 分支，进行一次快进合并</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121739_29.png" alt=""></p>
<p>现在的 C3’ 对应的快照，其实和普通的三方合并，即上个例子中的 C5 对应的快照内容一模一样了。虽然最后整合得到的结果没有任何区别，但衍合能产生一个更为整洁的提交历史。如果视察一个衍合过的分支的历史记录，看起来会更 清楚：仿佛所有修改都是在一根线上先后进行的，尽管实际上它们原本是同时并行发生的。</p>
<p>一般我们使用衍合的目的，是想要得到一个能在远程分支上干净应用的补丁 — 比如某些项目你不是维护者，但想帮点忙的话，最好用衍合：先在自己的一个分支里进行开发，当准备向主项目提交补丁的时候，根据最新的origin/master 进行一次衍合操作然后再提交，这样维护者就不需要做任何整合工作（译注：实际上是把解决分支补丁同最新主干代码之间冲突的责任，化转为由提交补丁的人来解决。），只需根据你提供的仓库地址作一次快进合并，或者直接采纳你提交的补丁。</p>
<p>请注意，合并结果中最后一次提交所指向的快照，无论是通过衍合，还是三方合并，都会得到相同的快照内容，只不过提交历史不同罢了。衍合是按照每行的修改次序重演一遍修改，而合并是把最终结果合在一起。</p>
<h4 id="有趣的衍合"><a href="#有趣的衍合" class="headerlink" title="有趣的衍合"></a>有趣的衍合</h4><p>衍合也可以放到其他分支进行，并不一定非得根据分化之前的分支。以图的历史为例，我们为了给服务器端代码添加一些功能而创建了特性分支 server，然后提交 C3 和 C4。然后又从 C3 的地方再增加一个client 分支来对客户端代码进行一些相应修改，所以提交了 C8 和 C9。最后，又回到 server 分支提交了 C10。</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121740_319.png" alt=""></p>
<p>假设在接下来的一次软件发布中，我们决定先把客户端的修改并到主线中，而暂缓并入服务端软件的修改（因为还需要进一步测试）。这个时候，我们就可以把基于 server 分支而非 master 分支的改变（即 C8 和 C9），跳过 server 直接放到master 分支中重演一遍，但这需要用 git rebase 的 –onto 选项指定新的基底分支master：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rebase --onto master server client</div></pre></td></tr></table></figure>
<p>这好比在说：“取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在master 上重演一遍”。是不是有点复杂？不过它的结果如图 3-32 所示，非常酷（译注：虽然 client 里的 C8, C9 在 C3 之后，但这仅表明时间上的先后，而非在 C3 修改的基础上进一步改动，因为server 和 client 这两个分支对应的代码应该是两套文件，虽然这么说不是很严格，但应理解为在 C3 时间点之后，对另外的文件所做的 C8，C9 修改，放到主干重演。）：</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121740_891.png" alt=""></p>
<p>现在可以快进 master 分支了</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">$ git merge client</div></pre></td></tr></table></figure>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121741_142.png" alt=""></p>
<p>现在我们决定把 server 分支的变化也包含进来。我们可以直接把 server 分支衍合到 master，而不用手工切换到 server 分支后再执行衍合操作 — git rebase [主分支] [特性分支] 命令会先取出特性分支server，然后在主分支 master 上重演：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rebase master server</div></pre></td></tr></table></figure>
<p>于是，server 的进度应用到 master 的基础上，如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121742_594.png" alt=""></p>
<p>然后就可以快进主干分支 master 了：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">$ git merge server</div></pre></td></tr></table></figure>
<p>现在 client 和 server 分支的变化都已经集成到主干分支来了，可以删掉它们了。最终我们的提交历史会变成图</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git branch -d client</div><div class="line">$ git branch -d server</div></pre></td></tr></table></figure>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121743_361.png" alt=""></p>
<h4 id="衍合的风险"><a href="#衍合的风险" class="headerlink" title="衍合的风险"></a>衍合的风险</h4><p>呃，奇妙的衍合也并非完美无缺，要用它得遵守一条准则：</p>
<p><strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作</strong>。</p>
<p>如果你遵循这条金科玉律，就不会出差错。否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。</p>
<p>在进行衍合的时候，实际上抛弃了一些现存的提交对象而创造了一些类似但不同的新的提交对象。如果你把原来分支中的提交对象发布出去，并且其他人更新下载后在其基础上开展工作，而稍后你又用<code>git rebase</code> 抛弃这些提交对象，把新的重演后的提交对象发布出去的话，你的合作者就不得不重新合并他们的工作，这样当你再次从他们那里获取内容时，提交历史就会变得一团糟。</p>
<p>下面我们用一个实际例子来说明为什么公开的衍合会带来问题。假设你从一个中央服务器克隆然后在它的基础上搞了一些开发，提交历史类似图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121743_370.png" alt=""></p>
<p>现在，某人在 C1 的基础上做了些改变，并合并他自己的分支得到结果 C6，推送到中央服务器。当你抓取并合并这些数据到你本地的开发分支中后，会得到合并结果 C7，历史提交会变成图 </p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121744_939.png" alt=""></p>
<p>接下来，那个推送 C6 上来的人决定用衍合取代之前的合并操作；继而又用 git push –force 覆盖了服务器上的历史，得到 C4’。而之后当你再从服务器上下载最新提交后，会得到：</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121745_75.png" alt=""></p>
<p>下载更新后需要合并，但此时衍合产生的提交对象 C4’ 的 SHA-1 校验值和之前 C4 完全不同，所以 Git 会把它们当作新的提交对象处理，而实际上此刻你的提交历史 C7 中早已经包含了 C4 的修改内容，于是合并操作会把 C7 和 C4’ 合并为 C8</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201121746_276.png" alt=""></p>
<p>C8 这一步的合并是迟早会发生的，因为只有这样你才能和其他协作者提交的内容保持同步。而在 C8 之后，你的提交历史里就会同时包含 C4 和 C4’，两者有着不同的 SHA-1 校验值，如果用git log 查看历史，会看到两个提交拥有相同的作者日期与说明，令人费解。而更糟的是，当你把这样的历史推送到服务器后，会再次把这些衍合后的提交引入到中央服务 器，进一步困扰其他人（译注：这个例子中，出问题的责任方是那个发布了 C6 后又用衍合发布 C4’ 的人，其他人会因此反馈双重历史到共享主干，从而混淆大家的视听。）。</p>
<p>如果把衍合当成一种在推送之前清理提交历史的手段，而且仅仅衍合那些尚未公开的提交对象，就没问题。如果衍合那些已经公开的提交对象，并且已经有人基于这些提交对象开展了后续开发工作的话，就会出现叫人沮丧的麻烦。</p>
<h2 id="服务器上的git"><a href="#服务器上的git" class="headerlink" title="服务器上的git"></a>服务器上的git</h2><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>Git 可以使用四种主要的协议来传输数据：本地传输，SSH 协议，Git 协议和 HTTP 协议。下面分别介绍一下哪些情形应该使用（或避免使用）这些协议。</p>
<p>值得注意的是，除了 HTTP 协议外，其他所有协议都要求在服务器端安装并运行 Git。</p>
<h4 id="SSH-协议"><a href="#SSH-协议" class="headerlink" title="SSH 协议"></a>SSH 协议</h4><p>Git 使用的传输协议中最常见的可能就是 SSH 了。这是因为大多数环境已经支持通过 SSH 对服务器的访问 — 即便还没有，架设起来也很容易。SSH 也是唯一一个同时支持读写操作的网络协议。另外两个网络协议（HTTP 和 Git）通常都是只读的，所以虽然二者对大多数人都可用，但执行写操作时还是需要 SSH。SSH 同时也是一个验证授权的网络协议；而因为其普遍性，一般架设和使用都很容易。</p>
<p>通过 SSH 克隆一个 Git 仓库，你可以像下面这样给出 ssh:// 的 URL：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone ssh://user@server:project.git</div></pre></td></tr></table></figure>
<p>或者不指明某个协议 — 这时 Git 会默认使用 SSH ：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone user@server:project.git</div></pre></td></tr></table></figure>
<p>如果不指明用户，Git 会默认使用当前登录的用户名连接服务器。</p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>使用 SSH 的好处有很多。首先，如果你想拥有对网络仓库的写权限，基本上不可能不使用 SSH。其次，SSH 架设相对比较简单 — SSH 守护进程很常见，很多网络管理员都有一些使用经验，而且很多操作系统都自带了它或者相关的管理工具。再次，通过 SSH 进行访问是安全的 — 所有数据传输都是加密和授权的。最后，和 Git 及本地协议一样，SSH 也很高效，会在传输之前尽可能压缩数据。</p>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>SSH 的限制在于你不能通过它实现仓库的匿名访问。即使仅为读取数据，人们也必须在能通过 SSH 访问主机的前提下才能访问仓库，这使得 SSH 不利于开源的项目。如果你仅仅在公司网络里使用，SSH 可能是你唯一需要使用的协议。如果想允许对项目的匿名只读访问，那么除了为自己推送而架设 SSH 协议之外，还需要支持其他协议以便他人访问读取。</p>
<h4 id="Git-协议"><a href="#Git-协议" class="headerlink" title="Git 协议"></a>Git 协议</h4><p>接下来是 Git 协议。这是一个包含在 Git 软件包中的特殊守护进程； 它会监听一个提供类似于 SSH 服务的特定端口（9418），而无需任何授权。打算支持 Git 协议的仓库，需要先创建git-export-daemon-ok 文件 — 它是协议进程提供仓库服务的必要条件 — 但除此之外该服务没有什么安全措施。要么所有人都能克隆 Git 仓库，要么谁也不能。这也意味着该协议通常不能用来进行推送。你可以允许推送操作；然而由于没有授权机制，一旦允许该操作，网络上任何一个知道项目 URL 的人将都有推送权限。不用说，这是十分罕见的情况。</p>
<h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p>Git 协议是现存最快的传输协议。如果你在提供一个有很大访问量的公共项目，或者一个不需要对读操作进行授权的庞大项目，架设一个 Git 守护进程来供应仓库是个不错的选择。它使用与 SSH 协议相同的数据传输机制，但省去了加密和授权的开销。</p>
<h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><p>Git 协议消极的一面是缺少授权机制。用 Git 协议作为访问项目的唯一方法通常是不可取的。一般的做法是，同时提供 SSH 接口，让几个开发者拥有推送（写）权限，其他人通过git:// 拥有只读权限。Git 协议可能也是最难架设的协议。它要求有单独的守护进程，需要定制 — 我们将在本章的 “Gitosis” 一节详细介绍它的架设 — 需要设定xinetd 或类似的程序，而这些工作就没那么轻松了。该协议还要求防火墙开放 9418 端口，而企业级防火墙一般不允许对这个非标准端口的访问。大型企业级防火墙通常会封锁这个少见的端口。</p>
<h4 id="HTTP-S-协议"><a href="#HTTP-S-协议" class="headerlink" title="HTTP/S 协议"></a>HTTP/S 协议</h4><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><p>使用 HTTP 协议的好处是易于架设。几条必要的命令就可以让全世界读取到仓库的内容。花费不过几分钟。HTTP 协议不会占用过多服务器资源。因为它一般只用到静态的 HTTP 服务提供所有数据，普通的 Apache 服务器平均每秒能支撑数千个文件的并发访问 — 哪怕让一个小型服务器超载都很难。</p>
<p>你也可以通过 HTTPS 提供只读的仓库，这意味着你可以加密传输内容；你甚至可以要求客户端使用特定签名的 SSL 证书。一般情况下，如果到了这一步，使用 SSH 公共密钥可能是更简单的方案；不过也存在一些特殊情况，这时通过 HTTPS 使用带签名的 SSL 证书或者其他基于 HTTP 的只读连接授权方式是更好的解决方案。</p>
<p>HTTP 还有个额外的好处：HTTP 是一个如此常见的协议，以至于企业级防火墙通常都允许其端口的通信。</p>
<h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><p>HTTP 协议的消极面在于，相对来说客户端效率更低。克隆或者下载仓库内容可能会花费更多时间，而且 HTTP 传输的体积和网络开销比其他任何一个协议都大。因为它没有按需供应的能力 — 传输过程中没有服务端的动态计算 — 因而 HTTP 协议经常会被称为<em>傻瓜（dumb）</em>协议。</p>
<h2 id="分布式git"><a href="#分布式git" class="headerlink" title="分布式git"></a>分布式git</h2><p>###集成管理员工作流<br>由于 Git 允许使用多个远程仓库，开发者便可以建立自己的公共仓库，往里面写数据并共享给他人，而同时又可以从别人的仓库中提取他们的更新过来。这种情形通常都会有 个代表着官方发布的项目仓库（blessed repository），开发者们由此仓库克隆出一个自己的公共仓库（developer public），然后将自己的提交推送上去，请求官方仓库的维护者拉取更新合并到主项目。维护者在自己的本地也有个克隆仓库（integration manager），他可以将你的公共仓库作为远程仓库添加进来，经过测试无误后合并到主干分支，然后再推送到官方仓库。工作流程看起来就像图所示：</p>
<ol>
<li>项目维护者可以推送数据到公共仓库 blessed repository。</li>
<li>贡献者克隆此仓库，修订或编写新代码。</li>
<li>贡献者推送数据到自己的公共仓库 developer public。 </li>
<li>贡献者给维护者发送邮件，请求拉取自己的最新修订。</li>
<li>维护者在自己本地的 integration manger 仓库中，将贡献者的仓库加为远程仓库，合并更新并做测试。</li>
<li>维护者将合并后的更新推送到主仓库 blessed repository。</li>
</ol>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122033_852.png" alt=""></p>
<p>在 GitHub 网站上使用得最多的就是这种工作流。人们可以复制（fork 亦即克隆）某个项目到自己的列表中，成为自己的公共仓库。随后将自己的更新提交到这个仓库，所有人都可以看到你的每次更新。这么做最主要的优点在于，你可 以按照自己的节奏继续工作，而不必等待维护者处理你提交的更新；而维护者也可以按照自己的节奏，任何时候都可以过来处理接纳你的贡献。</p>
<h3 id="提交指南"><a href="#提交指南" class="headerlink" title="提交指南"></a>提交指南</h3><p>开始分析特定用例之前，先来了解下如何撰写提交说明。一份好的提交指南可以帮助协作者更轻松更有效地配合。Git 项目本身就提供了一份文档（Git 项目源代码目录中Documentation/SubmittingPatches），列数了大量提示，从如何编撰提交说明到提交补丁，不一而足。</p>
<p>首先，请不要在更新中提交多余的白字符（whitespace）。Git 有种检查此类问题的方法，在提交之前，先运行 <code>git diff --check</code>，会把可能的多余白字符修正列出来。下面的示例，我已经把终端中显示为红色的白字符用<code>X</code> 替换掉：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git diff --check</div><div class="line">lib/simplegit.rb:<span class="number">5</span>: trailing whitespace.</div><div class="line">+    @git_dir = File.expand_path(git_dir)XX</div><div class="line">lib/simplegit.rb:<span class="number">7</span>: trailing whitespace.</div><div class="line">+ XXXXXXXXXXX</div><div class="line">lib/simplegit.rb:<span class="number">26</span>: trailing whitespace.</div><div class="line">+    def command(git_cmd)XXXX</div></pre></td></tr></table></figure>
<p>这样在提交之前你就可以看到这类问题，及时解决以免困扰其他开发者。</p>
<p>最后需要谨记的是提交说明的撰写。写得好可以让大家协作起来更轻松。一般来说，提交说明最好限制在一行以内，50 个字符以下，简明扼要地描述更新内容，空开一行后，再展开详细注解。Git 项目本身需要开发者撰写详尽注解，包括本次修订的因由，以及前后不同实现之间的比较，我们也该借鉴这种做法。另外，提交说明应该用祈使现在式语态，比如， 不要说成 “I added tests for” 或 “Adding tests for” 而应该用 “Add tests for”。下面是来自 tpope.net 的 Tim Pope 原创的提交说明格式模版，供参考：</p>
<blockquote>
<p>本次更新的简要描述（50 个字符以内）</p>
<p>如果必要，此处展开详尽阐述。段落宽度限定在 72 个字符以内。<br>某些情况下，第一行的简要描述将用作邮件标题，其余部分作为邮件正文。<br>其间的空行是必要的，以区分两者（当然没有正文另当别论）。<br>如果并在一起，rebase 这样的工具就可能会迷惑。</p>
<p>另起空行后，再进一步补充其他说明。</p>
<ul>
<li><p>可以使用这样的条目列举式。</p>
</li>
<li><p>一般以单个空格紧跟短划线或者星号作为每项条目的起始符。每个条目间用一空行隔开。<br>不过这里按自己项目的约定，可以略作变化。</p>
</li>
</ul>
</blockquote>
<h3 id="私有的小型团队"><a href="#私有的小型团队" class="headerlink" title="私有的小型团队"></a>私有的小型团队</h3><p>让我们来看看，两个开发者一 起使用同一个共享仓库，会发生些什么。第一个人，John，克隆了仓库，作了些更新，在本地提交。（下面的例子中省略了常规提示，用… 代替以节约版面。）</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># John's Machine</span></div><div class="line">$ git clone john@githost:simplegit.git</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /home/john/simplegit/.git/</div><div class="line">...</div><div class="line">$ cd simplegit/</div><div class="line">$ vim lib/simplegit.rb </div><div class="line">$ git commit -am <span class="string">'removed invalid default value'</span></div><div class="line">[master <span class="number">738</span>ee87] removed invalid default value</div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">1</span> deletions(-)</div></pre></td></tr></table></figure>
<p>第二个开发者，Jessica，一样这么做：克隆仓库，提交更新：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Jessica's Machine</span></div><div class="line">$ git clone jessica@githost:simplegit.git</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /home/jessica/simplegit/.git/</div><div class="line">...</div><div class="line">$ cd simplegit/</div><div class="line">$ vim TODO </div><div class="line">$ git commit -am <span class="string">'add reset task'</span></div><div class="line">[master fbff5bc] add reset task</div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">0</span> deletions(-)</div></pre></td></tr></table></figure>
<p>现在，Jessica 将她的工作推送到服务器上：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Jessica's Machine</span></div><div class="line">$ git push origin master</div><div class="line">...</div><div class="line">To jessica@githost:simplegit.git</div><div class="line">   <span class="number">1</span>edee6b..fbff5bc  master -&gt; master</div></pre></td></tr></table></figure>
<p>John 也尝试推送自己的工作上去：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># John's Machine</span></div><div class="line">$ git push origin master</div><div class="line">To john@githost:simplegit.git</div><div class="line"> ! [rejected]        master -&gt; master (non-fast forward)</div><div class="line">error: failed to push some refs to <span class="string">'john@githost:simplegit.git'</span></div></pre></td></tr></table></figure>
<p>John 的推送操作被驳回，因为 Jessica 已经推送了新的数据上去。请注意，特别是你用惯了 Subversion 的话，这里其实修改的是两个文件，而不是同一个文件的同一个地方。Subversion 会在服务器端自动合并提交上来的更新，而 Git 则必须先在本地合并后才能推送。于是，John 不得不先把 Jessica 的更新拉下来：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin</div><div class="line">...</div><div class="line">From john@githost:simplegit</div><div class="line"> + <span class="number">049</span>d078...fbff5bc master     -&gt; origin/master</div></pre></td></tr></table></figure>
<p>此刻，John 的本地仓库如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122034_158.png" alt=""></p>
<p>虽然 John 下载了 Jessica 推送到服务器的最近更新（fbff5），但目前只是 origin/master 指针指向它，而当前的本地分支master 仍然指向自己的更新（738ee），所以需要先把她的提交合并过来，才能继续推送数据：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git merge origin/master</div><div class="line">Merge made by recursive.</div><div class="line"> TODO |    <span class="number">1</span> +</div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">0</span> deletions(-)</div></pre></td></tr></table></figure>
<p>还好，合并过程非常顺利，没有冲突，现在 John 的提交历史如图 </p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122035_917.png" alt=""></p>
<p>现在，John 应该再测试一下代码是否仍然正常工作，然后将合并结果（72bbc）推送到服务器上：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div><div class="line">...</div><div class="line">To john@githost:simplegit.git</div><div class="line">   fbff5bc..<span class="number">72</span>bbc59  master -&gt; master</div></pre></td></tr></table></figure>
<p>最终，John 的提交历史变为图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122035_292.png" alt=""></p>
<p>而在这段时间，Jessica 已经开始在另一个特性分支工作了。她创建了 issue54 并提交了三次更新。她还没有下载 John 提交的合并结果，所以提交历史如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122035_852.png" alt=""></p>
<p>Jessica 想要先和服务器上的数据同步，所以先下载数据：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Jessica's Machine</span></div><div class="line">$ git fetch origin</div><div class="line">...</div><div class="line">From jessica@githost:simplegit</div><div class="line">   fbff5bc..<span class="number">72</span>bbc59  master     -&gt; origin/master</div></pre></td></tr></table></figure>
<p>于是 Jessica 的本地仓库历史多出了 John 的两次提交（738ee 和 72bbc），如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122036_995.png" alt=""></p>
<p>现在，Jessica 可以将特性分支上的工作并到 master 分支，然后再并入 John 的工作（origin/master）到自己的master 分支，最后再推送回服务器。当然，得先切回主分支才能集成所有数据：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git checkout master</div><div class="line">Switched to branch <span class="string">"master"</span></div><div class="line">Your branch is behind <span class="string">'origin/master'</span> by <span class="number">2</span> commits, and can be fast-forwarded.</div></pre></td></tr></table></figure>
<p>要合并 origin/master 或 issue54 分支，谁先谁后都没有关系，因为它们都在上游（upstream）（<strong>译注：想像分叉的更新像是汇流成河的源头，所以上游 upstream 是指最新的提交</strong>），所以无所谓先后顺序，最终合并后的内容快照都是一样的，而仅是提交历史看起来会有些先后差别。Jessica 选择先合并issue54：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git merge issue54</div><div class="line">Updating fbff5bc..<span class="number">4</span>af4298</div><div class="line">Fast forward</div><div class="line"> README           |    <span class="number">1</span> +</div><div class="line"> lib/simplegit.rb |    <span class="number">6</span> +++++-</div><div class="line"> <span class="number">2</span> files changed, <span class="number">6</span> insertions(+), <span class="number">1</span> deletions(-)</div></pre></td></tr></table></figure>
<p>正如所见，没有冲突发生，仅是一次简单快进。现在 Jessica 开始合并 John 的工作（origin/master）：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git merge origin/master</div><div class="line">Auto-merging lib/simplegit.rb</div><div class="line">Merge made by recursive.</div><div class="line"> lib/simplegit.rb |    <span class="number">2</span> +-</div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">1</span> deletions(-)</div></pre></td></tr></table></figure>
<p>所有的合并都非常干净。现在 Jessica 的提交历史如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122037_94.png" alt=""></p>
<p>现在 Jessica 已经可以在自己的 master 分支中访问 origin/master 的最新改动了，所以她应该可以成功推送最后的合并结果到服务器上（假设 John 此时没再推送新数据上来）：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div><div class="line">...</div><div class="line">To jessica@githost:simplegit.git</div><div class="line">   <span class="number">72</span>bbc59..<span class="number">8059</span>c15  master -&gt; master</div></pre></td></tr></table></figure>
<p>至此，每个开发者都提交了若干次，且成功合并了对方的工作成果，最新的提交历史如图 </p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122037_695.png" alt=""></p>
<p>以上就是最简单的协作方式之一：先在自己的特性分支中工作一段时间，完成后合并到自己的 master 分支；然后下载合并 origin/master 上的更新（如果有的话），再推回远程服务器。一般的协作流程如图所示：</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122038_871.png" alt=""></p>
<h3 id="私有团队间协作"><a href="#私有团队间协作" class="headerlink" title="私有团队间协作"></a>私有团队间协作</h3><p>现在我们来看更大一点规模的私有团队协作。如果有几个小组分头负责若干特性的开发和集成，那他们之间的协作过程是怎样的。</p>
<p>假设 John 和 Jessica 一起负责开发某项特性 A，而同时 Jessica 和 Josie 一起负责开发另一项功能 B。公司使用典型的集成管理员式工作流，每个组都有一名管理员负责集成本组代码，及更新项目主仓库的master 分支。所有开发都在代表小组的分支上进行。</p>
<p>让我们跟随 Jessica 的视角看看她的工作流程。她参与开发两项特性，同时和不同小组的开发者一起协作。克隆生成本地仓库后，她打算先着手开发特性 A。于是创建了新的featureA 分支，继而编写代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Jessica's Machine</span></div><div class="line">$ git checkout -b featureA</div><div class="line">Switched to a new branch <span class="string">"featureA"</span></div><div class="line">$ vim lib/simplegit.rb</div><div class="line">$ git commit -am <span class="string">'add limit to log function'</span></div><div class="line">[featureA <span class="number">3300904</span>] add limit to log <span class="keyword">function</span></div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">1</span> deletions(-)</div></pre></td></tr></table></figure>
<p>此刻，她需要分享目前的进展给 John，于是她将自己的 featureA 分支提交到服务器。由于 Jessica 没有权限推送数据到主仓库的master 分支（只有集成管理员有此权限），所以只能将此分支推上去同 John 共享协作：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git push origin featureA</div><div class="line">...</div><div class="line">To jessica@githost:simplegit.git</div><div class="line"> * [new branch]      featureA -&gt; featureA</div></pre></td></tr></table></figure>
<p>Jessica 发邮件给 John 让他上来看看 featureA 分支上的进展。在等待他的反馈之前，Jessica 决定继续工作，和 Josie 一起开发featureB 上的特性 B。当然，先创建此分支，分叉点以服务器上的 master 为起点：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Jessica's Machine</span></div><div class="line">$ git fetch origin</div><div class="line">$ git checkout -b featureB origin/master</div><div class="line">Switched to a new branch <span class="string">"featureB"</span></div></pre></td></tr></table></figure>
<p>随后，Jessica 在 featureB 上提交了若干更新：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vim lib/simplegit.rb</div><div class="line">$ git commit -am <span class="string">'made the ls-tree function recursive'</span></div><div class="line">[featureB e5b0fdc] made the ls-tree <span class="keyword">function</span> recursive</div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">1</span> deletions(-)</div><div class="line">$ vim lib/simplegit.rb</div><div class="line">$ git commit -am <span class="string">'add ls-files'</span></div><div class="line">[featureB <span class="number">8512791</span>] add ls-files</div><div class="line"> <span class="number">1</span> files changed, <span class="number">5</span> insertions(+), <span class="number">0</span> deletions(-)</div></pre></td></tr></table></figure>
<p>现在 Jessica 的更新历史如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122038_536.png" alt=""></p>
<p>Jessica 正准备推送自己的进展上去，却收到 Josie 的来信，说是她已经将自己的工作推到服务器上的 featureBee 分支了。这样，Jessica 就必须先将 Josie 的代码合并到自己本地分支中，才能再一起推送回服务器。她用git fetch 下载 Josie 的最新代码：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin</div><div class="line">...</div><div class="line">From jessica@githost:simplegit</div><div class="line"> * [new branch]      featureBee -&gt; origin/featureBee</div></pre></td></tr></table></figure>
<p>然后 Jessica 使用 git merge 将此分支合并到自己分支中：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git merge origin/featureBee</div><div class="line">Auto-merging lib/simplegit.rb</div><div class="line">Merge made by recursive.</div><div class="line"> lib/simplegit.rb |    <span class="number">4</span> ++++</div><div class="line"> <span class="number">1</span> files changed, <span class="number">4</span> insertions(+), <span class="number">0</span> deletions(-)</div></pre></td></tr></table></figure>
<p>合并很顺利，但另外有个小问题：她要推送自己的 featureB 分支到服务器上的 featureBee 分支上去。当然，她可以使用冒号（:）格式指定目标分支：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git push origin featureB:featureBee</div><div class="line">...</div><div class="line">To jessica@githost:simplegit.git</div><div class="line">   fba9af8..cd685d1  featureB -&gt; featureBee</div></pre></td></tr></table></figure>
<p>接下来，John 发邮件给 Jessica 告诉她，他看了之后作了些修改，已经推回服务器 featureA 分支，请她过目下。于是 Jessica 运行git fetch 下载最新数据：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin</div><div class="line">...</div><div class="line">From jessica@githost:simplegit</div><div class="line">   <span class="number">3300904</span>..aad881d  featureA   -&gt; origin/featureA</div></pre></td></tr></table></figure>
<p>最后，她将 John 的工作合并到自己的 featureA 分支中：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git checkout featureA</div><div class="line">Switched to branch <span class="string">"featureA"</span></div><div class="line">$ git merge origin/featureA</div><div class="line">Updating <span class="number">3300904</span>..aad881d</div><div class="line">Fast forward</div><div class="line"> lib/simplegit.rb |   <span class="number">10</span> +++++++++-</div><div class="line"><span class="number">1</span> files changed, <span class="number">9</span> insertions(+), <span class="number">1</span> deletions(-)</div></pre></td></tr></table></figure>
<p>Jessica 稍做一番修整后同步到服务器：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git commit -am <span class="string">'small tweak'</span></div><div class="line">[featureA ed774b3] small tweak</div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">1</span> deletions(-)</div><div class="line">$ git push origin featureA</div><div class="line">...</div><div class="line">To jessica@githost:simplegit.git</div><div class="line">   <span class="number">3300904</span>..ed774b3  featureA -&gt; featureA</div></pre></td></tr></table></figure>
<p>现在的 Jessica 提交历史如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122039_393.png" alt=""></p>
<p>现在，Jessica，Josie 和 John 通知集成管理员服务器上的 featureA 及 featureBee 分支已经准备好，可以并入主线了。在管理员完成集成工作后，主分支上便多出一个新的合并提交（5399e），用 fetch 命令更新到本地后，提交历史如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122039_398.png" alt=""></p>
<p>许多开发小组改用 Git 就是因为它允许多个小组间并行工作，而在稍后恰当时机再行合并。通过共享远程分支的方式，无需干扰整体项目代码便可以开展工作，因此使用 Git 的小型团队间协作可以变得非常灵活自由。以上工作流程的时序如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122040_316.png" alt=""></p>
<h3 id="公开的小型项目"><a href="#公开的小型项目" class="headerlink" title="公开的小型项目"></a>公开的小型项目</h3><p>上面说的是私有项目协作，但要给公开项目作贡献，情况就有些不同了。因为你没有直接更新主仓库分支的权限，得寻求其它方式把工作成果交给项目维护 人。下面会介绍两种方法，第一种使用 git 托管服务商提供的仓库复制功能，一般称作 fork，比如 repo.or.cz 和 GitHub 都支持这样的操作，而且许多项目管理员都希望大家使用这样的方式。另一种方法是通过电子邮件寄送文件补丁。</p>
<p>但不管哪种方式，起先我们总需要克隆原始仓库，而后创建特性分支开展工作。基本工作流程如下：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git clone (url)</div><div class="line">$ cd project</div><div class="line">$ git checkout -b featureA</div><div class="line">$ (work)</div><div class="line">$ git commit</div><div class="line">$ (work)</div><div class="line">$ git commit</div></pre></td></tr></table></figure>
<p>在完成了特性分支开发，提交给项目维护者之前，先到原始项目的页面上点击“Fork”按钮，创建一个自己可写的公共仓库（译注：即下面的 url 部分，参照后续的例子，应该是git://githost/simplegit.git）。然后将此仓库添加为本地的第二个远端仓库，姑且称为 myfork：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add myfork (url)</div></pre></td></tr></table></figure>
<p>你需要将本地更新推送到这个仓库。要是将远端 master 合并到本地再推回去，还不如把整个特性分支推上去来得干脆直接。而且，假若项目维护者未采纳你的贡献的话（不管是直接合并还是 cherry pick），都不用回退（rewind）自己的 master 分支。但若维护者合并或 cherry-pick 了你的工作，最后总还可以从他们的更新中同步这些代码。好吧，现在先把 featureA 分支整个推上去：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push myfork featureA</div></pre></td></tr></table></figure>
<p>然后通知项目管理员，让他来抓取你的代码。通常我们把这件事叫做 pull request。可以直接用 GitHub 等网站提供的 “pull request” 按钮自动发送请求通知；或手工把<code>git request-pull</code> 命令输出结果电邮给项目管理员。</p>
<p><code>request-pull</code> 命令接受两个参数，第一个是本地特性分支开始前的原始分支，第二个是请求对方来抓取的 Git 仓库 URL（译注：即下面myfork 所指的，自己可写的公共仓库）。比如现在Jessica 准备要给 John 发一个 pull requst，她之前在自己的特性分支上提交了两次更新，并把分支整个推到了服务器上，所以运行该命令会看到：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git request-pull origin/master myfork</div><div class="line">The following changes since commit <span class="number">1</span>edee6b1d61823a2de3b09c160d7080b8d1b3a40:</div><div class="line">  John Smith (<span class="number">1</span>):</div><div class="line">        added a new <span class="keyword">function</span></div><div class="line"></div><div class="line">are available <span class="keyword">in</span> the git repository at:</div><div class="line"></div><div class="line">  git://githost/simplegit.git featureA</div><div class="line"></div><div class="line">Jessica Smith (<span class="number">2</span>):</div><div class="line">      add limit to log <span class="keyword">function</span></div><div class="line">      change log output to <span class="number">30</span> from <span class="number">25</span></div><div class="line"></div><div class="line"> lib/simplegit.rb |   <span class="number">10</span> +++++++++-</div><div class="line"> <span class="number">1</span> files changed, <span class="number">9</span> insertions(+), <span class="number">1</span> deletions(-)</div></pre></td></tr></table></figure>
<p>输出的内容可以直接发邮件给管理者，他们就会明白这是从哪次提交开始旁支出去的，该到哪里去抓取新的代码，以及新的代码增加了哪些功能等等。</p>
<p><strong>像这样随时保持自己的 master 分支和官方 origin/master 同步，并将自己的工作限制在特性分支上的做法，既方便又灵活，采纳和丢弃都轻而易举。就算原始主干发生变化，我们也能重新衍合提供新的补丁</strong>。比如现在要开始第二项特性的开发，不要在原来已推送的特性分支上继续，还是按原始master 开始：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b featureB origin/master</div><div class="line">$ (work)</div><div class="line">$ git commit</div><div class="line">$ git push myfork featureB</div><div class="line">$ (email maintainer)</div><div class="line">$ git fetch origin</div></pre></td></tr></table></figure>
<p>现在，A、B 两个特性分支各不相扰，如同竹筒里的两颗豆子，队列中的两个补丁，你随时都可以分别从头写过，或者衍合，或者修改，而不用担心特性代码的交叉混杂。如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122041_488.png" alt=""></p>
<p>假设项目管理员接纳了许多别人提交的补丁后，准备要采纳你提交的第一个分支，却发现因为代码基准不一致，合并工作无法正确干净地完成。这就需要你再次衍合到最新的 origin/master，解决相关冲突，然后重新提交你的修改：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git checkout featureA</div><div class="line">$ git rebase origin/master</div><div class="line">$ git push -f myfork featureA</div></pre></td></tr></table></figure>
<p>自然，这会重写提交历史，如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122041_903.png" alt=""></p>
<p><strong>注意，此时推送分支必须使用 -f 选项（译注：表示 force，不作检查强制重写）替换远程已有的 featureA 分支，因为新的 commit 并非原来的后续更新</strong>。当然你也可以直接推送到另一个新的分支上去，比如称作featureAv2。</p>
<p>再考虑另一种情形：管理员看过第二个分支后觉得思路新颖，但想请你改下具体实现。我们只需以当前 origin/master 分支为基准，开始一个新的特性分支featureBv2，然后把原来的 featureB 的更新拿过来，解决冲突，按要求重新实现部分代码，然后将此特性分支推送上去：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b featureBv2 origin/master</div><div class="line">$ git merge --no-commit --squash featureB</div><div class="line">$ (change implementation)</div><div class="line">$ git commit</div><div class="line">$ git push myfork featureBv2</div></pre></td></tr></table></figure>
<p>这里的 <code>--squash</code> 选项将目标分支上的所有更改全拿来应用到当前分支上，而 <code>--no-commit</code> 选项告诉 Git 此时无需自动生成和记录（合并）提交。这样，你就可以在原来代码基础上，继续工作，直到最后一起提交。</p>
<p>好了，现在可以请管理员抓取 featureBv2 上的最新代码了，如图</p>
<p><img src="http://static.open-open.com/lib/uploadImg/20120201/20120201122042_782.png" alt=""></p>
<h2 id="git工具"><a href="#git工具" class="headerlink" title="git工具"></a>git工具</h2><h3 id="祖先引用"><a href="#祖先引用" class="headerlink" title="祖先引用"></a>祖先引用</h3><p>另一种指明某次提交的常用方法是通过它的祖先。如果你在引用最后加上一个 <code>^</code>，Git 将其理解为此次提交的父提交。 假设你的工程历史是这样的：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ git log --pretty=format:<span class="string">'%h %s'</span> --graph</div><div class="line">* <span class="number">734713</span>b fixed refs handling, added gc auto, updated tests</div><div class="line">*   d921970 Merge commit <span class="string">'phedders/rdocs'</span></div><div class="line">|\  </div><div class="line">| * <span class="number">35</span>cfb2b Some rdoc changes</div><div class="line">* | <span class="number">1</span>c002dd added some blame and merge stuff</div><div class="line">|/  </div><div class="line">* <span class="number">1</span>c36188 ignore *.gem</div><div class="line">* <span class="number">9</span>b29157 add open3_detach to gemspec file list</div></pre></td></tr></table></figure>
<p>那么，想看上一次提交，你可以使用 <code>HEAD^</code>，意思是“HEAD 的父提交”：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git show HEAD^</div><div class="line">commit d921970aadf03b3cf0e71becdaab3147ba71cdef</div><div class="line">Merge: <span class="number">1</span>c002dd... <span class="number">35</span>cfb2b...</div><div class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</div><div class="line">Date:   Thu Dec <span class="number">11</span> <span class="number">15</span>:<span class="number">08</span>:<span class="number">43</span> <span class="number">2008</span> -<span class="number">0800</span></div><div class="line"></div><div class="line">    Merge commit <span class="string">'phedders/rdocs'</span></div></pre></td></tr></table></figure>
<p>你也可以在 <code>^</code> 后添加一个数字——例如，<code>d921970^2</code> 意思是“d921970 的第二父提交”。这种语法只在合并提交时有用，因为合并提交可能有多个父提交。第一父提交是你合并时所在分支，而第二父提交是你所合并的分支：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git show d921970^</div><div class="line">commit <span class="number">1</span>c002dd4b536e7479fe34593e72e6c6c1819e53b</div><div class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</div><div class="line">Date:   Thu Dec <span class="number">11</span> <span class="number">14</span>:<span class="number">58</span>:<span class="number">32</span> <span class="number">2008</span> -<span class="number">0800</span></div><div class="line"></div><div class="line">    added some blame and merge stuff</div><div class="line"></div><div class="line">$ git show d921970^<span class="number">2</span></div><div class="line">commit <span class="number">35</span>cfb2b795a55793d7cc56a6cc2060b4bb732548</div><div class="line">Author: Paul Hedderly &lt;paul+git@mjr.org&gt;</div><div class="line">Date:   Wed Dec <span class="number">10</span> <span class="number">22</span>:<span class="number">22</span>:<span class="number">03</span> <span class="number">2008</span> +<span class="number">0000</span></div><div class="line"></div><div class="line">    Some rdoc changes</div></pre></td></tr></table></figure>
<p>另外一个指明祖先提交的方法是 <code>~</code>。这也是指向第一父提交，所以 <code>HEAD~</code> 和 <code>HEAD^</code> 是等价的。当你指定数字的时候就明显不一样了。<code>HEAD~2</code> 是指“第一父提交的第一父提交”，也就是“祖父提交”——它会根据你指定的次数检索第一父提交。例如，在上面列出的历史记录里面，<code>HEAD~3</code> 会是</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git show HEAD~<span class="number">3</span></div><div class="line">commit <span class="number">1</span>c3618887afb5fbcbea25b7c013f4e2114448b8d</div><div class="line">Author: Tom Preston-Werner &lt;tom@mojombo.com&gt;</div><div class="line">Date:   Fri Nov <span class="number">7</span> <span class="number">13</span>:<span class="number">47</span>:<span class="number">59</span> <span class="number">2008</span> -<span class="number">0500</span></div><div class="line"></div><div class="line">    ignore *.gem</div></pre></td></tr></table></figure>
<h3 id="储藏（Stashing）"><a href="#储藏（Stashing）" class="headerlink" title="储藏（Stashing）"></a>储藏（Stashing）</h3><p>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是git stash命令。</p>
<p>“‘储藏”“可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p>
<h4 id="储藏你的工作"><a href="#储藏你的工作" class="headerlink" title="储藏你的工作"></a>储藏你的工作</h4><p>为了演示这一功能，你可以进入你的项目，在一些文件上进行工作，有可能还暂存其中一个变更。如果你运行 <code>git status</code>，你可以看到你的中间状态：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Changes to be committed:</span></div><div class="line"><span class="comment">#   (use "git reset HEAD &lt;file&gt;..." to unstage)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#      modified:   index.html</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Changed but not updated:</span></div><div class="line"><span class="comment">#   (use "git add &lt;file&gt;..." to update what will be committed)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#      modified:   lib/simplegit.rb</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<p>现在你想切换分支，但是你还不想提交你正在进行中的工作；所以你储藏这些变更。为了往堆栈推送一个新的储藏，只要运行 <code>git stash</code>：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git stash</div><div class="line">Saved working directory and index state \</div><div class="line">  <span class="string">"WIP on master: 049d078 added the index file"</span></div><div class="line">HEAD is now at <span class="number">049</span>d078 added the index file</div><div class="line">(To restore them type <span class="string">"git stash apply"</span>)</div></pre></td></tr></table></figure>
<p>你的工作目录就干净了：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line">nothing to commit (working directory clean)</div></pre></td></tr></table></figure>
<p>这时，你可以方便地切换到其他分支工作；你的变更都保存在栈上。要查看现有的储藏，你可以使用 <code>git stash list</code>：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div><div class="line">stash@&#123;<span class="number">0</span>&#125;: WIP on master: <span class="number">049</span>d078 added the index file</div><div class="line">stash@&#123;<span class="number">1</span>&#125;: WIP on master: c264051... Revert <span class="string">"added file_size"</span></div><div class="line">stash@&#123;<span class="number">2</span>&#125;: WIP on master: <span class="number">21</span>d80a5... added number to log</div></pre></td></tr></table></figure>
<p>在这个案例中，之前已经进行了两次储藏，所以你可以访问到三个不同的储藏。你可以重新应用你刚刚实施的储藏，所采用的命令就是之前在原始的 stash 命令的帮助输出里提示的：<code>git stash apply</code>。如果你想应用更早的储藏，你可以通过名字指定它，像这样：git <code>stash apply stash@{2}</code>。如果你不指明，Git 默认使用最近的储藏并尝试应用它：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git stash apply</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Changed but not updated:</span></div><div class="line"><span class="comment">#   (use "git add &lt;file&gt;..." to update what will be committed)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#      modified:   index.html</span></div><div class="line"><span class="comment">#      modified:   lib/simplegit.rb</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<p>你可以看到 Git 重新修改了你所储藏的那些当时尚未提交的文件。在这个案例里，你尝试应用储藏的工作目录是干净的，并且属于同一分支；但是一个干净的工作目录和应用到相同的分支上并不是应用储藏的必要条件。你可以在其中一个分支上保留一份储藏，随后切换到另外一个分支，再重新应用这些变更。在工作目录里包含已修改和未提交的文件时，你也可以应用储藏——Git 会给出归并冲突如果有任何变更无法干净地被应用。</p>
<p>对文件的变更被重新应用，但是被暂存的文件没有重新被暂存。想那样的话，你必须在运行 git stash apply 命令时带上一个 –index 的选项来告诉命令重新应用被暂存的变更。如果你是这么做的，你应该已经回到你原来的位置：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git stash apply --index</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Changes to be committed:</span></div><div class="line"><span class="comment">#   (use "git reset HEAD &lt;file&gt;..." to unstage)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#      modified:   index.html</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Changed but not updated:</span></div><div class="line"><span class="comment">#   (use "git add &lt;file&gt;..." to update what will be committed)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#      modified:   lib/simplegit.rb</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<p>apply 选项只尝试应用储藏的工作——储藏的内容仍然在栈上。要移除它，你可以运行 <code>git stash drop</code>，加上你希望移除的储藏的名字：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div><div class="line">stash@&#123;<span class="number">0</span>&#125;: WIP on master: <span class="number">049</span>d078 added the index file</div><div class="line">stash@&#123;<span class="number">1</span>&#125;: WIP on master: c264051... Revert <span class="string">"added file_size"</span></div><div class="line">stash@&#123;<span class="number">2</span>&#125;: WIP on master: <span class="number">21</span>d80a5... added number to log</div><div class="line">$ git stash drop stash@&#123;<span class="number">0</span>&#125;</div><div class="line">Dropped stash@&#123;<span class="number">0</span>&#125; (<span class="number">364</span>e91f3f268f0900bc3ee613f9f733e82aaed43)</div></pre></td></tr></table></figure>
<p>你也可以运行 <code>git stash pop</code> 来重新应用储藏，同时立刻将其从堆栈中移走。</p>
<h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><p>经常有这样的事情，当你在一个项目上工作时，你需要在其中使用另外一个项目。也许它是一个第三方开发的库或者是你独立开发和并在多个父项目中使用的。这个场景下一个常见的问题产生了：你想将两个项目单独处理但是又需要在其中一个中使用另外一个。</p>
<p>这里有一个例子。假设你在开发一个网站，为之创建Atom源。你不想编写一个自己的Atom生成代码，而是决定使用一个库。你可能不得不像CPAN install或者Ruby gem一样包含来自共享库的代码，或者将代码拷贝到你的项目树中。如果采用包含库的办法，那么不管用什么办法都很难去定制这个库，部署它就更加困难了，因为你必须确保每个客户都拥有那个库。把代码包含到你自己的项目中带来的问题是，当上游被修改时，任何你进行的定制化的修改都很难归并。</p>
<p>Git 通过子模块处理这个问题。子模块允许你将一个 Git 仓库当作另外一个Git仓库的子目录。这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。</p>
<h4 id="子模块初步"><a href="#子模块初步" class="headerlink" title="子模块初步"></a>子模块初步</h4><p>假设你想把 Rack 库（一个 Ruby 的 web 服务器网关接口）加入到你的项目中，可能既要保持你自己的变更，又要延续上游的变更。首先你要把外部的仓库克隆到你的子目录中。你通过<code>git submodule add</code>将外部项目加为子模块：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git submodule add git://github.com/chneukirchen/rack.git rack</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /opt/subtest/rack/.git/</div><div class="line">remote: Counting objects: <span class="number">3181</span>, done.</div><div class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">1534</span>/<span class="number">1534</span>), done.</div><div class="line">remote: Total <span class="number">3181</span> (delta <span class="number">1951</span>), reused <span class="number">2623</span> (delta <span class="number">1603</span>)</div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">3181</span>/<span class="number">3181</span>), <span class="number">675.42</span> KiB | <span class="number">422</span> KiB/s, done.</div><div class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">1951</span>/<span class="number">1951</span>), done.</div></pre></td></tr></table></figure>
<p>现在你就在项目里的rack子目录下有了一个 Rack 项目。你可以进入那个子目录，进行变更，加入你自己的远程可写仓库来推送你的变更，从原始仓库拉取和归并等等。如果你在加入子模块后立刻运行<code>git status</code>，你会看到下面两项：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Changes to be committed:</span></div><div class="line"><span class="comment">#   (use "git reset HEAD &lt;file&gt;..." to unstage)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#      new file:   .gitmodules</span></div><div class="line"><span class="comment">#      new file:   rack</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<p>首先你注意到有一个<code>.gitmodules</code>文件。这是一个配置文件，保存了项目 URL 和你拉取到的本地子目录</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat .gitmodules </div><div class="line">[submodule <span class="string">"rack"</span>]</div><div class="line">      path = rack</div><div class="line">      url = git://github.com/chneukirchen/rack.git</div></pre></td></tr></table></figure>
<p>如果你有多个子模块，这个文件里会有多个条目。很重要的一点是这个文件跟其他文件一样也是处于版本控制之下的，就像你的<code>.gitignore</code>文件一样。它跟项目里的其他文件一样可以被推送和拉取。这是其他克隆此项目的人获知子模块项目来源的途径。</p>
<p><code>git status</code>的输出里所列的另一项目是 rack 。如果你运行在那上面运行<code>git diff</code>，会发现一些有趣的东西：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git diff --cached rack</div><div class="line">diff --git a/rack b/rack</div><div class="line">new file mode <span class="number">160000</span></div><div class="line">index <span class="number">0000000</span>..<span class="number">08</span>d709f</div><div class="line">--- /dev/null</div><div class="line">+++ b/rack</div><div class="line">@@ -<span class="number">0</span>,<span class="number">0</span> +<span class="number">1</span> @@</div><div class="line">+Subproject commit <span class="number">08</span>d709f78b8c5b0fbeb7821e37fa53e69afcf433</div></pre></td></tr></table></figure>
<p>尽管rack是你工作目录里的子目录，但 Git 把它视作一个子模块，当你不在那个目录里时并不记录它的内容。取而代之的是，Git 将它记录成来自那个仓库的一个特殊的提交。当你在那个子目录里修改并提交时，子项目会通知那里的 HEAD 已经发生变更并记录你当前正在工作的那个提交；通过那样的方法，当其他人克隆此项目，他们可以重新创建一致的环境。</p>
<p>这是关于子模块的重要一点：你记录他们当前确切所处的提交。你不能记录一个子模块的master或者其他的符号引用。</p>
<p>当你提交时，会看到类似下面的：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git commit -m <span class="string">'first commit with submodule rack'</span></div><div class="line">[master <span class="number">0550271</span>] first commit with submodule rack</div><div class="line"> <span class="number">2</span> files changed, <span class="number">4</span> insertions(+), <span class="number">0</span> deletions(-)</div><div class="line"> create mode <span class="number">100644</span> .gitmodules</div><div class="line"> create mode <span class="number">160000</span> rack</div></pre></td></tr></table></figure>
<p>注意 rack 条目的 160000 模式。这在Git中是一个特殊模式，基本意思是你将一个提交记录为一个目录项而不是子目录或者文件。</p>
<p>你可以将rack目录当作一个独立的项目，保持一个指向子目录的最新提交的指针然后反复地更新上层项目。所有的Git命令都在两个子目录里独立工作：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git log -<span class="number">1</span></div><div class="line">commit <span class="number">0550271328</span>a0038865aad6331e620cd7238601bb</div><div class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</div><div class="line">Date:   Thu Apr <span class="number">9</span> <span class="number">09</span>:<span class="number">03</span>:<span class="number">56</span> <span class="number">2009</span> -<span class="number">0700</span></div><div class="line"></div><div class="line">    first commit with submodule rack</div><div class="line">$ cd rack/</div><div class="line">$ git log -<span class="number">1</span></div><div class="line">commit <span class="number">08</span>d709f78b8c5b0fbeb7821e37fa53e69afcf433</div><div class="line">Author: Christian Neukirchen &lt;chneukirchen@gmail.com&gt;</div><div class="line">Date:   Wed Mar <span class="number">25</span> <span class="number">14</span>:<span class="number">49</span>:<span class="number">04</span> <span class="number">2009</span> +<span class="number">0100</span></div><div class="line"></div><div class="line">    Document version change</div></pre></td></tr></table></figure>
<h4 id="克隆一个带子模块的项目"><a href="#克隆一个带子模块的项目" class="headerlink" title="克隆一个带子模块的项目"></a>克隆一个带子模块的项目</h4><p>这里你将克隆一个带子模块的项目。当你接收到这样一个项目，你将得到了包含子项目的目录，但里面没有文件：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git clone git://github.com/schacon/myproject.git</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /opt/myproject/.git/</div><div class="line">remote: Counting objects: <span class="number">6</span>, done.</div><div class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">4</span>/<span class="number">4</span>), done.</div><div class="line">remote: Total <span class="number">6</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">6</span>/<span class="number">6</span>), done.</div><div class="line">$ cd myproject</div><div class="line">$ ls -l</div><div class="line">total <span class="number">8</span></div><div class="line">-rw-r--r--  <span class="number">1</span> schacon  admin   <span class="number">3</span> Apr  <span class="number">9</span> <span class="number">09</span>:<span class="number">11</span> README</div><div class="line">drwxr-xr-x  <span class="number">2</span> schacon  admin  <span class="number">68</span> Apr  <span class="number">9</span> <span class="number">09</span>:<span class="number">11</span> rack</div><div class="line">$ ls rack/</div><div class="line">$</div></pre></td></tr></table></figure>
<p>rack目录存在了，但是是空的。你必须运行两个命令：<code>git submodule init</code>来初始化你的本地配置文件，<code>git submodule update</code>来从那个项目拉取所有数据并检出你上层项目里所列的合适的提交：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git submodule init</div><div class="line">Submodule <span class="string">'rack'</span> (git://github.com/chneukirchen/rack.git) registered <span class="keyword">for</span> path <span class="string">'rack'</span></div><div class="line">$ git submodule update</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> /opt/myproject/rack/.git/</div><div class="line">remote: Counting objects: <span class="number">3181</span>, done.</div><div class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">1534</span>/<span class="number">1534</span>), done.</div><div class="line">remote: Total <span class="number">3181</span> (delta <span class="number">1951</span>), reused <span class="number">2623</span> (delta <span class="number">1603</span>)</div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">3181</span>/<span class="number">3181</span>), <span class="number">675.42</span> KiB | <span class="number">173</span> KiB/s, done.</div><div class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">1951</span>/<span class="number">1951</span>), done.</div><div class="line">Submodule path <span class="string">'rack'</span>: checked out <span class="string">'08d709f78b8c5b0fbeb7821e37fa53e69afcf433'</span></div></pre></td></tr></table></figure>
<p>现在你的rack子目录就处于你先前提交的确切状态了。如果另外一个开发者变更了 rack 的代码并提交，你拉取那个引用然后归并之，将得到稍有点怪异的东西：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git merge origin/master</div><div class="line">Updating <span class="number">0550271</span>..<span class="number">85</span>a3eee</div><div class="line">Fast forward</div><div class="line"> rack |    <span class="number">2</span> +-</div><div class="line"> <span class="number">1</span> files changed, <span class="number">1</span> insertions(+), <span class="number">1</span> deletions(-)</div><div class="line">[master*]$ git status</div><div class="line"><span class="comment"># On branch master</span></div><div class="line"><span class="comment"># Changed but not updated:</span></div><div class="line"><span class="comment">#   (use "git add &lt;file&gt;..." to update what will be committed)</span></div><div class="line"><span class="comment">#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment">#      modified:   rack</span></div><div class="line"><span class="comment">#</span></div></pre></td></tr></table></figure>
<p>你归并来的仅仅上是一个指向你的子模块的指针；但是它并不更新你子模块目录里的代码，所以看起来你的工作目录处于一个临时状态：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git diff</div><div class="line">diff --git a/rack b/rack</div><div class="line">index <span class="number">6</span>c5e70b..<span class="number">08</span>d709f <span class="number">160000</span></div><div class="line">--- a/rack</div><div class="line">+++ b/rack</div><div class="line">@@ -<span class="number">1</span> +<span class="number">1</span> @@</div><div class="line">-Subproject commit <span class="number">6</span>c5e70b984a60b3cecd395edd5b48a7575bf58e0</div><div class="line">+Subproject commit <span class="number">08</span>d709f78b8c5b0fbeb7821e37fa53e69afcf433</div></pre></td></tr></table></figure>
<p>事情就是这样，因为你所拥有的子模块的指针并对应于子模块目录的真实状态。为了修复这一点，你必须再次运行<code>git submodule update</code>：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git submodule update</div><div class="line">remote: Counting objects: <span class="number">5</span>, done.</div><div class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</div><div class="line">remote: Total <span class="number">3</span> (delta <span class="number">1</span>), reused <span class="number">2</span> (delta <span class="number">0</span>)</div><div class="line">Unpacking objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</div><div class="line">From git@github.com:schacon/rack</div><div class="line">   <span class="number">08</span>d709f..<span class="number">6</span>c5e70b  master     -&gt; origin/master</div><div class="line">Submodule path <span class="string">'rack'</span>: checked out <span class="string">'6c5e70b984a60b3cecd395edd5b48a7575bf58e0'</span></div></pre></td></tr></table></figure>
<p>每次你从主项目中拉取一个子模块的变更都必须这样做。看起来很怪但是管用。</p>
<p>一个常见问题是当开发者对子模块做了一个本地的变更但是并没有推送到公共服务器。然后他们提交了一个指向那个非公开状态的指针然后推送上层项目。当其他开发者试图运行<code>git submodule update</code>，那个子模块系统会找不到所引用的提交，因为它只存在于第一个开发者的系统中。如果发生那种情况，你会看到类似这样的错误：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git submodule update</div><div class="line">fatal: reference isn’t a tree: <span class="number">6</span>c5e70b984a60b3cecd395edd5b48a7575bf58e0</div><div class="line">Unable to checkout <span class="string">'6c5e70b984a60b3cecd395edd5ba7575bf58e0'</span> <span class="keyword">in</span> submodule path <span class="string">'rack'</span></div></pre></td></tr></table></figure>
<p>你不得不去查看谁最后变更了子模块</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git log -<span class="number">1</span> rack</div><div class="line">commit <span class="number">85</span>a3eee996800fcfa91e2119372dd4172bf76678</div><div class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</div><div class="line">Date:   Thu Apr <span class="number">9</span> <span class="number">09</span>:<span class="number">19</span>:<span class="number">14</span> <span class="number">2009</span> -<span class="number">0700</span></div><div class="line"></div><div class="line">    added a submodule reference I will never make public. hahahahaha!</div></pre></td></tr></table></figure>
<p>然后，你给那个家伙发电子邮件说他一通。</p>
<h2 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h2><h3 id="格式化与空白"><a href="#格式化与空白" class="headerlink" title="格式化与空白"></a>格式化与空白</h3><p>格式化与空白是许多开发人员在协作时，特别是在跨平台情况下，遇到的令人头疼的细小问题。由于编辑器的不同或者Windows程序员在跨平台项目中的文件行尾加入了回车换行符，一些细微的空格变化会不经意地进入大家合作的工作或提交的补丁中。不用怕，Git 的一些配置选项会帮助你解决这些问题。</p>
<h4 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h4><p>假如你正在Windows上写程序，又或者你正在和其他人合作，他们在Windows上编程，而你却在其他系统上，在这些情况下，你可能会遇到行尾结束符问题。这是因为Windows使用回车和换行两个字符来结束一行，而Mac和Linux只使用换行一个字符。虽然这是小问题，但它会极大地扰乱跨平台协作。</p>
<p>Git可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。用<code>core.autocrlf</code>来打开此项功能，如果是在Windows系统上，把它设置成true，这样当签出代码时，LF会被转换成CRLF：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global core.autocrlf true</div></pre></td></tr></table></figure>
<p>Linux或Mac系统使用LF作为行结束符，因此你不想 Git 在签出文件时进行自动的转换；当一个以CRLF为行结束符的文件不小心被引入时你肯定想进行修正，把<code>core.autocrlf</code>设置成input来告诉 Git 在提交时把CRLF转换成LF，签出时不转换：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global core.autocrlf input</div></pre></td></tr></table></figure>
<p>这样会在Windows系统上的签出文件中保留CRLF，会在Mac和Linux系统上，包括仓库中保留LF。</p>
<p>如果你是Windows程序员，且正在开发仅运行在Windows上的项目，可以设置false取消此功能，把回车符记录在库中：</p>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --global core.autocrlf false</div></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>git的基本使用就是这样。其中，特别注意fetch与pull的区别，merge与rebase区别。</p>
<p>fetch是将远程仓库的不同拉去到本地，但并不自动合并</p>
<p>pull是将远程仓库的不同拉去到本地，并自动合并</p>
<p>merge合并是基于合并的几个分支的不同产生一个新的提交，分支数目没有减少</p>
<p>rebase是在选定的基提交上做分支不同提交的重演。像是在使分支减少</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul>
<li><a href="http://www.open-open.com/lib/view/open1328069609436.html" target="_blank" rel="external">Git详解之一 Git起步</a></li>
<li><a href="http://www.open-open.com/lib/view/open1328069733264.html" target="_blank" rel="external">Git详解之二 Git基础</a></li>
<li><a href="http://www.open-open.com/lib/view/open1328069889514.html" target="_blank" rel="external">Git详解之三 Git分支</a></li>
<li><a href="http://www.open-open.com/lib/view/open1328069988843.html" target="_blank" rel="external">Git详解之四 服务器上的Git</a></li>
<li><a href="http://www.open-open.com/lib/view/open1328070090108.html" target="_blank" rel="external">Git详解之五 分布式Git</a></li>
<li><a href="http://www.open-open.com/lib/view/open1328070367499.html" target="_blank" rel="external">Git详解之六 Git工具</a></li>
<li><a href="http://www.open-open.com/lib/view/open1328070404827.html" target="_blank" rel="external">Git详解之七 自定义Git</a></li>
<li><a href="http://www.open-open.com/lib/view/open1328070454218.html" target="_blank" rel="external">Git详解之八 Git与其他系统</a></li>
<li><a href="http://www.open-open.com/lib/view/open1328070620202.html" target="_blank" rel="external">Git详解之九 Git内部原理</a></li>
</ul>]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[VS Code搭建Python开发环境]]></title>
      <url>https://xin053.github.io/2016/06/11/VS%20Code%E6%90%AD%E5%BB%BAPython%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="编辑器感想"><a href="#编辑器感想" class="headerlink" title="编辑器感想"></a>编辑器感想</h2><p>贴吧总是看到</p>
<blockquote>
<p>高手都是用记事本写代码的</p>
</blockquote>
<p>我只想表示：那你慢慢用记事本吧，我用<code>VS Code</code>。</p>
<p>作为码农，基本每天都要敲代码，这就是命吧。一般较大的项目都会用<code>IDE</code>进行开发：</p>
<ul>
<li>Win32汇编：RadASM 2.0，RadASM 3.0，WinAsm</li>
<li>C/C++：VC++6.0，Dev-c++，CodeBlocks，VS2015</li>
<li>Java：Eclipse，MyEclipse，IntelliJ IDEA</li>
<li>Android：Eclipse ADT，Android Studio</li>
<li>Python：PyCharm</li>
</ul>
<p>以上基本是我用过的全部<code>IDE</code>，对于开发周期较长的项目，用<code>IDE</code>开发确实比较方便，尤其配合<code>github</code>使用，例如我最喜欢的<code>PyCharm</code>，<code>Android Studio</code>，<code>IntelliJ IDEA</code>这一系列具有方便<code>github</code>功能的<code>IDE</code>，还有号称世界上最强大的IDE：<code>VS</code></p>
<p>但是我只想说，电脑配置不够，占用内存太高，用<code>AS</code>编译一个<code>android</code>项目都要几分钟。所以一般对于小<code>demo</code>，或者小的项目，找一个比较实用的编辑器能提供很多帮助。</p>
<a id="more"></a>
<p>下面说下常用的几个编辑器：</p>
<ul>
<li>Vim：linux环境下的神器，搭个完整功能的IDE出来妥妥的。</li>
<li>Emacs：我是操作系统，刷微博什么的都不是事。</li>
<li>Atom：拥有众多插件，非常多，提供很多便捷，markdown的代码块的预览都能显示代码高亮，但是占用内存太大是硬伤。用这个进行开发基本可以不使用大型IDE了。</li>
<li>Sublime Text：现在最新版本是3系列，不过我看到很多人还用2系列进行开发，也有很多插件，不过要钱，得自己找破解版。这个也是我用过时间最长的编辑器。</li>
<li>VS Code：在我接触VS Code之后，基本就没再使用Sublime Text了，原因就不解释。体验过才知道VS Code有多强大。毕竟出自微软。</li>
</ul>
<p>知乎上有个<code>Atom</code>、<code>Sublime Text</code>、<code>VSCode</code> 三者的比较：</p>
<p><a href="https://www.zhihu.com/question/41857899" target="_blank" rel="external">2016年看，Atom、Sublime Text、VSCode 三者比较，各有哪些优势和弱势？</a></p>
<p><code>VS Code</code>刚开源的时候还看过一篇文章，讲的是<code>VS Code</code>如何血虐<code>Sublime Text</code>，找不到链接了。</p>
<h2 id="VS-Code简单介绍"><a href="#VS-Code简单介绍" class="headerlink" title="VS Code简单介绍"></a>VS Code简单介绍</h2><p>微软开源项目，一个极为强大的第三方编辑器，目前最新版本为1.2</p>
<p>别的不多少，晒下界面：</p>
<p><img src="http://i.imgur.com/mgejfhd.png" alt=""></p>
<p><code>VS Code</code>的分屏，<code>git</code>，调试，常用插件以及基本配置和使用就不说了，附上官网链接：</p>
<p><a href="https://code.visualstudio.com" target="_blank" rel="external">https://code.visualstudio.com</a></p>
<h2 id="配置Python开发环境"><a href="#配置Python开发环境" class="headerlink" title="配置Python开发环境"></a>配置Python开发环境</h2><p>简介的<code>Python</code>搭配简洁的<code>VS Code</code>，真是绝配，比<code>Python</code>搭配<code>Sublime Text</code>方便多了。</p>
<p><code>VS Code</code>是有工作空间的概念的，用<code>VS Code</code>打开一个文件夹，该文件夹就可以算是一个工作空间，<code>VS Code</code>会在该文件下新建<code>.vscode</code>文件夹，里面存放的是该工作空间的配置文件，所以以后在该工作空间下的任何代码都会使用该配置文件。</p>
<p>首先我们需要下载<code>Python</code>，并将<code>Python</code>加到环境变量<code>Path</code>中。</p>
<p>然后打开<code>VS Code</code>，安装<code>python</code>插件，具体怎么安装，看下面链接：</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python" target="_blank" rel="external">VS Code Python插件</a></p>
<p>该插件提供<code>python</code>调试，<code>Lint</code>，以及代码补全等功能，具体看上面的链接</p>
<p>话说插件的更新不会删除老版本，希望<code>VS Code</code>后期能够改进吧：</p>
<p><img src="http://i.imgur.com/4lpO5Wj.png" alt=""></p>
<h3 id="配置Python运行环境"><a href="#配置Python运行环境" class="headerlink" title="配置Python运行环境"></a>配置Python运行环境</h3><p><code>VS Code</code>有<code>task</code>的概念，具体看官网，在<code>.vscode</code>文件夹下有三个文件：</p>
<p><img src="http://i.imgur.com/qfBXugz.png" alt=""></p>
<p>其中<code>tasks.json</code>就是配置运行环境的，<code>settings.json</code>下的配置能够覆盖<code>VS Code</code>的默认配置，<code>launch.json</code>配置调试环境。</p>
<p>下面是<code>tasks.json</code>的配置</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"python"</span>,</div><div class="line">    <span class="attr">"isShellCommand"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"args"</span>: [<span class="string">"$&#123;file&#125;"</span>],</div><div class="line">    <span class="attr">"showOutput"</span>: <span class="string">"always"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参数都很好理解，其中<code>command</code>是<code>python</code>可执行文件的路径，如果配置到了<code>path</code>中，就可以直接写<code>python</code>，<code>args</code>就是运行的参数，也就是当前打开的文件名。</p>
<p>配置好运行环境后，按下<code>ctrl + shift + B</code>就可以执行了</p>
<p><img src="http://i.imgur.com/L4ZKdUa.png" alt=""></p>
<h3 id="配置Python调试环境"><a href="#配置Python调试环境" class="headerlink" title="配置Python调试环境"></a>配置Python调试环境</h3><p><code>launch.json</code>的配置如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</div><div class="line">    <span class="attr">"configurations"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Python"</span>,</div><div class="line">            <span class="attr">"type"</span>: <span class="string">"python"</span>,</div><div class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">            <span class="attr">"stopOnEntry"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;file&#125;"</span>,</div><div class="line">            <span class="attr">"debugOptions"</span>: [</div><div class="line">                <span class="string">"WaitOnAbnormalExit"</span>,</div><div class="line">                <span class="string">"WaitOnNormalExit"</span>,</div><div class="line">                <span class="string">"RedirectOutput"</span></div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Python Console App"</span>,</div><div class="line">            <span class="attr">"type"</span>: <span class="string">"python"</span>,</div><div class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">            <span class="attr">"stopOnEntry"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;file&#125;"</span>,</div><div class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"debugOptions"</span>: [</div><div class="line">                <span class="string">"WaitOnAbnormalExit"</span>,</div><div class="line">                <span class="string">"WaitOnNormalExit"</span></div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Django"</span>,</div><div class="line">            <span class="attr">"type"</span>: <span class="string">"python"</span>,</div><div class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">            <span class="attr">"stopOnEntry"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/manage.py"</span>,</div><div class="line">            <span class="attr">"args"</span>: [</div><div class="line">                <span class="string">"runserver"</span>,</div><div class="line">                <span class="string">"--noreload"</span></div><div class="line">            ],</div><div class="line">            <span class="attr">"debugOptions"</span>: [</div><div class="line">                <span class="string">"WaitOnAbnormalExit"</span>,</div><div class="line">                <span class="string">"WaitOnNormalExit"</span>,</div><div class="line">                <span class="string">"RedirectOutput"</span>,</div><div class="line">                <span class="string">"DjangoDebugging"</span></div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Watson"</span>,</div><div class="line">            <span class="attr">"type"</span>: <span class="string">"python"</span>,</div><div class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">            <span class="attr">"stopOnEntry"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/console.py"</span>,</div><div class="line">            <span class="attr">"args"</span>: [</div><div class="line">                <span class="string">"dev"</span>,</div><div class="line">                <span class="string">"runserver"</span>,</div><div class="line">                <span class="string">"--noreload=True"</span></div><div class="line">            ],</div><div class="line">            <span class="attr">"debugOptions"</span>: [</div><div class="line">                <span class="string">"WaitOnAbnormalExit"</span>,</div><div class="line">                <span class="string">"WaitOnNormalExit"</span>,</div><div class="line">                <span class="string">"RedirectOutput"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果<code>python</code>可执行文件不在<code>path</code>中，就需要添加<code>pythonPath</code>属性配置，如：</p>
<pre><code>&quot;pythonPath&quot;: &quot;D:\\Python 3.5\\python.exe&quot;
</code></pre><p>点左边蜘蛛(调试)按钮，设置好断点，就可以开开心心调试了，附上截图：</p>
<p><img src="http://i.imgur.com/EMelrIc.png" alt=""></p>
<p>有没有感受到 <code>VS Code</code>加<code>Python</code>插件组合的强大呢？</p>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> VS Code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DrrrClient源码解读]]></title>
      <url>https://xin053.github.io/2016/06/07/DrrrClient%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="fork的PyQt5项目"><a href="#fork的PyQt5项目" class="headerlink" title="fork的PyQt5项目"></a>fork的PyQt5项目</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>近来想找个<code>PyQt</code>项目好好学习学习，毕竟正在学<code>PyQt5</code>，刚去官网下了<code>PyQt5.6</code>,刚好<code>PyQt5.6</code>支持<code>python3.5</code>,电脑上又有<code>python3.5.1</code>，然而关于<code>PyQt5</code>，网上的资料实在是太少了，就连官网的文档大多都是转向<code>Qt</code>的<code>c++</code>文档，我也是醉了。</p>
<p>找到一个用<code>python2.7+PyQt5</code>(低于5.6)的版本写的一个针对<a href="http://drrr.com/" target="_blank" rel="external">Drrr chat room </a>网站写的客户端，界面如下：</p>
<p><img src="http://i.imgur.com/ji5KPOJ.png" alt=""></p>
<a id="more"></a>
<p>想好好研读下人家的代码，并向<code>python3.5.1+PyQt5.6</code>移植，对于<code>Python</code>2到3的移植，由于源代码比较简单，就1000+行代码，而且就一个<code>py</code>文件，界面和功能都在这个文件中，基本上对于<code>python</code>的移植就是将：</p>
<pre><code>print &quot;something&quot;
</code></pre><p>改为：</p>
<pre><code>print(&quot;something&quot;)
</code></pre><p>令人头疼的是<code>PyQt</code>的移植，只想说版本之间兼容性无话可说，有些内容差距真是太大了，尤其是<code>QtWebKit</code> 到 <code>QtWebEngine</code>的移植，表示官网文档都快被翻烂了，也就是根据函数名猜其功能，实在是受不了了。附上官网的这篇文章，供<code>PyQt</code>移植用：</p>
<p><a href="https://wiki.qt.io/Porting_from_QtWebKit_to_QtWebEngine" target="_blank" rel="external">Porting from QtWebKit to QtWebEngine</a></p>
<p>原作者<a href="https://github.com/harry159821/DrrrClient" target="_blank" rel="external">github</a></p>
<p>看的出来，是作者的练手作品，作者还做了<code>PyQt4</code>到<code>PyQt5</code>的移植，主要也就是信号与槽函数建立连接的方式。大体来说整个程序先自绘窗口，然后中间窗口是个<code>QWebView</code>，确实像作者所言大体是个浏览器，但是依然还是有很多值得学习的地方。下面开始源码解读</p>
<h3 id="大体描述"><a href="#大体描述" class="headerlink" title="大体描述"></a>大体描述</h3><p>目录结构比较简单：</p>
<p><img src="http://i.imgur.com/e6d0XHJ.png" alt=""></p>
<p><code>Shot</code>目录是几个截图，不重要，<code>img</code>目录是项目需要的图片和几个音频文件，<code>ini</code>配置文件存放用户名和语言等配置信息，不重要，<code>Makefile.py</code>是<code>py2exe</code>用于打包整个项目所写的配置文件(目前<code>python3.5</code>的项目不能用<code>py2exe</code>打包，可以用<code>pyInstaller</code>)，不重要，<code>bat</code>是执行打包，不重要。唯一重要的也就是<code>DrrrChatRoom.py</code>这个文件，代码总共1000+行，也不是特别麻烦，程序有不少注释，结构比较清晰，如果把界面和功能代码分离那就更好了。</p>
<h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><p><code>labelBtn</code>类：</p>
<pre><code>class labelBtn(QtWidgets.QLabel):
    clicked = QtCore.pyqtSignal(str)
    Entered = QtCore.pyqtSignal(str)
    Leaved = QtCore.pyqtSignal(str)
    Moved = QtCore.pyqtSignal(str,int,int)

    def __init__(self,name,timeoutset=None,parent=None):
        super(labelBtn,self).__init__()
        self.setMouseTracking(True)
        self.name = name

    def mouseReleaseEvent(self,event):
        self.clicked.emit(self.name)

    def mouseMoveEvent(self,event):
        self.Moved.emit(self.name,event.globalPos().x(),event.globalPos().y())

    def enterEvent(self,event):
        self.Entered.emit(self.name)

    def leaveEvent(self,event):
        self.Leaved.emit(self.name)
</code></pre><p>这个类是作者用来自定义窗口右上角最大化，最小化，关闭三个按钮，类中定义了四个信号，并重写四个事件，分别<code>emit</code>这四个信号。</p>
<p><code>FrameLessTransparentWindow</code>类：</p>
<pre><code>class FrameLessTransparentWindow(QtWidgets.QMainWindow):

    def __init__(self):...

    def minFunc(self,name):...

    def showMinimized2(self):...

    def maxFunc(self,name):...

    def closeFunc(self,name):...

    def exitFunc(self):...

    def buttonEnterFunc(self,name):...

    def buttonLeavedFunc(self,name):...

    def mousePressEvent(self, event):...

    def mouseMoveEvent(self, event):...

    def leaveEvent(self,event):...
</code></pre><p>这个类是主要窗口的基类，里面都是些通用函数，顾名思义就知道他们是干什么用的。</p>
<p><code>ShadowsWindow</code>类</p>
<pre><code>class ShadowsWindow(FrameLessTransparentWindow):
    def __init__(self):
        super(ShadowsWindow, self).__init__()
        self.setWindowFlags(Qt.FramelessWindowHint)  #去掉窗口标题栏
        self.setAttribute(Qt.WA_TranslucentBackground)   #窗体标题栏不透明,背景透明
        self.SHADOW_WIDTH=15

    def drawShadow(self,painter):
        self.pixmaps=[]
        self.pixmaps.append(&quot;./img/left_top.png&quot;)
        self.pixmaps.append(&quot;./img/left_bottom.png&quot;)
        self.pixmaps.append(&quot;./img/right_top.png&quot;)
        self.pixmaps.append(&quot;./img/right_bottom.png&quot;)
        self.pixmaps.append(&quot;./img/top_mid.png&quot;)
        self.pixmaps.append(&quot;./img/bottom_mid.png&quot;)
        self.pixmaps.append(&quot;./img/left_mid.png&quot;)
        self.pixmaps.append(&quot;./img/right_mid.png&quot;)
        painter.drawPixmap(0, 0, 
            self.SHADOW_WIDTH, self.SHADOW_WIDTH, QPixmap(self.pixmaps[0]))   # 左上角
        painter.drawPixmap(self.width()-self.SHADOW_WIDTH, 0, 
            self.SHADOW_WIDTH, self.SHADOW_WIDTH, QPixmap(self.pixmaps[2]))   # 右上角
        painter.drawPixmap(0,self.height()-self.SHADOW_WIDTH, 
            self.SHADOW_WIDTH, self.SHADOW_WIDTH, QPixmap(self.pixmaps[1]))   # 左下角
        painter.drawPixmap(self.width()-self.SHADOW_WIDTH, self.height()-self.SHADOW_WIDTH, 
            self.SHADOW_WIDTH, self.SHADOW_WIDTH, QPixmap(self.pixmaps[3]))  # 右下角
        painter.drawPixmap(0, self.SHADOW_WIDTH, self.SHADOW_WIDTH, 
            self.height()-2*self.SHADOW_WIDTH, 
            QPixmap(self.pixmaps[6]).scaled(self.SHADOW_WIDTH, self.height()-2*self.SHADOW_WIDTH)) # 左
        painter.drawPixmap(self.width()-self.SHADOW_WIDTH, self.SHADOW_WIDTH, 
            self.SHADOW_WIDTH, self.height()-2*self.SHADOW_WIDTH, 
            QPixmap(self.pixmaps[7]).scaled(self.SHADOW_WIDTH, self.height()- 2*self.SHADOW_WIDTH)) # 右
        painter.drawPixmap(self.SHADOW_WIDTH, 0, self.width()-2*self.SHADOW_WIDTH, self.SHADOW_WIDTH, 
            QPixmap(self.pixmaps[4]).scaled(self.width()-2*self.SHADOW_WIDTH, self.SHADOW_WIDTH)) # 上
        painter.drawPixmap(self.SHADOW_WIDTH, 
            self.height()-self.SHADOW_WIDTH, 
            self.width()-2*self.SHADOW_WIDTH, 
            self.SHADOW_WIDTH, QPixmap(self.pixmaps[5]).scaled(self.width()-2*self.SHADOW_WIDTH, 
            self.SHADOW_WIDTH))   # 下        

    def paintEvent(self, event):
        painter = QPainter(self)
        self.drawShadow(painter)
        painter.setPen(Qt.NoPen)
        painter.setBrush(Qt.white)
</code></pre><p><code>ShadowsWindow</code>窗口类继承自<code>FrameLessTransparentWindow</code>，没有标题栏，客户区背景透明，重写了绘图事件，手动绘制了窗口的四个角，和上下左右的阴影，所以这个类取名为<code>shadow</code></p>
<p><code>titleBar</code>类</p>
<pre><code>class titleBar(QWidget):

    def __init__(self,parent=None):...

    def drawShadow(self,painter):...

    def paintEvent(self, event):...

    def enterEvent(self,event):...
</code></pre><p>这个类画的是窗口标题栏，重写绘图事件，并在标题栏窗口边上画阴影就不说了，具体来看下构造函数：</p>
<p>首先设置好长宽等属性后，通过：</p>
<pre><code>self.setStyleSheet(...)
</code></pre><p>设置一些样式。</p>
<pre><code>self.title_label = QLabel()
self.title_label.setText(u&quot;    DRRR Chat Room&quot;)
self.font = QtGui.QFont()
self.font.setPixelSize(22)   # 设置字号32,以像素为单位
self.font.setFamily(&quot;SimSun&quot;)# 设置字体，宋体
self.font.setBold(True)
self.font.setItalic(False)   # 设置字型,不倾斜
self.font.setUnderline(False)# 设置字型,无下划线
self.title_label.setFont(self.font)
</code></pre><p>设置标题栏文字，并设置字体。</p>
<pre><code>self.close_button = labelBtn(&apos;x&apos;)
self.min_button = labelBtn(&apos;-&apos;)
self.max_button = labelBtn(&apos;口&apos;)

self.close_button.setPixmap(QPixmap(&quot;./img/orange.png&quot;))
self.min_button.setPixmap(QPixmap(&quot;./img/green.png&quot;))
self.max_button.setPixmap(QPixmap(&quot;./img/blue.png&quot;))
</code></pre><p>新建最大化，最小化，关闭三个按钮，并设置按钮图片，之后设置样式和一些其他属性</p>
<pre><code>self.title_layout = QHBoxLayout()
self.title_layout.setContentsMargins(0, 0, 20, 0)
self.title_layout.addWidget(self.title_label,1,Qt.AlignCenter)
self.title_layout.addStretch()
self.title_layout.addWidget(self.min_button  ,0,Qt.AlignVCenter)
self.title_layout.addWidget(self.max_button  ,0,Qt.AlignVCenter)
self.title_layout.addWidget(self.close_button,0,Qt.AlignVCenter)

self.setLayout(self.title_layout)
</code></pre><p>将文字和三个按钮分别放在布局中，并设置<code>titleBar</code>窗口内的布局</p>
<p><code>StatusWindow</code>窗口类：</p>
<p>用来画窗口的状态栏，基本和<code>titleBar</code>类一样。</p>
<p><code>DrrrWindow</code>类：</p>
<p>继承自<code>ShadowsWindow</code>类，是程序的主要窗口。来看下其构造方法：</p>
<pre><code>self.getSetting()
...
def getSetting(self):
    &apos;&apos;&apos;获取应用设置&apos;&apos;&apos;
    self.settings = QtCore.QSettings(&quot;DrrrChatRoom.ini&quot;, QtCore.QSettings.IniFormat)
</code></pre><p>首先获取<code>ini</code>中的配置</p>
<pre><code>self.WebView = QWebEngineView()
</code></pre><p>new 一个<code>QWebEngineView</code>，然后</p>
<pre><code># 设置加载网页，和网页加载完成以及加载过程信号与槽函数关联
self.WebView.loadStarted.connect(self.loadStarted)
self.WebView.loadFinished.connect(self.loadFinished)
self.WebView.loadProgress.connect(self.loading)

# 重定义QWebEnginePage中javaScriptAlert等函数
self.WebView.page().javaScriptAlert = self._javascript_alert                
self.WebView.page().javaScriptConsoleMessage = self._javascript_console_message
self.WebView.page().javaScriptConfirm = self._javascript_confirm
self.WebView.page().javaScriptPrompt = self._javascript_prompt
</code></pre><p>然后：</p>
<pre><code># new一个标题栏和状态栏
self.titlebar = titleBar()
self.statusBar = StatusWindow()

# 中心窗口布局，并添加标题栏和状态栏
self.contentLayout = QVBoxLayout()
self.contentWidget = QWidget()
self.contentWidget.gridLayout = QtWidgets.QGridLayout(self.contentWidget)
self.contentWidget.gridLayout.addLayout(self.contentLayout, 0, 0, 1, 1)
self.contentLayout.addWidget(self.WebView)
self.contentWidget.gridLayout.setContentsMargins(0,0,0,0)
self.contentLayout.setContentsMargins(1,0,1,0)
self.contentWidget.setStyleSheet(&quot;&quot;&quot;
    border-left:    1px solid black;
    border-right:   1px solid black;
    &quot;&quot;&quot;)

self.main_layout = QVBoxLayout()
self.main_layout.addWidget(self.titlebar)
self.main_layout.addWidget(self.contentWidget)
self.main_layout.addWidget(self.statusBar)
self.main_layout.setSpacing(0)

# 窗口属性
self.setWindowFlags(Qt.Widget | QtCore.Qt.FramelessWindowHint)
self.setAttribute(Qt.WA_NoSystemBackground, True)
self.setAttribute(QtCore.Qt.WA_TranslucentBackground,True)

self.widget = QWidget()
self.setCentralWidget(self.widget)
self.widget.setLayout(self.main_layout)
self.widget.setMouseTracking(True)        
self.resize(650,650)
self.center()

# 将三个按钮点击信号与相关槽函数相关联
self.titlebar.min_button.clicked.connect(self.hideIt)
self.titlebar.max_button.clicked.connect(self.MaxAndNormal)
self.titlebar.close_button.clicked.connect(self.closeIt)

# 状态栏进度条：将LoadProgress信号与loading槽函数相关联
self.WebView.loadProgress.connect(self.loading)
</code></pre><p>最后：</p>
<pre><code># 设置加载时的网页，显示主窗口，并加载drrr.com
self.WebView.setHtml(WaitingHTML)
self.show()
self.WebView.setStyleSheet(&quot;&quot;&quot;
    QWebView {
        background-color:black
    }        
    QWebView::QScrollBar:Vertical {
        background-color:black
    }
    &quot;&quot;&quot;)
self.WebView.load(QUrl(&quot;http://drrr.com/&quot;))
</code></pre><p>该类中重写了<code>loadStarted()</code>，<code>loadFinished()</code>和方法，在其中获取网页中用户名等信息，并存储在<code>ini</code>配置文件中，或根据ini配置文件填写网页表单中的内容，由于<code>PyQt5.6</code>去除了<code>mainFrame()</code>方法，所以删除了这部分的操作。至此，整个程序基本结束。</p>
<h3 id="移植过后存在的问题"><a href="#移植过后存在的问题" class="headerlink" title="移植过后存在的问题"></a>移植过后存在的问题</h3><ul>
<li>程序能运行，但是进入<code>room</code>播放不了音乐，可能是<code>QtWebEngine</code>不支持吧</li>
<li>右上角三个按钮的功能没有实现，因为源程序用了<code>animation</code>动画，这个某些设置与<code>PyQt5.6</code>不兼容，也不想再弄了，麻烦。</li>
</ul>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>整个项目用来学习<code>PyQt5</code>还算不错。移植后的项目托管与<a href="https://github.com/xin053/DrrrClient" target="_blank" rel="external">我的github</a></p>]]></content>
      
        <categories>
            
            <category> PyQt5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PyQt5 </tag>
            
            <tag> Python3.5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Travis CI自动部署Hexo博客到Github]]></title>
      <url>https://xin053.github.io/2016/06/05/Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h2 id="使用Travis-CI自动部署你的Hexo博客到Github上"><a href="#使用Travis-CI自动部署你的Hexo博客到Github上" class="headerlink" title="使用Travis CI自动部署你的Hexo博客到Github上"></a>使用Travis CI自动部署你的Hexo博客到Github上</h2><h3 id="问题由来"><a href="#问题由来" class="headerlink" title="问题由来"></a>问题由来</h3><p>一般通过<code>Hexo</code>命令行三部曲：</p>
<pre><code>- hexo clean
- hexo g(enerate)
- hexo d(eploy)
</code></pre><p>就可以清除项目缓存，生成静态网页，然后<code>push</code>静态网页到<code>Github</code>，然后访问<code>https://GithubID.github.io</code>就可以访问更新后的<code>blog</code>了。</p>
<p>通过另外三部曲：</p>
<pre><code>- hexo clean
- hexo g(enerate)
- hexo s(erver)
</code></pre><p>即可开启本地服务器，通过浏览器访问<code>http://localhost:4000</code>便可以看到更新后的<code>blog</code>。</p>
<a id="more"></a>
<p><strong>但是：</strong> 由于上传到<code>github</code>上的只是静态网页文件，所以只能在具有整个网站项目源代码的电脑上进行写作，与文章同步与更新，而且每次都要执行<code>hexo</code>三部曲，不符合使用<code>git</code>的习惯。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>通过<code>Travis CI</code>自动部署，自动发布到<code>github</code>上，配置一下，便可实现在每次<code>git push</code>之后自动执行一个脚本，执行生成并发布等命令。相当于不在手动执行<code>hexo</code>三部曲，只用修改后，按照以往的<code>git</code>操作：</p>
<pre><code>add-&gt;commit-&gt;push
</code></pre><p>便可自动将源代码<code>push</code>到<code>github</code>,然后由<code>travis</code>自动<code>clone</code>项目，并由<code>travis</code>的虚拟机自动执行<code>hexo</code>三部曲,从而<code>deploy</code>更新后的网站到<code>github</code></p>
<h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>在本地新建<code>dev</code>分支，并在远程新建<code>dev</code>分支，每次本地修改提交到远程<code>dev</code>分支(本地新建<code>dev</code>分支只是为了好操作，不新建<code>dev</code>分支也可以,也就是本地<code>master</code>提交到远程<code>dev</code>)，<code>travis</code>配置文件<code>.vravis.yml</code>中监视远程dev分支的改变，<code>build</code>成功后添加动作：<code>hexo deploy</code>，其中<code>_config.yml</code>中<code>deploy</code>的分支为远程<code>master</code>，这样实现的效果是：</p>
<p><strong>当<code>git push dev</code>时，远程仓库的<code>dev</code>是整个项目源代码，而<code>travis</code>检测到<code>dev</code>分支改变，便会<code>clone dev</code>分支，并<code>build</code>，然后<code>deploy</code>到远程<code>master</code>分支，所以远程仓库<code>master</code>是整个<code>blog</code>的静态网页集合，于是实现了仓库中既有<code>blog</code>项目源代码，又有构建成功的整个项目，并且处在不同分支上。</strong></p>
<h3 id="具体配置"><a href="#具体配置" class="headerlink" title="具体配置"></a>具体配置</h3><p>参考以下文章：</p>
<ul>
<li><a href="http://www.jianshu.com/p/7f05b452fd3a" title="使用Travis自动部署Hexo(1)" target="_blank" rel="external">使用Travis自动部署Hexo(1)</a></li>
<li><a href="http://www.jianshu.com/p/fff7b3384f46" title="使用Travis自动部署Hexo(2)" target="_blank" rel="external">使用Travis自动部署Hexo(2)</a></li>
<li><a href="http://www.tuicool.com/articles/AZf2Yzb" title="Hexo 自动部署到 Github" target="_blank" rel="external">Hexo 自动部署到 Github</a></li>
<li><a href="http://www.2cto.com/kf/201605/505702.html" title="手把手教你使用Travis CI自动部署你的Hexo博客到Github上" target="_blank" rel="external">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></li>
</ul>
<h3 id="配置过程中遇到的问题"><a href="#配置过程中遇到的问题" class="headerlink" title="配置过程中遇到的问题"></a>配置过程中遇到的问题</h3><p>按照上面的第一篇配置，由于我是<code>windows</code>环境，所以按照上面的配置出现了错误，和博主下面说明的情况一致，没有解决。</p>
<p>于是尝试第二篇中的做法，结合第三篇文章中的配置说明，其中</p>
<pre><code># 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到
# TOKEN 是上面github生成的Token
travis encrypt &apos;REPO_TOKEN=&lt;TOKEN&gt;&apos; --add
</code></pre><p>在<code>cmd</code>中运行上面的命令报错：</p>
<pre><code>系统找不到指定文件
</code></pre><p>没有解决，最终查到<code>travis</code>使用方法，用下面指令代替：</p>
<pre><code>travis encrypt -r pwmckenna/node-travis-encrypt GH_TOKEN=0efdabf1c44122b90db5****** --add
</code></pre><p>其实也就是将<code>GH_TOKEN=TOKEN</code>这个环境变量加密,以便在<code>.travis.yml</code>能够使用<code>GH_TOKEN</code>访问到<code>TOKEN</code></p>
<p>附上<code>.travis.yml</code>配置：</p>
<pre><code>language: node_js

node_js: stable

branches:
  only:
  - dev      # 监视github仓库中的dev分支，分支出现变化就执行build

before_install:
- export TZ=&apos;Asia/Shanghai&apos;
- npm install -g hexo
- npm install -g hexo-cli

install:
- npm install

script:
- git submodule init      # 用于更新主题,更新源为自己的主题项目，否则会clone最新NexT主题，而官方主题配置文件没有设置
- git submodule update
- hexo clean &amp;&amp; hexo g

env:
  global:
    secure: ***HcNd3E02rGSZ3mzYHmNwsTKBIXa8cdOHIqmnuV8P9xAFRaDRUEdE8gqFmNCeKd5hriM64sO5BGU/szI7Q2uJNhUgDg0Rw/UZMbZCei5Pf112qzDpbb/ok1PUU9Q282sI1YVf8poBUvMHmoHLOMayR25IjIysb5aE+8kpipDbReU=

after_success:
- git config --global user.name &quot;xin053&quot;
- git config --global user.email &quot;13207130066.cool@163.com&quot;
- sed -i&apos;&apos; &quot;s~git@github.com:xin053/xin053.github.io.git~https://${GH_TOKEN}:x-oauth-basic@github.com/xin053/xin053.github.io.git~&quot; _config.yml
- hexo deploy
</code></pre><p>项目根目录下新建<code>.gitmodules</code>文件，并写入：</p>
<pre><code>[submodule &quot;themes/next&quot;]
    path = themes/next
    url = git://github.com/xin053/MyHexo_NexT_Theme
</code></pre><p>则<code>build</code>时更新主题的源是自己修改后的主题,不能用官网<code>NexT</code>主题，如果设置成官网主题会发现最终网站发布样式主题是默认的设置，而覆盖掉了原先自己的主题配置。</p>
<p><code>_config.yml</code>的<code>deploy</code>配置如下：</p>
<pre><code>deploy:
  type: git
  repository: git@github.com:xin053/xin053.github.io.git
  branch: master      # 将build后的静态网页发布到github仓库master分支
</code></pre><p>其中还要注意<code>TOKEN</code>的权限，<code>github</code>默认生成的<code>TOKEN</code>权限很低，如果使用默认的，<code>build</code>过程中虽然<code>travis</code>显示构建成功，但是<code>log</code>中显示<code>hexo deploy</code>失败，原因是权限问题，所以建议设置权限如下，即全部勾选。</p>
<p><img src="http://i.imgur.com/HaFgkwf.png" alt=""></p>
<p><code>travis</code>的<code>log</code>中最后显示如下图所示时，说明已经部署成功了：</p>
<p><img src="http://i.imgur.com/47CPLk0.png" alt=""></p>
<p>而最后一篇文章则是通过<code>travis</code>网站来设置环境变量，更方便，也更快捷</p>
<p><img src="http://i.imgur.com/MoGZ0UC.png" alt=""></p>
<p>在网站中设置了环境变量之后，就可以去掉<code>.travis.yml</code>中的<code>env</code>项了。</p>
<p>设置好后，只用在网站项目源码根目录下执行：</p>
<pre><code>git init
</code></pre><p>初始化git,仅第一次需要，然后</p>
<pre><code>git add .
git commit -am &quot;update&quot;
</code></pre><p>第一次提交到远程仓库要先添加远程仓库：</p>
<pre><code>git remote add master git@github.com:xin053/xin053.github.io.git
</code></pre><p>将本地<code>dev</code>与远程默认分支进行关联</p>
<pre><code>git push -f --set-upstream dev dev
</code></pre><p>如果原理<code>github</code>下是原来的静态网站，者这里用<code>-f</code>强推，覆盖掉原来的项目就行。</p>
<p>之后每次就只用</p>
<pre><code>git push dev
</code></pre><p>也就是每次写完博客之后，在网站项目源代码根目录执行三部曲：</p>
<pre><code>git add .
git commit -am &quot;update&quot;
git push dev
</code></pre><p>就可以提交最新源代码到<code>github</code>的<code>dev</code>分支,同时<code>travis</code>会自动<code>build</code>，生成最新的静态网页<code>deploy</code>到<code>github</code>的<code>master</code>分支。</p>
<p><code>build</code>记录可以参见<code>https://travis-ci.org/</code></p>
<p><img src="http://i.imgur.com/yEmpXuC.png" alt=""></p>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Travis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MarkDown语法]]></title>
      <url>https://xin053.github.io/2016/06/05/MarkDown%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>&lt;&lt; <a href="http://wowubuntu.com" target="_blank" rel="external">访问 Wow!Ubuntu</a></p>
<p><strong>NOTE:</strong> This is Simplelified  Chinese Edition Document of Markdown Syntax. If you are seeking for English Edition Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdown: Syntax</a>.</p>
<p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/" target="_blank" rel="external">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="http://gitcafe.com/riku/Markdown-Syntax-CN/blob/master/syntax.md" target="_blank" rel="external">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="external">查看这里</a> 。」–By @<a href="http://twitter.com/riku" target="_blank" rel="external">riku</a></p>
<p><strong>注：</strong> 本文由xin053 fork在自己blog下便于查阅。</p>
<p><strong>注：</strong> 本项目托管于 <a href="http://gitcafe.com/riku/Markdown-Syntax-CN/" target="_blank" rel="external">GitCafe</a>上，请通过”派生”和”合并请求”来帮忙改进本项目。</p>
<a id="more"></a>
<h1 id="Markdown-语法说明-简体中文版-点击查看快速入门"><a href="#Markdown-语法说明-简体中文版-点击查看快速入门" class="headerlink" title="Markdown 语法说明 (简体中文版) / (点击查看快速入门)"></a>Markdown 语法说明 (简体中文版) / (<a href="./basic.html">点击查看快速入门</a>)</h1><ul>
<li><a href="#overview">概述</a><ul>
<li><a href="#philosophy">宗旨</a></li>
<li><a href="#html">兼容 HTML</a></li>
<li><a href="#autoescape">特殊字符自动转换</a></li>
</ul>
</li>
<li><a href="#block">区块元素</a><ul>
<li><a href="#p">段落和换行</a></li>
<li><a href="#header">标题</a></li>
<li><a href="#blockquote">区块引用</a></li>
<li><a href="#list">列表</a></li>
<li><a href="#precode">代码区块</a></li>
<li><a href="#hr">分隔线</a></li>
</ul>
</li>
<li><a href="#span">区段元素</a><ul>
<li><a href="#link">链接</a></li>
<li><a href="#em">强调</a></li>
<li><a href="#code">代码</a></li>
<li><a href="#img">图片</a></li>
</ul>
</li>
<li><a href="#misc">其它</a><ul>
<li><a href="#backslash">反斜杠</a></li>
<li><a href="#autolink">自动链接</a></li>
</ul>
</li>
<li><a href="#acknowledgement">感谢</a></li>
<li><a href="#editor">Markdown 免费编辑器</a></li>
</ul>
<hr>
<h2 id="overview">概述</h2>

<h3 id="philosophy">宗旨</h3>

<p>Markdown 的目标是实现「易读易写」。</p>
<p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="external">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="external">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="external">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/" target="_blank" rel="external">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p>
<p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p>
<h3 id="html">兼容 HTML</h3>

<p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p>
<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
<p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
<p>要制约的只有一些 HTML 区块元素――比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 <code>&lt;p&gt;</code> 标签。</p>
<p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p>
<pre><code>这是一个普通段落。

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

这是另一个普通段落。
</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p>
<p>HTML 的区段（行内）标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p>
<p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p>
<h3 id="autoescape">特殊字符自动转换</h3>

<p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>
<p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p>
<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre><p>你必须要把网址转换写为：</p>
<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p>
<p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p>
<p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p>
<pre><code>&amp;copy;
</code></pre><p>Markdown 会保留它不动。而若你写：</p>
<pre><code>AT&amp;T
</code></pre><p>Markdown 就会将它转为：</p>
<pre><code>AT&amp;amp;T
</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p>
<pre><code>4 &lt; 5
</code></pre><p>Markdown 将会把它转换为：</p>
<pre><code>4 &amp;lt; 5
</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p>
<hr>
<h2 id="block">区块元素</h2>


<h3 id="p">段落和换行</h3>

<p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p>
<p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p>
<p>如果你<em>确实</em>想要依赖 Markdown 来插入 <code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p>
<p>的确，需要多费点事（多加空格）来产生 <code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="#blockquote">区块引用</a> 和多段落的 <a href="#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p>
<h3 id="header">标题</h3>

<p>Markdown 支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a> 形式。</p>
<p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p>
<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>
<p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p>
<pre><code># 这是 H1

## 这是 H2

###### 这是 H6
</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p>
<pre><code># 这是 H1 #

## 这是 H2 ##

### 这是 H3 ######
</code></pre><h3 id="blockquote">区块引用 Blockquotes</h3>

<p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p>
<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<pre><code>&gt; ## 这是一个标题。
&gt; 
&gt; 1.   这是第一行列表项。
&gt; 2.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p>
<h3 id="list">列表</h3>

<p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<pre><code>*   Red
*   Green
*   Blue
</code></pre><p>等同于：</p>
<pre><code>+   Red
+   Green
+   Blue
</code></pre><p>也等同于：</p>
<pre><code>-   Red
-   Green
-   Blue
</code></pre><p>有序列表则使用数字接着一个英文句点：</p>
<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>
<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre><p>如果你的列表标记写成：</p>
<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre><p>或甚至是：</p>
<pre><code>3. Bird
1. McHale
8. Parish
</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p>
<p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>
<p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p>
<p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>但是如果你懒，那也行：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <code>&lt;p&gt;</code><br>标签包起来，举例来说：</p>
<pre><code>*   Bird
*   Magic
</code></pre><p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre><p>但是这个：</p>
<pre><code>*   Bird

*   Magic
</code></pre><p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p>
<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>
<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You&apos;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p>
<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p>
<pre><code>*   一列表项包含一个列表区块：

        &lt;代码写在这&gt;
</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>
<pre><code>1986. What a great season.
</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p>
<pre><code>1986\. What a great season.
</code></pre><h3 id="precode">代码区块</h3>

<p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p>
<p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p>
<pre><code>这是一个普通段落：

    这是一个代码区块。
</code></pre><p>Markdown 会转换成：</p>
<pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一个代码区块。
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p>
<pre><code>Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell
</code></pre><p>会被转换为：</p>
<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p>
<p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p>
<pre><code>&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre><p>会被转换为：</p>
<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p>
<h3 id="hr">分隔线</h3>

<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p>
<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre><hr>
<h2 id="span">区段元素</h2>

<h3 id="link">链接</h3>

<p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p>
<p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p>
<p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p>
<pre><code>See my [About](/about/) page for details.   
</code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p>
<pre><code>This is [an example][id] reference-style link.
</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p>
<pre><code>This is [an example] [id] reference-style link.
</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p>
<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;
</code></pre><p>链接内容定义的形式为：</p>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>
<p>下面这三种链接的定义都是相同：</p>
<pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &apos;Optional Title Here&apos;
[foo]: http://example.com/  (Optional Title Here)
</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>
<p>链接网址也可以用尖括号包起来：</p>
<pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;
</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p>
<pre><code>[id]: http://example.com/longish/path/to/resource/here
    &quot;Optional Title Here&quot;
</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p>
<p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p>
<pre><code>[link text][a]
[link text][A]
</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p>
<pre><code>[Google][]
</code></pre><p>然后定义链接内容：</p>
<pre><code>[Google]: http://google.com/
</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p>
<pre><code>Visit [Daring Fireball][] for more information.
</code></pre><p>然后接着定义链接：</p>
<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p>
<p>下面是一个参考式链接的范例：</p>
<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>如果改成用链接名称的方式写：</p>
<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>上面两种写法都会产生下面的 HTML。</p>
<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from
&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;
or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p>
<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p>
<p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p>
<h3 id="em">强调</h3>

<p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre><p>会转成：</p>
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p>
<p>强调也可以直接插在文字中间：</p>
<pre><code>un*frigging*believable
</code></pre><p>但是<strong>如果你的 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p>
<p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p>
<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre><h3 id="code">代码</h3>

<p>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>` </code>），例如：</p>
<pre><code>Use the `printf()` function.
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p>
<pre><code>``There is a literal backtick (`) here.``
</code></pre><p>这段语法会产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p>
<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre><p>在代码区段内，<code>&amp;</code> 和尖括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p>
<pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.
</code></pre><p>转为：</p>
<pre><code>&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre><p>你也可以这样写：</p>
<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre><p>以产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre><h3 id="img">图片</h3>

<p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p>
<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p>
<p>行内式的图片语法看起来像是：</p>
<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
</code></pre><p>详细叙述如下：</p>
<ul>
<li>一个惊叹号 <code>!</code></li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上<br>选择性的 ‘title’ 文字。</li>
</ul>
<p>参考式的图片语法则长得像这样：</p>
<pre><code>![Alt text][id]
</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p>
<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;
</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h2 id="misc">其它</h2>

<h3 id="autolink">自动链接</h3>

<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p>
<pre><code>&lt;http://example.com/&gt;
</code></pre><p>Markdown 会转为：</p>
<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;
</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p>
<pre><code>&lt;address@example.com&gt;
</code></pre><p>Markdown 会转成：</p>
<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre><p>在浏览器里面，这段字串（其实是 <code>&lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;</code>）会变成一个可以点击的「address@example.com」链接。</p>
<p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p>
<h3 id="backslash">反斜杠</h3>

<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），你可以在星号的前面加上反斜杠：</p>
<pre><code>\*literal asterisks\*
</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<pre><code>\   反斜线
`   反引号
*   星号
_   底线
{}  花括号
[]  方括号
()  括弧
#   井字号
+   加号
-   减号
.   英文句点
!   惊叹号
</code></pre><h2 id="acknowledgement">感谢</h2>

<p>感谢 <a href="https://twitter.com/#!/leafy7382" target="_blank" rel="external">leafy7382</a> 协助翻译，<a href="http://iamhlb.com/" target="_blank" rel="external">hlb</a>、<a href="http://twitter.com/randylien" target="_blank" rel="external">Randylien</a> 帮忙润稿，<a href="https://twitter.com/#!/ethantw" target="_blank" rel="external">ethantw</a> 的<a href="http://ethantw.net/projects/han/" target="_blank" rel="external">汉字标准格式・CSS Reset</a>， <a href="http://kidwm.net/" target="_blank" rel="external">WM</a> 回报文字错误。</p>
<p>感谢 <a href="https://github.com/fenprace" target="_blank" rel="external">fenprace</a>，<a href="https://github.com/addv" target="_blank" rel="external">addv</a>。</p>
<hr>
<h2 id="editor">Markdown 免费编辑器</h2>

<p>Windows 平台</p>
<ul>
<li><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad</a></li>
<li><a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="external">MarkPad</a></li>
</ul>
<p>Linux 平台</p>
<ul>
<li><a href="http://sourceforge.net/p/retext/home/ReText/" target="_blank" rel="external">ReText</a></li>
</ul>
<p>Mac 平台</p>
<ul>
<li><a href="http://mouapp.com/" target="_blank" rel="external">Mou</a></li>
</ul>
<p>在线编辑器</p>
<ul>
<li><a href="http://markable.in/" target="_blank" rel="external">Markable.in</a></li>
<li><a href="http://dillinger.io/" target="_blank" rel="external">Dillinger.io</a></li>
</ul>
<p>浏览器插件</p>
<ul>
<li><a href="https://chrome.google.com/webstore/detail/oknndfeeopgpibecfjljjfanledpbkog" target="_blank" rel="external">MaDe</a> (Chrome)</li>
</ul>
<p>高级应用</p>
<ul>
<li><a href="http://www.sublimetext.com/2" target="_blank" rel="external">Sublime Text 2</a> + <a href="http://ttscoff.github.com/MarkdownEditing/" target="_blank" rel="external">MarkdownEditing</a> / <a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/" target="_blank" rel="external">教程</a></li>
</ul>
<p>*** 如有更好的 Markdown 免费编辑器推荐，请到<a href="https://gitcafe.com/riku/Markdown-Syntax-CN/tickets/1" target="_blank" rel="external">这里反馈</a>，谢谢！</p>]]></content>
      
        <categories>
            
            <category> MarkDown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo Quick Start]]></title>
      <url>https://xin053.github.io/2016/06/04/Hexo%20Quick%20Start/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
